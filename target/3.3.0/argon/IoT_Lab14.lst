
c:/Users/aiden/Desktop/IoT-Engineering/VisualStudioCodeProjects/IoT_Lab14/target/3.3.0/argon/IoT_Lab14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000076c0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bb6e0  000bb6e0  0000b6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bb704  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  2003e400  000bb708  0001e400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000214  2003e5dc  2003e5dc  0002e5dc  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bb8e4  000bb8e4  0002b8e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bb90c  000bb90c  0002b90c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00144497  00000000  00000000  0002b910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00017361  00000000  00000000  0016fda7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00047f20  00000000  00000000  00187108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000034a8  00000000  00000000  001cf028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b538  00000000  00000000  001d24d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00041e55  00000000  00000000  001dda08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00050d4f  00000000  00000000  0021f85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00137f89  00000000  00000000  002705ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a3a0  00000000  00000000  003a8538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 fa46 	bl	b84c2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 fa4e 	bl	b84de <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e400 	.word	0x2003e400
   b404c:	000bb708 	.word	0x000bb708
   b4050:	2003e5dc 	.word	0x2003e5dc
   b4054:	2003e5dc 	.word	0x2003e5dc
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 fd55 	bl	b6b10 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bb6bc 	.word	0x000bb6bc
   b4080:	000bb6e0 	.word	0x000bb6e0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b876 	b.w	b4174 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f887 	bl	b419c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 bcf5 	b.w	b6a80 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 b93d 	b.w	b6314 <malloc>

000b409a <_Znaj>:
   b409a:	f002 b93b 	b.w	b6314 <malloc>

000b409e <_ZdaPv>:
   b409e:	f002 b941 	b.w	b6324 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f002 b93f 	b.w	b6324 <free>
	...

000b40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f002 f884 	bl	b61bc <panic_>
  while (1);
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000b5ead 	.word	0x000b5ead
   b40bc:	000ba3d8 	.word	0x000ba3d8

000b40c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_Z8callbackPcPhj>:
float longi = 0;

unsigned long moment = millis();

void callback(char *topic, byte *payload, unsigned int length)
{
   b40d0:	b5b0      	push	{r4, r5, r7, lr}
   b40d2:	ed2d 8b02 	vpush	{d8}
  char p[length + 1];
   b40d6:	f102 0308 	add.w	r3, r2, #8
{
   b40da:	b088      	sub	sp, #32
  char p[length + 1];
   b40dc:	f023 0307 	bic.w	r3, r3, #7
{
   b40e0:	af00      	add	r7, sp, #0
  char p[length + 1];
   b40e2:	ebad 0d03 	sub.w	sp, sp, r3
{
   b40e6:	4615      	mov	r5, r2
   b40e8:	4604      	mov	r4, r0
  memcpy(p, payload, length);
   b40ea:	4668      	mov	r0, sp
   b40ec:	f004 f9e9 	bl	b84c2 <memcpy>
  p[length] = NULL;
   b40f0:	2300      	movs	r3, #0

  String s = p;
   b40f2:	4669      	mov	r1, sp
   b40f4:	4638      	mov	r0, r7
  p[length] = NULL;
   b40f6:	f80d 3005 	strb.w	r3, [sp, r5]
  String s = p;
   b40fa:	f002 fa98 	bl	b662e <_ZN6StringC1EPK19__FlashStringHelper>
  double value = s.toFloat();
   b40fe:	4638      	mov	r0, r7
   b4100:	f002 face 	bl	b66a0 <_ZNK6String7toFloatEv>

  if (String(topic) == "christianity/lat")
   b4104:	4621      	mov	r1, r4
   b4106:	f107 0010 	add.w	r0, r7, #16
  double value = s.toFloat();
   b410a:	eeb0 8a40 	vmov.f32	s16, s0
  if (String(topic) == "christianity/lat")
   b410e:	f002 fa8e 	bl	b662e <_ZN6StringC1EPK19__FlashStringHelper>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4112:	4914      	ldr	r1, [pc, #80]	; (b4164 <_Z8callbackPcPhj+0x94>)
   b4114:	f107 0010 	add.w	r0, r7, #16
   b4118:	f002 faaf 	bl	b667a <_ZNK6String6equalsEPKc>
   b411c:	4605      	mov	r5, r0
   b411e:	f107 0010 	add.w	r0, r7, #16
   b4122:	f002 fa39 	bl	b6598 <_ZN6StringD1Ev>
   b4126:	b155      	cbz	r5, b413e <_Z8callbackPcPhj+0x6e>
  {
    lat = value;
   b4128:	4b0f      	ldr	r3, [pc, #60]	; (b4168 <_Z8callbackPcPhj+0x98>)
  }
  else if (String(topic) == "christianity/longi")
  {
    longi = value;
   b412a:	ed83 8a00 	vstr	s16, [r3]
  String s = p;
   b412e:	4638      	mov	r0, r7
   b4130:	f002 fa32 	bl	b6598 <_ZN6StringD1Ev>
  }
}
   b4134:	3720      	adds	r7, #32
   b4136:	46bd      	mov	sp, r7
   b4138:	ecbd 8b02 	vpop	{d8}
   b413c:	bdb0      	pop	{r4, r5, r7, pc}
  else if (String(topic) == "christianity/longi")
   b413e:	4621      	mov	r1, r4
   b4140:	f107 0010 	add.w	r0, r7, #16
   b4144:	f002 fa73 	bl	b662e <_ZN6StringC1EPK19__FlashStringHelper>
   b4148:	4908      	ldr	r1, [pc, #32]	; (b416c <_Z8callbackPcPhj+0x9c>)
   b414a:	f107 0010 	add.w	r0, r7, #16
   b414e:	f002 fa94 	bl	b667a <_ZNK6String6equalsEPKc>
   b4152:	4604      	mov	r4, r0
   b4154:	f107 0010 	add.w	r0, r7, #16
   b4158:	f002 fa1e 	bl	b6598 <_ZN6StringD1Ev>
   b415c:	2c00      	cmp	r4, #0
   b415e:	d0e6      	beq.n	b412e <_Z8callbackPcPhj+0x5e>
    longi = value;
   b4160:	4b03      	ldr	r3, [pc, #12]	; (b4170 <_Z8callbackPcPhj+0xa0>)
   b4162:	e7e2      	b.n	b412a <_Z8callbackPcPhj+0x5a>
   b4164:	000ba3ed 	.word	0x000ba3ed
   b4168:	2003e6ac 	.word	0x2003e6ac
   b416c:	000ba3fe 	.word	0x000ba3fe
   b4170:	2003e6b0 	.word	0x2003e6b0

000b4174 <setup>:

MQTT client("lab.thewcl.com", 1883, callback);

void setup()
{
   b4174:	b508      	push	{r3, lr}
  display.setup();
   b4176:	4808      	ldr	r0, [pc, #32]	; (b4198 <setup+0x24>)
   b4178:	f000 fd08 	bl	b4b8c <_ZN16OledWingAdafruit5setupEv>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b417c:	4806      	ldr	r0, [pc, #24]	; (b4198 <setup+0x24>)
   b417e:	2300      	movs	r3, #0
   b4180:	6103      	str	r3, [r0, #16]
  display.setCursor(0, 0);
  display.setTextSize(1);
   b4182:	2101      	movs	r1, #1
   b4184:	f000 fcb3 	bl	b4aee <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4188:	4803      	ldr	r0, [pc, #12]	; (b4198 <setup+0x24>)
   b418a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b418e:	6143      	str	r3, [r0, #20]
  display.setTextColor(WHITE);
  display.display();
}
   b4190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  display.display();
   b4194:	f001 bdb0 	b.w	b5cf8 <_ZN16Adafruit_SSD13067displayEv>
   b4198:	2003e63c 	.word	0x2003e63c

000b419c <loop>:

void loop()
{
   b419c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  display.loop();
   b419e:	4828      	ldr	r0, [pc, #160]	; (b4240 <loop+0xa4>)
   b41a0:	f000 fd1d 	bl	b4bde <_ZN16OledWingAdafruit4loopEv>
  if (client.isConnected())
   b41a4:	4827      	ldr	r0, [pc, #156]	; (b4244 <loop+0xa8>)
   b41a6:	f000 fea5 	bl	b4ef4 <_ZN4MQTT11isConnectedEv>
   b41aa:	2800      	cmp	r0, #0
   b41ac:	d035      	beq.n	b421a <loop+0x7e>
  {
    client.loop();

    if (millis() >= moment + 10000)
   b41ae:	4c26      	ldr	r4, [pc, #152]	; (b4248 <loop+0xac>)
    client.loop();
   b41b0:	4824      	ldr	r0, [pc, #144]	; (b4244 <loop+0xa8>)
   b41b2:	f001 f876 	bl	b52a2 <_ZN4MQTT4loopEv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41b6:	f001 fe81 	bl	b5ebc <HAL_Timer_Get_Milli_Seconds>
    if (millis() >= moment + 10000)
   b41ba:	6823      	ldr	r3, [r4, #0]
   b41bc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
   b41c0:	3310      	adds	r3, #16
   b41c2:	4283      	cmp	r3, r0
   b41c4:	d807      	bhi.n	b41d6 <loop+0x3a>
   b41c6:	f001 fe79 	bl	b5ebc <HAL_Timer_Get_Milli_Seconds>
    {
      moment = millis();
      client.publish("christianity", "GIVE ME THE POSITION!");
   b41ca:	4a20      	ldr	r2, [pc, #128]	; (b424c <loop+0xb0>)
      moment = millis();
   b41cc:	6020      	str	r0, [r4, #0]
      client.publish("christianity", "GIVE ME THE POSITION!");
   b41ce:	4920      	ldr	r1, [pc, #128]	; (b4250 <loop+0xb4>)
   b41d0:	481c      	ldr	r0, [pc, #112]	; (b4244 <loop+0xa8>)
   b41d2:	f001 f80a 	bl	b51ea <_ZN4MQTT7publishEPKcS1_>
    client.connect(System.deviceID());
    client.subscribe("christianity/lat");
    client.subscribe("christianity/longi");
  }

  display.clearDisplay();
   b41d6:	4c1a      	ldr	r4, [pc, #104]	; (b4240 <loop+0xa4>)
   b41d8:	4620      	mov	r0, r4
   b41da:	f001 fb1f 	bl	b581c <_ZN16Adafruit_SSD130612clearDisplayEv>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b41de:	2300      	movs	r3, #0
   b41e0:	6123      	str	r3, [r4, #16]
  display.setCursor(0, 0);
  display.print("Latitude: ");
   b41e2:	491c      	ldr	r1, [pc, #112]	; (b4254 <loop+0xb8>)
   b41e4:	4620      	mov	r0, r4
   b41e6:	f002 fab1 	bl	b674c <_ZN5Print5printEPKc>
  display.println(lat);
   b41ea:	4b1b      	ldr	r3, [pc, #108]	; (b4258 <loop+0xbc>)
   b41ec:	2102      	movs	r1, #2
   b41ee:	ed93 0a00 	vldr	s0, [r3]
   b41f2:	4620      	mov	r0, r4
   b41f4:	f002 fbaf 	bl	b6956 <_ZN5Print7printlnEfi>
  display.print("Longitude: ");
   b41f8:	4918      	ldr	r1, [pc, #96]	; (b425c <loop+0xc0>)
   b41fa:	4620      	mov	r0, r4
   b41fc:	f002 faa6 	bl	b674c <_ZN5Print5printEPKc>
  display.println(longi);
   b4200:	4b17      	ldr	r3, [pc, #92]	; (b4260 <loop+0xc4>)
   b4202:	2102      	movs	r1, #2
   b4204:	ed93 0a00 	vldr	s0, [r3]
   b4208:	4620      	mov	r0, r4
   b420a:	f002 fba4 	bl	b6956 <_ZN5Print7printlnEfi>
  display.display();
   b420e:	4620      	mov	r0, r4
   b4210:	b004      	add	sp, #16
   b4212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.display();
   b4216:	f001 bd6f 	b.w	b5cf8 <_ZN16Adafruit_SSD13067displayEv>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b421a:	4668      	mov	r0, sp
   b421c:	f002 f86a 	bl	b62f4 <spark_deviceID>
    client.connect(System.deviceID());
   b4220:	9900      	ldr	r1, [sp, #0]
   b4222:	4808      	ldr	r0, [pc, #32]	; (b4244 <loop+0xa8>)
   b4224:	f000 ff56 	bl	b50d4 <_ZN4MQTT7connectEPKc>
   b4228:	4668      	mov	r0, sp
   b422a:	f002 f9b5 	bl	b6598 <_ZN6StringD1Ev>
    client.subscribe("christianity/lat");
   b422e:	490d      	ldr	r1, [pc, #52]	; (b4264 <loop+0xc8>)
   b4230:	4804      	ldr	r0, [pc, #16]	; (b4244 <loop+0xa8>)
   b4232:	f001 f97e 	bl	b5532 <_ZN4MQTT9subscribeEPKc>
    client.subscribe("christianity/longi");
   b4236:	490c      	ldr	r1, [pc, #48]	; (b4268 <loop+0xcc>)
   b4238:	4802      	ldr	r0, [pc, #8]	; (b4244 <loop+0xa8>)
   b423a:	f001 f97a 	bl	b5532 <_ZN4MQTT9subscribeEPKc>
   b423e:	e7ca      	b.n	b41d6 <loop+0x3a>
   b4240:	2003e63c 	.word	0x2003e63c
   b4244:	2003e5dc 	.word	0x2003e5dc
   b4248:	2003e6b4 	.word	0x2003e6b4
   b424c:	000ba411 	.word	0x000ba411
   b4250:	000ba427 	.word	0x000ba427
   b4254:	000ba434 	.word	0x000ba434
   b4258:	2003e6ac 	.word	0x2003e6ac
   b425c:	000ba43f 	.word	0x000ba43f
   b4260:	2003e6b0 	.word	0x2003e6b0
   b4264:	000ba3ed 	.word	0x000ba3ed
   b4268:	000ba3fe 	.word	0x000ba3fe

000b426c <_GLOBAL__sub_I_display>:
   b426c:	b507      	push	{r0, r1, r2, lr}
SYSTEM_THREAD(ENABLED);
   b426e:	2100      	movs	r1, #0
   b4270:	2001      	movs	r0, #1
   b4272:	f001 ffc3 	bl	b61fc <system_thread_set_state>
OledWingAdafruit display;
   b4276:	2107      	movs	r1, #7
   b4278:	4809      	ldr	r0, [pc, #36]	; (b42a0 <_GLOBAL__sub_I_display+0x34>)
   b427a:	f000 fc59 	bl	b4b30 <_ZN16OledWingAdafruitC1Ei>
   b427e:	f001 fe1d 	bl	b5ebc <HAL_Timer_Get_Milli_Seconds>
unsigned long moment = millis();
   b4282:	4b08      	ldr	r3, [pc, #32]	; (b42a4 <_GLOBAL__sub_I_display+0x38>)
MQTT client("lab.thewcl.com", 1883, callback);
   b4284:	4908      	ldr	r1, [pc, #32]	; (b42a8 <_GLOBAL__sub_I_display+0x3c>)
unsigned long moment = millis();
   b4286:	6018      	str	r0, [r3, #0]
MQTT client("lab.thewcl.com", 1883, callback);
   b4288:	2300      	movs	r3, #0
   b428a:	9300      	str	r3, [sp, #0]
   b428c:	f240 725b 	movw	r2, #1883	; 0x75b
   b4290:	4b06      	ldr	r3, [pc, #24]	; (b42ac <_GLOBAL__sub_I_display+0x40>)
   b4292:	4807      	ldr	r0, [pc, #28]	; (b42b0 <_GLOBAL__sub_I_display+0x44>)
   b4294:	f000 fd52 	bl	b4d3c <_ZN4MQTTC1EPKctPFvPcPhjEb>
   b4298:	b003      	add	sp, #12
   b429a:	f85d fb04 	ldr.w	pc, [sp], #4
   b429e:	bf00      	nop
   b42a0:	2003e63c 	.word	0x2003e63c
   b42a4:	2003e6b4 	.word	0x2003e6b4
   b42a8:	000ba44b 	.word	0x000ba44b
   b42ac:	000b40d1 	.word	0x000b40d1
   b42b0:	2003e5dc 	.word	0x2003e5dc

000b42b4 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b42b4:	4770      	bx	lr

000b42b6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b42b6:	b510      	push	{r4, lr}
  }
   b42b8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b42ba:	4604      	mov	r4, r0
  }
   b42bc:	f7ff fef1 	bl	b40a2 <_ZdlPvj>
   b42c0:	4620      	mov	r0, r4
   b42c2:	bd10      	pop	{r4, pc}

000b42c4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42c4:	b40e      	push	{r1, r2, r3}
   b42c6:	b503      	push	{r0, r1, lr}
   b42c8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b42ca:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42cc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42d0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42d2:	f002 fb4f 	bl	b6974 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42d6:	b002      	add	sp, #8
   b42d8:	f85d eb04 	ldr.w	lr, [sp], #4
   b42dc:	b003      	add	sp, #12
   b42de:	4770      	bx	lr

000b42e0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b42e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b42e2:	4604      	mov	r4, r0
   b42e4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b42e6:	7922      	ldrb	r2, [r4, #4]
   b42e8:	68a3      	ldr	r3, [r4, #8]
   b42ea:	b132      	cbz	r2, b42fa <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b42ec:	b9a3      	cbnz	r3, b4318 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b42ee:	490b      	ldr	r1, [pc, #44]	; (b431c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b42f0:	b002      	add	sp, #8
   b42f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b42f6:	f002 ba29 	b.w	b674c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b42fa:	4a09      	ldr	r2, [pc, #36]	; (b4320 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b42fc:	7b26      	ldrb	r6, [r4, #12]
   b42fe:	4d09      	ldr	r5, [pc, #36]	; (b4324 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4300:	4909      	ldr	r1, [pc, #36]	; (b4328 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4302:	7b64      	ldrb	r4, [r4, #13]
   b4304:	2e01      	cmp	r6, #1
   b4306:	bf18      	it	ne
   b4308:	4629      	movne	r1, r5
   b430a:	e9cd 1400 	strd	r1, r4, [sp]
   b430e:	4907      	ldr	r1, [pc, #28]	; (b432c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4310:	f7ff ffd8 	bl	b42c4 <_ZN5Print6printfEPKcz>
  }
   b4314:	b002      	add	sp, #8
   b4316:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4318:	4a05      	ldr	r2, [pc, #20]	; (b4330 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b431a:	e7ef      	b.n	b42fc <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b431c:	000ba46b 	.word	0x000ba46b
   b4320:	000ba44a 	.word	0x000ba44a
   b4324:	000ba467 	.word	0x000ba467
   b4328:	000ba463 	.word	0x000ba463
   b432c:	000ba481 	.word	0x000ba481
   b4330:	000ba45a 	.word	0x000ba45a

000b4334 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4338:	b085      	sub	sp, #20
   b433a:	461f      	mov	r7, r3
   b433c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4340:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4344:	eba8 0902 	sub.w	r9, r8, r2
   b4348:	eba7 0a01 	sub.w	sl, r7, r1
   b434c:	f1b9 0f00 	cmp.w	r9, #0
   b4350:	bfb8      	it	lt
   b4352:	f1c9 0900 	rsblt	r9, r9, #0
   b4356:	f1ba 0f00 	cmp.w	sl, #0
   b435a:	bfb8      	it	lt
   b435c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b4360:	45d1      	cmp	r9, sl
        uint16_t color) {
   b4362:	4683      	mov	fp, r0
   b4364:	460c      	mov	r4, r1
   b4366:	4615      	mov	r5, r2
    if (steep) {
   b4368:	dd04      	ble.n	b4374 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b436a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b436c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b436e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b4370:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b4372:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b4374:	42bc      	cmp	r4, r7
   b4376:	dd05      	ble.n	b4384 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b4378:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b437a:	4645      	mov	r5, r8
   b437c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b437e:	4622      	mov	r2, r4
   b4380:	463c      	mov	r4, r7
   b4382:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4384:	1b3e      	subs	r6, r7, r4
   b4386:	b2b2      	uxth	r2, r6
   b4388:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b438a:	eba8 0205 	sub.w	r2, r8, r5
   b438e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4392:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4396:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b439a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b439e:	4545      	cmp	r5, r8
   b43a0:	bfb4      	ite	lt
   b43a2:	2201      	movlt	r2, #1
   b43a4:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b43a8:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b43aa:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b43ac:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b43ae:	42bc      	cmp	r4, r7
   b43b0:	dc1c      	bgt.n	b43ec <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b43b2:	f8db 2000 	ldr.w	r2, [fp]
   b43b6:	9303      	str	r3, [sp, #12]
        if (steep) {
   b43b8:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b43ba:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b43be:	bfc7      	ittee	gt
   b43c0:	4629      	movgt	r1, r5
   b43c2:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b43c4:	462a      	movle	r2, r5
   b43c6:	4621      	movle	r1, r4
   b43c8:	4658      	mov	r0, fp
   b43ca:	47c0      	blx	r8
        }
        err -= dy;
   b43cc:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b43ce:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b43d0:	1ab6      	subs	r6, r6, r2
   b43d2:	b2b1      	uxth	r1, r6
   b43d4:	b236      	sxth	r6, r6
        if (err < 0) {
   b43d6:	2e00      	cmp	r6, #0
   b43d8:	da05      	bge.n	b43e6 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b43da:	9a02      	ldr	r2, [sp, #8]
   b43dc:	4415      	add	r5, r2
            err += dx;
   b43de:	9a00      	ldr	r2, [sp, #0]
   b43e0:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b43e2:	b22d      	sxth	r5, r5
            err += dx;
   b43e4:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b43e6:	3401      	adds	r4, #1
   b43e8:	b224      	sxth	r4, r4
   b43ea:	e7e0      	b.n	b43ae <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b43ec:	b005      	add	sp, #20
   b43ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b43f2 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b43f2:	4770      	bx	lr

000b43f4 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b43f4:	b410      	push	{r4}
    drawPixel(x, y, color);
   b43f6:	6804      	ldr	r4, [r0, #0]
   b43f8:	6924      	ldr	r4, [r4, #16]
   b43fa:	46a4      	mov	ip, r4
}
   b43fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b4400:	4760      	bx	ip

000b4402 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4402:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b4404:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b4406:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b440a:	9502      	str	r5, [sp, #8]
   b440c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b440e:	46a4      	mov	ip, r4
}
   b4410:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b4412:	4760      	bx	ip

000b4414 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4414:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b4416:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4418:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b441c:	9502      	str	r5, [sp, #8]
   b441e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b4420:	46a4      	mov	ip, r4
}
   b4422:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b4424:	4760      	bx	ip

000b4426 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4426:	b470      	push	{r4, r5, r6}
   b4428:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b442c:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b4430:	6804      	ldr	r4, [r0, #0]
   b4432:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b4436:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4438:	46a4      	mov	ip, r4
}
   b443a:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b443c:	4760      	bx	ip

000b443e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b443e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4442:	461c      	mov	r4, r3
    startWrite();
   b4444:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b4446:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b444a:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b444c:	4605      	mov	r5, r0
   b444e:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b4450:	3c01      	subs	r4, #1
   b4452:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b4454:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b4456:	b224      	sxth	r4, r4
    startWrite();
   b4458:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b445a:	682b      	ldr	r3, [r5, #0]
   b445c:	f8cd 8004 	str.w	r8, [sp, #4]
   b4460:	9400      	str	r4, [sp, #0]
   b4462:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b4464:	4628      	mov	r0, r5
   b4466:	463b      	mov	r3, r7
   b4468:	4632      	mov	r2, r6
   b446a:	4639      	mov	r1, r7
   b446c:	47a0      	blx	r4
    endWrite();
   b446e:	682b      	ldr	r3, [r5, #0]
   b4470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4472:	4628      	mov	r0, r5
}
   b4474:	b002      	add	sp, #8
   b4476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b447a:	4718      	bx	r3

000b447c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b447c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4480:	461d      	mov	r5, r3
    startWrite();
   b4482:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4484:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4488:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b448a:	4604      	mov	r4, r0
   b448c:	4617      	mov	r7, r2
   b448e:	460e      	mov	r6, r1
    startWrite();
   b4490:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b4492:	e9cd 7800 	strd	r7, r8, [sp]
   b4496:	6822      	ldr	r2, [r4, #0]
   b4498:	1e6b      	subs	r3, r5, #1
   b449a:	4433      	add	r3, r6
   b449c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b449e:	4620      	mov	r0, r4
   b44a0:	b21b      	sxth	r3, r3
   b44a2:	463a      	mov	r2, r7
   b44a4:	4631      	mov	r1, r6
   b44a6:	47a8      	blx	r5
    endWrite();
   b44a8:	6823      	ldr	r3, [r4, #0]
   b44aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b44ac:	4620      	mov	r0, r4
}
   b44ae:	b002      	add	sp, #8
   b44b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b44b4:	4718      	bx	r3

000b44b6 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b44b6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b44ba:	461e      	mov	r6, r3
    startWrite();
   b44bc:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b44be:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b44c2:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b44c4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b44c8:	460c      	mov	r4, r1
   b44ca:	4605      	mov	r5, r0
   b44cc:	4617      	mov	r7, r2
    startWrite();
   b44ce:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b44d0:	4426      	add	r6, r4
   b44d2:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b44d4:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b44d6:	da0b      	bge.n	b44f0 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b44d8:	f8cd 8000 	str.w	r8, [sp]
   b44dc:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b44e0:	4621      	mov	r1, r4
   b44e2:	464b      	mov	r3, r9
   b44e4:	463a      	mov	r2, r7
   b44e6:	4628      	mov	r0, r5
   b44e8:	3401      	adds	r4, #1
   b44ea:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b44ec:	b224      	sxth	r4, r4
   b44ee:	e7f0      	b.n	b44d2 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b44f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b44f2:	4628      	mov	r0, r5
}
   b44f4:	b002      	add	sp, #8
   b44f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b44fa:	4718      	bx	r3

000b44fc <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b44fc:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b44fe:	6802      	ldr	r2, [r0, #0]
   b4500:	9101      	str	r1, [sp, #4]
   b4502:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4506:	9100      	str	r1, [sp, #0]
   b4508:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b450a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b450e:	2200      	movs	r2, #0
   b4510:	4611      	mov	r1, r2
   b4512:	47a0      	blx	r4
}
   b4514:	b002      	add	sp, #8
   b4516:	bd10      	pop	{r4, pc}

000b4518 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4518:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b451c:	4299      	cmp	r1, r3
        uint16_t color) {
   b451e:	4616      	mov	r6, r2
   b4520:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b4524:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4528:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b452a:	4680      	mov	r8, r0
   b452c:	460d      	mov	r5, r1
   b452e:	461c      	mov	r4, r3
    if(x0 == x1){
   b4530:	d113      	bne.n	b455a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4532:	42be      	cmp	r6, r7
   b4534:	bfc8      	it	gt
   b4536:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4538:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b453c:	bfc4      	itt	gt
   b453e:	463e      	movgt	r6, r7
   b4540:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4542:	1c7b      	adds	r3, r7, #1
   b4544:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b4546:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4548:	b21b      	sxth	r3, r3
   b454a:	4632      	mov	r2, r6
   b454c:	4629      	mov	r1, r5
   b454e:	4640      	mov	r0, r8
   b4550:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b4552:	b003      	add	sp, #12
   b4554:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4558:	4760      	bx	ip
    } else if(y0 == y1){
   b455a:	42be      	cmp	r6, r7
   b455c:	d10a      	bne.n	b4574 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b455e:	4299      	cmp	r1, r3
   b4560:	bfc2      	ittt	gt
   b4562:	460b      	movgt	r3, r1
   b4564:	4625      	movgt	r5, r4
   b4566:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4568:	1c63      	adds	r3, r4, #1
   b456a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b456e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b4570:	1b5b      	subs	r3, r3, r5
   b4572:	e7e9      	b.n	b4548 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b4574:	6953      	ldr	r3, [r2, #20]
   b4576:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b4578:	e9cd 7900 	strd	r7, r9, [sp]
   b457c:	f8d8 3000 	ldr.w	r3, [r8]
   b4580:	4640      	mov	r0, r8
   b4582:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b4584:	4632      	mov	r2, r6
   b4586:	4623      	mov	r3, r4
   b4588:	4629      	mov	r1, r5
   b458a:	47b8      	blx	r7
        endWrite();
   b458c:	f8d8 3000 	ldr.w	r3, [r8]
   b4590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4592:	4640      	mov	r0, r8
}
   b4594:	b003      	add	sp, #12
   b4596:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b459a:	4718      	bx	r3

000b459c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b459c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b45a0:	461d      	mov	r5, r3
    startWrite();
   b45a2:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b45a4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b45a8:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b45aa:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b45ae:	4604      	mov	r4, r0
   b45b0:	460f      	mov	r7, r1
   b45b2:	4616      	mov	r6, r2
    startWrite();
   b45b4:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b45b6:	6823      	ldr	r3, [r4, #0]
   b45b8:	f8cd 8000 	str.w	r8, [sp]
   b45bc:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b45c0:	4632      	mov	r2, r6
   b45c2:	462b      	mov	r3, r5
   b45c4:	4639      	mov	r1, r7
   b45c6:	4620      	mov	r0, r4
   b45c8:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b45ca:	6823      	ldr	r3, [r4, #0]
   b45cc:	f8cd 8000 	str.w	r8, [sp]
   b45d0:	f109 32ff 	add.w	r2, r9, #4294967295
   b45d4:	4432      	add	r2, r6
   b45d6:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b45da:	4639      	mov	r1, r7
   b45dc:	462b      	mov	r3, r5
   b45de:	4620      	mov	r0, r4
   b45e0:	b212      	sxth	r2, r2
   b45e2:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b45e4:	6823      	ldr	r3, [r4, #0]
   b45e6:	f8cd 8000 	str.w	r8, [sp]
   b45ea:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b45ee:	4632      	mov	r2, r6
   b45f0:	464b      	mov	r3, r9
   b45f2:	4639      	mov	r1, r7
   b45f4:	4620      	mov	r0, r4
   b45f6:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b45f8:	1e6b      	subs	r3, r5, #1
   b45fa:	19d9      	adds	r1, r3, r7
   b45fc:	6823      	ldr	r3, [r4, #0]
   b45fe:	f8cd 8000 	str.w	r8, [sp]
   b4602:	6a1d      	ldr	r5, [r3, #32]
   b4604:	4620      	mov	r0, r4
   b4606:	464b      	mov	r3, r9
   b4608:	4632      	mov	r2, r6
   b460a:	b209      	sxth	r1, r1
   b460c:	47a8      	blx	r5
    endWrite();
   b460e:	6823      	ldr	r3, [r4, #0]
   b4610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4612:	4620      	mov	r0, r4
}
   b4614:	b002      	add	sp, #8
   b4616:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b461a:	4718      	bx	r3

000b461c <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b461c:	4770      	bx	lr

000b461e <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b461e:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b4622:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b4626:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4628:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b462a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b462e:	bf59      	ittee	pl
   b4630:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b4632:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b4634:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b4636:	81c3      	strhmi	r3, [r0, #14]
}
   b4638:	4770      	bx	lr
	...

000b463c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b463c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b463e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b4640:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b4642:	4a07      	ldr	r2, [pc, #28]	; (b4660 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b4644:	4d07      	ldr	r5, [pc, #28]	; (b4664 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b4646:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b4648:	2400      	movs	r4, #0
    _width    = WIDTH;
   b464a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b464c:	f04f 31ff 	mov.w	r1, #4294967295
   b4650:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b4654:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b4656:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b4658:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b465a:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b465c:	6204      	str	r4, [r0, #32]
}
   b465e:	bd30      	pop	{r4, r5, pc}
   b4660:	01000101 	.word	0x01000101
   b4664:	000ba9a8 	.word	0x000ba9a8

000b4668 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b466c:	b089      	sub	sp, #36	; 0x24
   b466e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b4672:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4674:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b4678:	9304      	str	r3, [sp, #16]
   b467a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b467e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4680:	9305      	str	r3, [sp, #20]
   b4682:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b4686:	4604      	mov	r4, r0
    startWrite();
   b4688:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b468a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b468e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b4692:	bf48      	it	mi
   b4694:	f108 020e 	addmi.w	r2, r8, #14
   b4698:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b469c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b469e:	4635      	mov	r5, r6
   b46a0:	9b03      	ldr	r3, [sp, #12]
   b46a2:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b46a4:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b46a8:	189a      	adds	r2, r3, r2
   b46aa:	9b05      	ldr	r3, [sp, #20]
   b46ac:	428b      	cmp	r3, r1
   b46ae:	b212      	sxth	r2, r2
   b46b0:	dd27      	ble.n	b4702 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b46b2:	9b04      	ldr	r3, [sp, #16]
   b46b4:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b46b6:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b46ba:	9306      	str	r3, [sp, #24]
   b46bc:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b46c0:	4580      	cmp	r8, r0
   b46c2:	fa1f f189 	uxth.w	r1, r9
   b46c6:	dd17      	ble.n	b46f8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b46c8:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b46ca:	bf05      	ittet	eq
   b46cc:	9b06      	ldreq	r3, [sp, #24]
   b46ce:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b46d0:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b46d2:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b46d4:	bf18      	it	ne
   b46d6:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b46d8:	062b      	lsls	r3, r5, #24
   b46da:	d50a      	bpl.n	b46f2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b46dc:	9b02      	ldr	r3, [sp, #8]
   b46de:	6820      	ldr	r0, [r4, #0]
   b46e0:	9207      	str	r2, [sp, #28]
   b46e2:	4419      	add	r1, r3
   b46e4:	6983      	ldr	r3, [r0, #24]
   b46e6:	b209      	sxth	r1, r1
   b46e8:	461f      	mov	r7, r3
   b46ea:	4620      	mov	r0, r4
   b46ec:	4653      	mov	r3, sl
   b46ee:	47b8      	blx	r7
   b46f0:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b46f2:	f109 0901 	add.w	r9, r9, #1
   b46f6:	e7e1      	b.n	b46bc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b46f8:	9b01      	ldr	r3, [sp, #4]
   b46fa:	3301      	adds	r3, #1
   b46fc:	9301      	str	r3, [sp, #4]
   b46fe:	445e      	add	r6, fp
   b4700:	e7ce      	b.n	b46a0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b4702:	6823      	ldr	r3, [r4, #0]
   b4704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4706:	4620      	mov	r0, r4
}
   b4708:	b009      	add	sp, #36	; 0x24
   b470a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b470e:	4718      	bx	r3

000b4710 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4714:	ed2d 8b02 	vpush	{d8}
   b4718:	b091      	sub	sp, #68	; 0x44
   b471a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b471c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b471e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b4722:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b4726:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b472a:	9103      	str	r1, [sp, #12]
   b472c:	461f      	mov	r7, r3
   b472e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b4732:	9304      	str	r3, [sp, #16]
   b4734:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b4736:	2a00      	cmp	r2, #0
   b4738:	f040 80c5 	bne.w	b48c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b473c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4740:	428b      	cmp	r3, r1
   b4742:	f340 814c 	ble.w	b49de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b4746:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b474a:	42b3      	cmp	r3, r6
   b474c:	f340 8147 	ble.w	b49de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4750:	2306      	movs	r3, #6
   b4752:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b4756:	2b00      	cmp	r3, #0
   b4758:	f340 8141 	ble.w	b49de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b475c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4760:	2b00      	cmp	r3, #0
   b4762:	f340 813c 	ble.w	b49de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b4766:	7f03      	ldrb	r3, [r0, #28]
   b4768:	b91b      	cbnz	r3, b4772 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b476a:	2faf      	cmp	r7, #175	; 0xaf
   b476c:	bf84      	itt	hi
   b476e:	3701      	addhi	r7, #1
   b4770:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b4772:	f8db 3000 	ldr.w	r3, [fp]
   b4776:	4658      	mov	r0, fp
   b4778:	695b      	ldr	r3, [r3, #20]
   b477a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b477c:	2205      	movs	r2, #5
   b477e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4780:	2200      	movs	r2, #0
   b4782:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4784:	4a98      	ldr	r2, [pc, #608]	; (b49e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b4786:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b478a:	18d3      	adds	r3, r2, r3
   b478c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b478e:	b2b3      	uxth	r3, r6
   b4790:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4792:	9a05      	ldr	r2, [sp, #20]
   b4794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4796:	5c9b      	ldrb	r3, [r3, r2]
   b4798:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b479a:	b2ab      	uxth	r3, r5
   b479c:	930b      	str	r3, [sp, #44]	; 0x2c
   b479e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b47a2:	9308      	str	r3, [sp, #32]
   b47a4:	9b03      	ldr	r3, [sp, #12]
   b47a6:	fb02 f905 	mul.w	r9, r2, r5
   b47aa:	fa19 f983 	uxtah	r9, r9, r3
   b47ae:	fa0f f389 	sxth.w	r3, r9
   b47b2:	ee08 3a10 	vmov	s16, r3
   b47b6:	2308      	movs	r3, #8
   b47b8:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b47ba:	9b03      	ldr	r3, [sp, #12]
   b47bc:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b47c0:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b47c4:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b47c8:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b47ca:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b47ce:	07d2      	lsls	r2, r2, #31
   b47d0:	d552      	bpl.n	b4878 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b47d2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b47d4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b47d8:	d13e      	bne.n	b4858 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b47da:	2c01      	cmp	r4, #1
   b47dc:	d13c      	bne.n	b4858 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b47de:	699b      	ldr	r3, [r3, #24]
   b47e0:	9906      	ldr	r1, [sp, #24]
   b47e2:	461f      	mov	r7, r3
   b47e4:	9b04      	ldr	r3, [sp, #16]
   b47e6:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b47e8:	b212      	sxth	r2, r2
   b47ea:	4651      	mov	r1, sl
   b47ec:	4658      	mov	r0, fp
   b47ee:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b47f0:	f109 0301 	add.w	r3, r9, #1
   b47f4:	fa4f f983 	sxtb.w	r9, r3
   b47f8:	9b07      	ldr	r3, [sp, #28]
   b47fa:	085b      	lsrs	r3, r3, #1
   b47fc:	9307      	str	r3, [sp, #28]
   b47fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4800:	3b01      	subs	r3, #1
   b4802:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4806:	930a      	str	r3, [sp, #40]	; 0x28
   b4808:	d1de      	bne.n	b47c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b480a:	9f05      	ldr	r7, [sp, #20]
   b480c:	3701      	adds	r7, #1
   b480e:	b27b      	sxtb	r3, r7
   b4810:	9305      	str	r3, [sp, #20]
   b4812:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4814:	3b01      	subs	r3, #1
   b4816:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b481a:	9309      	str	r3, [sp, #36]	; 0x24
   b481c:	d1b9      	bne.n	b4792 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b481e:	9b04      	ldr	r3, [sp, #16]
   b4820:	4543      	cmp	r3, r8
   b4822:	d00f      	beq.n	b4844 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b4824:	2d01      	cmp	r5, #1
   b4826:	f8db 3000 	ldr.w	r3, [fp]
   b482a:	d13b      	bne.n	b48a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b482c:	2c01      	cmp	r4, #1
   b482e:	d139      	bne.n	b48a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4830:	9908      	ldr	r1, [sp, #32]
   b4832:	f8cd 8000 	str.w	r8, [sp]
   b4836:	3105      	adds	r1, #5
   b4838:	6a1c      	ldr	r4, [r3, #32]
   b483a:	4632      	mov	r2, r6
   b483c:	2308      	movs	r3, #8
   b483e:	b209      	sxth	r1, r1
   b4840:	4658      	mov	r0, fp
   b4842:	47a0      	blx	r4
        endWrite();
   b4844:	f8db 3000 	ldr.w	r3, [fp]
   b4848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b484a:	4658      	mov	r0, fp
}
   b484c:	b011      	add	sp, #68	; 0x44
   b484e:	ecbd 8b02 	vpop	{d8}
   b4852:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b4856:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b4858:	9906      	ldr	r1, [sp, #24]
   b485a:	fb14 f202 	smulbb	r2, r4, r2
   b485e:	440a      	add	r2, r1
   b4860:	9904      	ldr	r1, [sp, #16]
   b4862:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4864:	9400      	str	r4, [sp, #0]
   b4866:	69db      	ldr	r3, [r3, #28]
   b4868:	ee18 1a10 	vmov	r1, s16
   b486c:	461f      	mov	r7, r3
   b486e:	b212      	sxth	r2, r2
   b4870:	462b      	mov	r3, r5
   b4872:	4658      	mov	r0, fp
   b4874:	47b8      	blx	r7
   b4876:	e7bb      	b.n	b47f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b4878:	9a04      	ldr	r2, [sp, #16]
   b487a:	4542      	cmp	r2, r8
   b487c:	d0b8      	beq.n	b47f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b487e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4880:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4884:	d107      	bne.n	b4896 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b4886:	2c01      	cmp	r4, #1
   b4888:	d105      	bne.n	b4896 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b488a:	699b      	ldr	r3, [r3, #24]
   b488c:	9906      	ldr	r1, [sp, #24]
   b488e:	461f      	mov	r7, r3
   b4890:	440a      	add	r2, r1
   b4892:	4643      	mov	r3, r8
   b4894:	e7a8      	b.n	b47e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4896:	9906      	ldr	r1, [sp, #24]
   b4898:	f8cd 8004 	str.w	r8, [sp, #4]
   b489c:	fb14 f202 	smulbb	r2, r4, r2
   b48a0:	440a      	add	r2, r1
   b48a2:	e7df      	b.n	b4864 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b48a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b48a6:	f8cd 8004 	str.w	r8, [sp, #4]
   b48aa:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b48ae:	9a08      	ldr	r2, [sp, #32]
   b48b0:	00e4      	lsls	r4, r4, #3
   b48b2:	440a      	add	r2, r1
   b48b4:	4611      	mov	r1, r2
   b48b6:	9400      	str	r4, [sp, #0]
   b48b8:	69dc      	ldr	r4, [r3, #28]
   b48ba:	4632      	mov	r2, r6
   b48bc:	462b      	mov	r3, r5
   b48be:	b209      	sxth	r1, r1
   b48c0:	4658      	mov	r0, fp
   b48c2:	47a0      	blx	r4
        endWrite();
   b48c4:	e7be      	b.n	b4844 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b48c6:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b48c8:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b48ca:	6812      	ldr	r2, [r2, #0]
   b48cc:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b48ce:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b48d0:	b2ff      	uxtb	r7, r7
   b48d2:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b48d6:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b48da:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b48dc:	789a      	ldrb	r2, [r3, #2]
   b48de:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b48e0:	78da      	ldrb	r2, [r3, #3]
   b48e2:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b48e4:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b48e6:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b48ea:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b48ee:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b48f0:	d801      	bhi.n	b48f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b48f2:	2c01      	cmp	r4, #1
   b48f4:	d957      	bls.n	b49a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b48f6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b48fa:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b48fc:	fa0f f38a 	sxth.w	r3, sl
   b4900:	9307      	str	r3, [sp, #28]
        startWrite();
   b4902:	f8db 3000 	ldr.w	r3, [fp]
   b4906:	4658      	mov	r0, fp
   b4908:	695b      	ldr	r3, [r3, #20]
   b490a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b490c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b490e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4912:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4914:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4918:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b491a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b491c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b491e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4920:	429f      	cmp	r7, r3
   b4922:	d28f      	bcs.n	b4844 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4924:	9b07      	ldr	r3, [sp, #28]
   b4926:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b4928:	443b      	add	r3, r7
   b492a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b492e:	2200      	movs	r2, #0
   b4930:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4932:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4934:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4936:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b493a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b493e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4942:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b4944:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4946:	9905      	ldr	r1, [sp, #20]
   b4948:	4291      	cmp	r1, r2
   b494a:	d241      	bcs.n	b49d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b494c:	1c5a      	adds	r2, r3, #1
   b494e:	b2d2      	uxtb	r2, r2
   b4950:	075b      	lsls	r3, r3, #29
   b4952:	920d      	str	r2, [sp, #52]	; 0x34
   b4954:	d107      	bne.n	b4966 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b4956:	9b06      	ldr	r3, [sp, #24]
   b4958:	9906      	ldr	r1, [sp, #24]
   b495a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b495c:	3301      	adds	r3, #1
   b495e:	b29b      	uxth	r3, r3
   b4960:	f812 9001 	ldrb.w	r9, [r2, r1]
   b4964:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b4966:	f019 0f80 	tst.w	r9, #128	; 0x80
   b496a:	d012      	beq.n	b4992 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b496c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b496e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4972:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b4976:	d11a      	bne.n	b49ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b4978:	2c01      	cmp	r4, #1
   b497a:	d118      	bne.n	b49ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b497c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b497e:	699b      	ldr	r3, [r3, #24]
   b4980:	4411      	add	r1, r2
   b4982:	9a05      	ldr	r2, [sp, #20]
   b4984:	4411      	add	r1, r2
   b4986:	461e      	mov	r6, r3
   b4988:	4652      	mov	r2, sl
   b498a:	9b04      	ldr	r3, [sp, #16]
   b498c:	b209      	sxth	r1, r1
   b498e:	4658      	mov	r0, fp
   b4990:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b4992:	9e05      	ldr	r6, [sp, #20]
   b4994:	3601      	adds	r6, #1
   b4996:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b4998:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b499c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b499e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b49a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b49a4:	e7ce      	b.n	b4944 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b49a6:	2300      	movs	r3, #0
   b49a8:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b49ac:	e7a9      	b.n	b4902 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b49ae:	9805      	ldr	r0, [sp, #20]
   b49b0:	9a08      	ldr	r2, [sp, #32]
   b49b2:	4402      	add	r2, r0
   b49b4:	fb02 1105 	mla	r1, r2, r5, r1
   b49b8:	9a04      	ldr	r2, [sp, #16]
   b49ba:	e9cd 4200 	strd	r4, r2, [sp]
   b49be:	69db      	ldr	r3, [r3, #28]
   b49c0:	ee18 2a10 	vmov	r2, s16
   b49c4:	461e      	mov	r6, r3
   b49c6:	b209      	sxth	r1, r1
   b49c8:	462b      	mov	r3, r5
   b49ca:	4658      	mov	r0, fp
   b49cc:	47b0      	blx	r6
   b49ce:	e7e0      	b.n	b4992 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b49d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b49d2:	3701      	adds	r7, #1
   b49d4:	4498      	add	r8, r3
   b49d6:	fa5f f888 	uxtb.w	r8, r8
   b49da:	b2ff      	uxtb	r7, r7
   b49dc:	e79f      	b.n	b491e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b49de:	b011      	add	sp, #68	; 0x44
   b49e0:	ecbd 8b02 	vpop	{d8}
   b49e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b49e8:	000ba49e 	.word	0x000ba49e

000b49ec <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b49ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b49ee:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b49f0:	b085      	sub	sp, #20
   b49f2:	4604      	mov	r4, r0
   b49f4:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b49f6:	2a00      	cmp	r2, #0
   b49f8:	d134      	bne.n	b4a64 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b49fa:	290a      	cmp	r1, #10
   b49fc:	d108      	bne.n	b4a10 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b49fe:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b4a00:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4a02:	7e42      	ldrb	r2, [r0, #25]
   b4a04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b4a08:	8263      	strh	r3, [r4, #18]
}
   b4a0a:	2001      	movs	r0, #1
   b4a0c:	b005      	add	sp, #20
   b4a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b4a10:	290d      	cmp	r1, #13
   b4a12:	d0fa      	beq.n	b4a0a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4a14:	7ee1      	ldrb	r1, [r4, #27]
   b4a16:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4a18:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4a1a:	b171      	cbz	r1, b4a3a <_ZN12Adafruit_GFX5writeEh+0x4e>
   b4a1c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b4a20:	2106      	movs	r1, #6
   b4a22:	fb11 6100 	smlabb	r1, r1, r0, r6
   b4a26:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b4a2a:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b4a2c:	bfc1      	itttt	gt
   b4a2e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b4a32:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b4a34:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b4a38:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4a3a:	8ae2      	ldrh	r2, [r4, #22]
   b4a3c:	9201      	str	r2, [sp, #4]
   b4a3e:	8aa2      	ldrh	r2, [r4, #20]
   b4a40:	9200      	str	r2, [sp, #0]
   b4a42:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b4a46:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4a4a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4a4e:	4620      	mov	r0, r4
   b4a50:	f7ff fe5e 	bl	b4710 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b4a54:	7e23      	ldrb	r3, [r4, #24]
   b4a56:	8a22      	ldrh	r2, [r4, #16]
   b4a58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4a5c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4a60:	8223      	strh	r3, [r4, #16]
   b4a62:	e7d2      	b.n	b4a0a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b4a64:	290a      	cmp	r1, #10
   b4a66:	d107      	bne.n	b4a78 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b4a68:	2300      	movs	r3, #0
   b4a6a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b4a6c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4a6e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b4a70:	8a43      	ldrh	r3, [r0, #18]
   b4a72:	fb01 3302 	mla	r3, r1, r2, r3
   b4a76:	e7c7      	b.n	b4a08 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b4a78:	290d      	cmp	r1, #13
   b4a7a:	d0c6      	beq.n	b4a0a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b4a7c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b4a7e:	42a9      	cmp	r1, r5
   b4a80:	d3c3      	bcc.n	b4a0a <_ZN12Adafruit_GFX5writeEh+0x1e>
   b4a82:	7a51      	ldrb	r1, [r2, #9]
   b4a84:	4299      	cmp	r1, r3
   b4a86:	d3c0      	bcc.n	b4a0a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b4a88:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b4a8a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b4a8c:	b2ed      	uxtb	r5, r5
   b4a8e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b4a92:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b4a94:	b328      	cbz	r0, b4ae2 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b4a96:	78e9      	ldrb	r1, [r5, #3]
   b4a98:	b319      	cbz	r1, b4ae2 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4a9a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4a9c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4a9e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4aa0:	b191      	cbz	r1, b4ac8 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b4aa2:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b4aa6:	4408      	add	r0, r1
   b4aa8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4aac:	fb06 1100 	mla	r1, r6, r0, r1
   b4ab0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b4ab4:	4281      	cmp	r1, r0
   b4ab6:	dd07      	ble.n	b4ac8 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b4ab8:	2000      	movs	r0, #0
   b4aba:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4abc:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4ac0:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b4ac2:	fb02 1207 	mla	r2, r2, r7, r1
   b4ac6:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4ac8:	8ae2      	ldrh	r2, [r4, #22]
   b4aca:	9201      	str	r2, [sp, #4]
   b4acc:	8aa2      	ldrh	r2, [r4, #20]
   b4ace:	9200      	str	r2, [sp, #0]
   b4ad0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b4ad4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4ad8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4adc:	4620      	mov	r0, r4
   b4ade:	f7ff fe17 	bl	b4710 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4ae2:	7929      	ldrb	r1, [r5, #4]
   b4ae4:	7e22      	ldrb	r2, [r4, #24]
   b4ae6:	8a23      	ldrh	r3, [r4, #16]
   b4ae8:	fb01 3302 	mla	r3, r1, r2, r3
   b4aec:	e7b8      	b.n	b4a60 <_ZN12Adafruit_GFX5writeEh+0x74>

000b4aee <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b4aee:	2901      	cmp	r1, #1
   b4af0:	bf38      	it	cc
   b4af2:	2101      	movcc	r1, #1
   b4af4:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b4af6:	7641      	strb	r1, [r0, #25]
}
   b4af8:	4770      	bx	lr
	...

000b4afc <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b4afc:	b510      	push	{r4, lr}
   b4afe:	4b06      	ldr	r3, [pc, #24]	; (b4b18 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b4b00:	6003      	str	r3, [r0, #0]
   b4b02:	4604      	mov	r4, r0
	if (mutex) {
   b4b04:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b4b06:	b108      	cbz	r0, b4b0c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b4b08:	f001 f9e8 	bl	b5edc <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b4b0c:	4620      	mov	r0, r4
   b4b0e:	f000 fd13 	bl	b5538 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b4b12:	4620      	mov	r0, r4
   b4b14:	bd10      	pop	{r4, pc}
   b4b16:	bf00      	nop
   b4b18:	000baa00 	.word	0x000baa00

000b4b1c <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b4b1c:	b510      	push	{r4, lr}
   b4b1e:	4604      	mov	r4, r0
}
   b4b20:	f7ff ffec 	bl	b4afc <_ZN16OledWingAdafruitD1Ev>
   b4b24:	4620      	mov	r0, r4
   b4b26:	2170      	movs	r1, #112	; 0x70
   b4b28:	f7ff fabb 	bl	b40a2 <_ZdlPvj>
   b4b2c:	4620      	mov	r0, r4
   b4b2e:	bd10      	pop	{r4, pc}

000b4b30 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b4b30:	b530      	push	{r4, r5, lr}
   b4b32:	b085      	sub	sp, #20
   b4b34:	4604      	mov	r4, r0
   b4b36:	460d      	mov	r5, r1
   b4b38:	f002 fe60 	bl	b77fc <_Z19__fetch_global_Wirev>
   b4b3c:	4a10      	ldr	r2, [pc, #64]	; (b4b80 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b4b3e:	4911      	ldr	r1, [pc, #68]	; (b4b84 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b4b40:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b4b44:	f04f 32ff 	mov.w	r2, #4294967295
   b4b48:	2180      	movs	r1, #128	; 0x80
   b4b4a:	4603      	mov	r3, r0
   b4b4c:	9200      	str	r2, [sp, #0]
   b4b4e:	4620      	mov	r0, r4
   b4b50:	2220      	movs	r2, #32
   b4b52:	f000 fd69 	bl	b5628 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b4b56:	4b0c      	ldr	r3, [pc, #48]	; (b4b88 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b4b58:	6023      	str	r3, [r4, #0]
   b4b5a:	2300      	movs	r3, #0
   b4b5c:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b4b60:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b4b64:	f000 f854 	bl	b4c10 <_ZN8DebounceC1Ev>
   b4b68:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4b6c:	f000 f850 	bl	b4c10 <_ZN8DebounceC1Ev>
   b4b70:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b4b74:	f000 f84c 	bl	b4c10 <_ZN8DebounceC1Ev>
}
   b4b78:	4620      	mov	r0, r4
   b4b7a:	b005      	add	sp, #20
   b4b7c:	bd30      	pop	{r4, r5, pc}
   b4b7e:	bf00      	nop
   b4b80:	00061a80 	.word	0x00061a80
   b4b84:	000186a0 	.word	0x000186a0
   b4b88:	000baa00 	.word	0x000baa00

000b4b8c <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b4b8c:	b513      	push	{r0, r1, r4, lr}
   b4b8e:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b4b90:	3050      	adds	r0, #80	; 0x50
   b4b92:	f001 f99b 	bl	b5ecc <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b4b96:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4b98:	07d9      	lsls	r1, r3, #31
   b4b9a:	d505      	bpl.n	b4ba8 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b4b9c:	2202      	movs	r2, #2
   b4b9e:	2104      	movs	r1, #4
   b4ba0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b4ba4:	f000 f848 	bl	b4c38 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b4ba8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4baa:	079a      	lsls	r2, r3, #30
   b4bac:	d505      	bpl.n	b4bba <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b4bae:	2200      	movs	r2, #0
   b4bb0:	2103      	movs	r1, #3
   b4bb2:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4bb6:	f000 f83f 	bl	b4c38 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b4bba:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4bbc:	075b      	lsls	r3, r3, #29
   b4bbe:	d505      	bpl.n	b4bcc <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b4bc0:	2202      	movs	r2, #2
   b4bc2:	4611      	mov	r1, r2
   b4bc4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b4bc8:	f000 f836 	bl	b4c38 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4bcc:	2301      	movs	r3, #1
   b4bce:	9300      	str	r3, [sp, #0]
   b4bd0:	223c      	movs	r2, #60	; 0x3c
   b4bd2:	2102      	movs	r1, #2
   b4bd4:	4620      	mov	r0, r4
   b4bd6:	f000 fe2f 	bl	b5838 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b4bda:	b002      	add	sp, #8
   b4bdc:	bd10      	pop	{r4, pc}

000b4bde <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b4bde:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b4be0:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b4be2:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b4be4:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b4be6:	d502      	bpl.n	b4bee <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b4be8:	3058      	adds	r0, #88	; 0x58
   b4bea:	f000 f832 	bl	b4c52 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b4bee:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4bf0:	079a      	lsls	r2, r3, #30
   b4bf2:	d503      	bpl.n	b4bfc <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b4bf4:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4bf8:	f000 f82b 	bl	b4c52 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b4bfc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4bfe:	075b      	lsls	r3, r3, #29
   b4c00:	d505      	bpl.n	b4c0e <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b4c02:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b4c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b4c0a:	f000 b822 	b.w	b4c52 <_ZN8Debounce6updateEv>
}
   b4c0e:	bd10      	pop	{r4, pc}

000b4c10 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b4c10:	2100      	movs	r1, #0
   b4c12:	220a      	movs	r2, #10
   b4c14:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b4c18:	4770      	bx	lr

000b4c1a <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b4c1a:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b4c1c:	b510      	push	{r4, lr}
   b4c1e:	4604      	mov	r4, r0
    this->pin = pin;
   b4c20:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b4c22:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b4c24:	b288      	uxth	r0, r1
   b4c26:	f002 fd7f 	bl	b7728 <digitalRead>
   b4c2a:	b108      	cbz	r0, b4c30 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b4c2c:	2303      	movs	r3, #3
   b4c2e:	71a3      	strb	r3, [r4, #6]
   b4c30:	f001 f944 	bl	b5ebc <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b4c34:	6020      	str	r0, [r4, #0]
#endif
}
   b4c36:	bd10      	pop	{r4, pc}

000b4c38 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b4c38:	b538      	push	{r3, r4, r5, lr}
   b4c3a:	460c      	mov	r4, r1
   b4c3c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b4c3e:	4611      	mov	r1, r2
   b4c40:	b2a0      	uxth	r0, r4
   b4c42:	f002 fd47 	bl	b76d4 <pinMode>
  
  this->attach(pin);
   b4c46:	4621      	mov	r1, r4
   b4c48:	4628      	mov	r0, r5
}
   b4c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b4c4e:	f7ff bfe4 	b.w	b4c1a <_ZN8Debounce6attachEi>

000b4c52 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b4c52:	b538      	push	{r3, r4, r5, lr}
   b4c54:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b4c56:	79c0      	ldrb	r0, [r0, #7]
   b4c58:	f002 fd66 	bl	b7728 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b4c5c:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b4c5e:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b4c60:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b4c64:	bf18      	it	ne
   b4c66:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b4c68:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b4c6c:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b4c6e:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b4c70:	d00a      	beq.n	b4c88 <_ZN8Debounce6updateEv+0x36>
   b4c72:	f001 f923 	bl	b5ebc <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b4c76:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b4c78:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b4c7a:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b4c7e:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b4c80:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b4c82:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b4c86:	bd38      	pop	{r3, r4, r5, pc}
   b4c88:	f001 f918 	bl	b5ebc <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b4c8c:	6823      	ldr	r3, [r4, #0]
   b4c8e:	1ac0      	subs	r0, r0, r3
   b4c90:	88a3      	ldrh	r3, [r4, #4]
   b4c92:	4298      	cmp	r0, r3
   b4c94:	d3f4      	bcc.n	b4c80 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b4c96:	79a3      	ldrb	r3, [r4, #6]
   b4c98:	f003 0301 	and.w	r3, r3, #1
   b4c9c:	42ab      	cmp	r3, r5
   b4c9e:	d0ef      	beq.n	b4c80 <_ZN8Debounce6updateEv+0x2e>
   b4ca0:	f001 f90c 	bl	b5ebc <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b4ca4:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b4ca6:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b4ca8:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b4cac:	f043 0308 	orr.w	r3, r3, #8
   b4cb0:	e7e5      	b.n	b4c7e <_ZN8Debounce6updateEv+0x2c>

000b4cb2 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b4cb2:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b4cb6:	b510      	push	{r4, lr}
   b4cb8:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b4cba:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b4cbc:	b113      	cbz	r3, b4cc4 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b4cbe:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b4cc0:	f001 f914 	bl	b5eec <os_mutex_lock>
#endif
#endif
#endif
        }
   b4cc4:	4620      	mov	r0, r4
   b4cc6:	bd10      	pop	{r4, pc}

000b4cc8 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b4cc8:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b4cca:	6803      	ldr	r3, [r0, #0]
   b4ccc:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b4cd0:	4604      	mov	r4, r0
            if (mqtt->thread)
   b4cd2:	b112      	cbz	r2, b4cda <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b4cd4:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b4cd6:	f001 f911 	bl	b5efc <os_mutex_unlock>
#endif
#endif
#endif
        }
   b4cda:	4620      	mov	r0, r4
   b4cdc:	bd10      	pop	{r4, pc}

000b4cde <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b4cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4ce0:	461f      	mov	r7, r3
   b4ce2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b4ce6:	4604      	mov	r4, r0
   b4ce8:	460d      	mov	r5, r1
   b4cea:	4616      	mov	r6, r2
    if (thread) {
   b4cec:	b12b      	cbz	r3, b4cfa <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b4cee:	2301      	movs	r3, #1
   b4cf0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b4cf4:	3058      	adds	r0, #88	; 0x58
   b4cf6:	f001 f8e9 	bl	b5ecc <os_mutex_create>
    }
    this->callback = callback;
   b4cfa:	9b08      	ldr	r3, [sp, #32]
   b4cfc:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b4cfe:	2300      	movs	r3, #0
   b4d00:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b4d02:	b106      	cbz	r6, b4d06 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b4d04:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b4d06:	b125      	cbz	r5, b4d12 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b4d08:	4629      	mov	r1, r5
   b4d0a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4d0e:	f001 fca2 	bl	b6656 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b4d12:	9b06      	ldr	r3, [sp, #24]
   b4d14:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4d16:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b4d18:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b4d1a:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4d1e:	2bff      	cmp	r3, #255	; 0xff
   b4d20:	bfb8      	it	lt
   b4d22:	23ff      	movlt	r3, #255	; 0xff
   b4d24:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b4d28:	b108      	cbz	r0, b4d2e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b4d2a:	f7ff f9b8 	bl	b409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b4d2e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b4d32:	f7ff f9b2 	bl	b409a <_Znaj>
   b4d36:	61e0      	str	r0, [r4, #28]
}
   b4d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b4d3c <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b4d3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4d40:	4604      	mov	r4, r0
            bool thread) {
   b4d42:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b4d44:	4617      	mov	r7, r2
   b4d46:	4698      	mov	r8, r3
   b4d48:	460e      	mov	r6, r1
            bool thread) {
   b4d4a:	f002 fb81 	bl	b7450 <_ZN9TCPClientC1Ev>
   b4d4e:	490d      	ldr	r1, [pc, #52]	; (b4d84 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b4d50:	61e5      	str	r5, [r4, #28]
   b4d52:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4d56:	f001 fc6a 	bl	b662e <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b4d5a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b4d5e:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b4d60:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b4d64:	22ff      	movs	r2, #255	; 0xff
   b4d66:	230f      	movs	r3, #15
   b4d68:	e9cd 3200 	strd	r3, r2, [sp]
   b4d6c:	4620      	mov	r0, r4
            bool thread) {
   b4d6e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b4d72:	463b      	mov	r3, r7
   b4d74:	462a      	mov	r2, r5
   b4d76:	4631      	mov	r1, r6
   b4d78:	f7ff ffb1 	bl	b4cde <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b4d7c:	4620      	mov	r0, r4
   b4d7e:	b004      	add	sp, #16
   b4d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4d84:	000ba44a 	.word	0x000ba44a

000b4d88 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b4d88:	b510      	push	{r4, lr}
   b4d8a:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b4d8c:	4620      	mov	r0, r4
   b4d8e:	f002 fabb 	bl	b7308 <_ZN9TCPClient9availableEv>
   b4d92:	2800      	cmp	r0, #0
   b4d94:	d0fa      	beq.n	b4d8c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b4d96:	4620      	mov	r0, r4
   b4d98:	f002 f8c4 	bl	b6f24 <_ZN9TCPClient4readEv>
}
   b4d9c:	b2c0      	uxtb	r0, r0
   b4d9e:	bd10      	pop	{r4, pc}

000b4da0 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b4da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4da4:	4605      	mov	r5, r0
   b4da6:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b4da8:	f7ff ffee 	bl	b4d88 <_ZN4MQTT8readByteEv>
   b4dac:	69eb      	ldr	r3, [r5, #28]
   b4dae:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b4db0:	69eb      	ldr	r3, [r5, #28]
   b4db2:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b4db6:	f04f 0901 	mov.w	r9, #1
   b4dba:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b4dbe:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b4dc0:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b4dc2:	4628      	mov	r0, r5
   b4dc4:	f7ff ffe0 	bl	b4d88 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b4dc8:	4626      	mov	r6, r4
   b4dca:	69eb      	ldr	r3, [r5, #28]
   b4dcc:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b4dce:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b4dd2:	fb13 f309 	smulbb	r3, r3, r9
   b4dd6:	441f      	add	r7, r3
        buffer[len++] = digit;
   b4dd8:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b4dda:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b4ddc:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b4dde:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b4de0:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b4de4:	d4ed      	bmi.n	b4dc2 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b4de6:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b4de8:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b4dec:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b4df0:	d11e      	bne.n	b4e30 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b4df2:	4628      	mov	r0, r5
   b4df4:	f7ff ffc8 	bl	b4d88 <_ZN4MQTT8readByteEv>
   b4df8:	69eb      	ldr	r3, [r5, #28]
   b4dfa:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b4dfc:	4628      	mov	r0, r5
   b4dfe:	f7ff ffc3 	bl	b4d88 <_ZN4MQTT8readByteEv>
   b4e02:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b4e04:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b4e06:	b2b6      	uxth	r6, r6
   b4e08:	69eb      	ldr	r3, [r5, #28]
   b4e0a:	b2a4      	uxth	r4, r4
   b4e0c:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b4e0e:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b4e10:	b2b6      	uxth	r6, r6
   b4e12:	42be      	cmp	r6, r7
   b4e14:	d20e      	bcs.n	b4e34 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b4e16:	4628      	mov	r0, r5
   b4e18:	f7ff ffb6 	bl	b4d88 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b4e1c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b4e20:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b4e22:	bf84      	itt	hi
   b4e24:	69eb      	ldrhi	r3, [r5, #28]
   b4e26:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b4e28:	3401      	adds	r4, #1
   b4e2a:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b4e2c:	3601      	adds	r6, #1
   b4e2e:	e7ef      	b.n	b4e10 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b4e30:	2600      	movs	r6, #0
   b4e32:	e7ed      	b.n	b4e10 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b4e34:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b4e38:	42a3      	cmp	r3, r4
   b4e3a:	bf2c      	ite	cs
   b4e3c:	4620      	movcs	r0, r4
   b4e3e:	2000      	movcc	r0, #0
   b4e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b4e44 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4e44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4e48:	4615      	mov	r5, r2
   b4e4a:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b4e4c:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4e4e:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b4e50:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b4e52:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b4e54:	a802      	add	r0, sp, #8
        digit = len % 128;
   b4e56:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b4e5a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b4e5e:	f103 0401 	add.w	r4, r3, #1
   b4e62:	4403      	add	r3, r0
            digit |= 0x80;
   b4e64:	bf88      	it	hi
   b4e66:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b4e6a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b4e6e:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b4e72:	b2e4      	uxtb	r4, r4
   b4e74:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b4e78:	d81e      	bhi.n	b4eb8 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b4e7a:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b4e7e:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b4e82:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b4e84:	4622      	mov	r2, r4
   b4e86:	a901      	add	r1, sp, #4
   b4e88:	4428      	add	r0, r5
    buf[4-llen] = header;
   b4e8a:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b4e8e:	f003 fb18 	bl	b84c2 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b4e92:	1c72      	adds	r2, r6, #1
   b4e94:	4422      	add	r2, r4
   b4e96:	4641      	mov	r1, r8
   b4e98:	4638      	mov	r0, r7
   b4e9a:	f002 f82e 	bl	b6efa <_ZN9TCPClient5writeEPKhj>
   b4e9e:	4605      	mov	r5, r0
   b4ea0:	f001 f80c 	bl	b5ebc <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b4ea4:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b4ea6:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b4ea8:	4432      	add	r2, r6
   b4eaa:	b2a8      	uxth	r0, r5
}
   b4eac:	1a13      	subs	r3, r2, r0
   b4eae:	4258      	negs	r0, r3
   b4eb0:	4158      	adcs	r0, r3
   b4eb2:	b002      	add	sp, #8
   b4eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b4eb8:	4623      	mov	r3, r4
   b4eba:	e7ca      	b.n	b4e52 <_ZN4MQTT5writeEhPht+0xe>

000b4ebc <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b4ebc:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b4ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4ec0:	4605      	mov	r5, r0
    pos += 2;
   b4ec2:	b298      	uxth	r0, r3
   b4ec4:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b4ec6:	5cce      	ldrb	r6, [r1, r3]
   b4ec8:	b29c      	uxth	r4, r3
   b4eca:	b156      	cbz	r6, b4ee2 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b4ecc:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b4ed0:	4584      	cmp	ip, r0
   b4ed2:	f103 0701 	add.w	r7, r3, #1
   b4ed6:	d904      	bls.n	b4ee2 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b4ed8:	1c44      	adds	r4, r0, #1
   b4eda:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b4edc:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b4ede:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b4ee0:	e7f1      	b.n	b4ec6 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b4ee2:	b299      	uxth	r1, r3
   b4ee4:	1a41      	subs	r1, r0, r1
   b4ee6:	440a      	add	r2, r1
   b4ee8:	0a21      	lsrs	r1, r4, #8
   b4eea:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b4eee:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b4ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4ef4 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b4ef4:	b538      	push	{r3, r4, r5, lr}
   b4ef6:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b4ef8:	f002 f928 	bl	b714c <_ZN9TCPClient9connectedEv>
   b4efc:	2800      	cmp	r0, #0
   b4efe:	bf14      	ite	ne
   b4f00:	2501      	movne	r5, #1
   b4f02:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b4f04:	d102      	bne.n	b4f0c <_ZN4MQTT11isConnectedEv+0x18>
   b4f06:	4620      	mov	r0, r4
   b4f08:	f002 fa58 	bl	b73bc <_ZN9TCPClient4stopEv>
    return rc;
}
   b4f0c:	4628      	mov	r0, r5
   b4f0e:	bd38      	pop	{r3, r4, r5, pc}

000b4f10 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b4f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4f14:	b088      	sub	sp, #32
   b4f16:	4604      	mov	r4, r0
   b4f18:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b4f1c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4f20:	4689      	mov	r9, r1
   b4f22:	4617      	mov	r7, r2
   b4f24:	461e      	mov	r6, r3
    if (!isConnected()) {
   b4f26:	f7ff ffe5 	bl	b4ef4 <_ZN4MQTT11isConnectedEv>
   b4f2a:	4605      	mov	r5, r0
   b4f2c:	2800      	cmp	r0, #0
   b4f2e:	f040 80cd 	bne.w	b50cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b4f32:	4621      	mov	r1, r4
   b4f34:	a801      	add	r0, sp, #4
   b4f36:	f7ff febc 	bl	b4cb2 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b4f3a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4f3c:	2900      	cmp	r1, #0
   b4f3e:	f040 8088 	bne.w	b5052 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b4f42:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4f46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b4f48:	462b      	mov	r3, r5
   b4f4a:	4620      	mov	r0, r4
   b4f4c:	f002 f880 	bl	b7050 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b4f50:	2800      	cmp	r0, #0
   b4f52:	d07a      	beq.n	b504a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b4f54:	2301      	movs	r3, #1
   b4f56:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b4f58:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4f5c:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b4f5e:	2b04      	cmp	r3, #4
   b4f60:	4b5b      	ldr	r3, [pc, #364]	; (b50d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b4f62:	f040 8081 	bne.w	b5068 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b4f66:	6818      	ldr	r0, [r3, #0]
   b4f68:	8899      	ldrh	r1, [r3, #4]
   b4f6a:	799b      	ldrb	r3, [r3, #6]
   b4f6c:	f8ad 100c 	strh.w	r1, [sp, #12]
   b4f70:	f88d 300e 	strb.w	r3, [sp, #14]
   b4f74:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4f76:	f8c2 0005 	str.w	r0, [r2, #5]
   b4f7a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b4f7e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b4f82:	f8a2 1009 	strh.w	r1, [r2, #9]
   b4f86:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b4f88:	230c      	movs	r3, #12
            if (willTopic) {
   b4f8a:	f1b8 0f00 	cmp.w	r8, #0
   b4f8e:	f000 8081 	beq.w	b5094 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b4f92:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b4f96:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b4f9a:	0140      	lsls	r0, r0, #5
   b4f9c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b4fa0:	f040 0006 	orr.w	r0, r0, #6
   b4fa4:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b4fa6:	f1ba 0f00 	cmp.w	sl, #0
   b4faa:	d101      	bne.n	b4fb0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b4fac:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b4fb0:	b11f      	cbz	r7, b4fba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b4fb2:	2e00      	cmp	r6, #0
   b4fb4:	d170      	bne.n	b5098 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b4fb6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b4fba:	69e2      	ldr	r2, [r4, #28]
   b4fbc:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b4fbe:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b4fc0:	69e1      	ldr	r1, [r4, #28]
   b4fc2:	1c58      	adds	r0, r3, #1
   b4fc4:	1212      	asrs	r2, r2, #8
   b4fc6:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b4fc8:	1c9a      	adds	r2, r3, #2
   b4fca:	69e1      	ldr	r1, [r4, #28]
   b4fcc:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b4fce:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b4fd0:	3303      	adds	r3, #3
   b4fd2:	69e2      	ldr	r2, [r4, #28]
   b4fd4:	4649      	mov	r1, r9
   b4fd6:	4620      	mov	r0, r4
   b4fd8:	f7ff ff70 	bl	b4ebc <_ZN4MQTT11writeStringEPKcPht>
   b4fdc:	4603      	mov	r3, r0
            if (willTopic) {
   b4fde:	f1b8 0f00 	cmp.w	r8, #0
   b4fe2:	d00b      	beq.n	b4ffc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b4fe4:	69e2      	ldr	r2, [r4, #28]
   b4fe6:	4641      	mov	r1, r8
   b4fe8:	4620      	mov	r0, r4
   b4fea:	f7ff ff67 	bl	b4ebc <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b4fee:	69e2      	ldr	r2, [r4, #28]
   b4ff0:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b4ff2:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b4ff4:	4620      	mov	r0, r4
   b4ff6:	f7ff ff61 	bl	b4ebc <_ZN4MQTT11writeStringEPKcPht>
   b4ffa:	4603      	mov	r3, r0
            if(user != NULL) {
   b4ffc:	b167      	cbz	r7, b5018 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b4ffe:	69e2      	ldr	r2, [r4, #28]
   b5000:	4639      	mov	r1, r7
   b5002:	4620      	mov	r0, r4
   b5004:	f7ff ff5a 	bl	b4ebc <_ZN4MQTT11writeStringEPKcPht>
   b5008:	4603      	mov	r3, r0
                if(pass != NULL) {
   b500a:	b12e      	cbz	r6, b5018 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b500c:	69e2      	ldr	r2, [r4, #28]
   b500e:	4631      	mov	r1, r6
   b5010:	4620      	mov	r0, r4
   b5012:	f7ff ff53 	bl	b4ebc <_ZN4MQTT11writeStringEPKcPht>
   b5016:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b5018:	3b05      	subs	r3, #5
   b501a:	69e2      	ldr	r2, [r4, #28]
   b501c:	b29b      	uxth	r3, r3
   b501e:	2110      	movs	r1, #16
   b5020:	4620      	mov	r0, r4
   b5022:	f7ff ff0f 	bl	b4e44 <_ZN4MQTT5writeEhPht>
   b5026:	f000 ff49 	bl	b5ebc <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b502a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b502e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b5032:	4620      	mov	r0, r4
   b5034:	f002 f968 	bl	b7308 <_ZN9TCPClient9availableEv>
   b5038:	bb88      	cbnz	r0, b509e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b503a:	f000 ff3f 	bl	b5ebc <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b503e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b5040:	1ac0      	subs	r0, r0, r3
   b5042:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5044:	4373      	muls	r3, r6
   b5046:	4298      	cmp	r0, r3
   b5048:	d9f3      	bls.n	b5032 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b504a:	4620      	mov	r0, r4
   b504c:	f002 f9b6 	bl	b73bc <_ZN9TCPClient4stopEv>
   b5050:	e035      	b.n	b50be <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b5052:	a802      	add	r0, sp, #8
   b5054:	f001 fe0c 	bl	b6c70 <_ZN9IPAddressC1EPKh>
   b5058:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b505c:	462b      	mov	r3, r5
   b505e:	a902      	add	r1, sp, #8
   b5060:	4620      	mov	r0, r4
   b5062:	f002 f8d5 	bl	b7210 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5066:	e773      	b.n	b4f50 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b5068:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b506c:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b5070:	7bdb      	ldrb	r3, [r3, #15]
   b5072:	f10d 0c08 	add.w	ip, sp, #8
   b5076:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b507a:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b507e:	ab02      	add	r3, sp, #8
   b5080:	cb03      	ldmia	r3!, {r0, r1}
   b5082:	f8c2 0005 	str.w	r0, [r2, #5]
   b5086:	f8c2 1009 	str.w	r1, [r2, #9]
   b508a:	f89c 3000 	ldrb.w	r3, [ip]
   b508e:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b5090:	230e      	movs	r3, #14
   b5092:	e77a      	b.n	b4f8a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b5094:	2002      	movs	r0, #2
   b5096:	e786      	b.n	b4fa6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b5098:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b509c:	e78d      	b.n	b4fba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b509e:	a902      	add	r1, sp, #8
   b50a0:	4620      	mov	r0, r4
   b50a2:	f7ff fe7d 	bl	b4da0 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b50a6:	2804      	cmp	r0, #4
   b50a8:	d1cf      	bne.n	b504a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b50aa:	69e3      	ldr	r3, [r4, #28]
   b50ac:	78de      	ldrb	r6, [r3, #3]
   b50ae:	2e00      	cmp	r6, #0
   b50b0:	d1cb      	bne.n	b504a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b50b2:	f000 ff03 	bl	b5ebc <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b50b6:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b50b8:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b50ba:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b50be:	a801      	add	r0, sp, #4
   b50c0:	f7ff fe02 	bl	b4cc8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b50c4:	4628      	mov	r0, r5
   b50c6:	b008      	add	sp, #32
   b50c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b50cc:	2500      	movs	r5, #0
   b50ce:	e7f9      	b.n	b50c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b50d0:	000baa50 	.word	0x000baa50

000b50d4 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b50d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b50d6:	2301      	movs	r3, #1
   b50d8:	2204      	movs	r2, #4
   b50da:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b50de:	2300      	movs	r3, #0
   b50e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b50e4:	e9cd 3300 	strd	r3, r3, [sp]
   b50e8:	461a      	mov	r2, r3
   b50ea:	f7ff ff11 	bl	b4f10 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b50ee:	b007      	add	sp, #28
   b50f0:	f85d fb04 	ldr.w	pc, [sp], #4

000b50f4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b50f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b50f8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b50fc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b5100:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b5104:	4604      	mov	r4, r0
   b5106:	468b      	mov	fp, r1
   b5108:	4616      	mov	r6, r2
   b510a:	461f      	mov	r7, r3
    if (isConnected()) {
   b510c:	f7ff fef2 	bl	b4ef4 <_ZN4MQTT11isConnectedEv>
   b5110:	4682      	mov	sl, r0
   b5112:	2800      	cmp	r0, #0
   b5114:	d051      	beq.n	b51ba <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b5116:	4621      	mov	r1, r4
   b5118:	a801      	add	r0, sp, #4
   b511a:	f7ff fdca 	bl	b4cb2 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b511e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b5122:	69e0      	ldr	r0, [r4, #28]
   b5124:	2100      	movs	r1, #0
   b5126:	f003 f9da 	bl	b84de <memset>
        length = writeString(topic, buffer, length);
   b512a:	2305      	movs	r3, #5
   b512c:	69e2      	ldr	r2, [r4, #28]
   b512e:	4659      	mov	r1, fp
   b5130:	4620      	mov	r0, r4
   b5132:	f7ff fec3 	bl	b4ebc <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b5136:	1e6b      	subs	r3, r5, #1
   b5138:	2b01      	cmp	r3, #1
   b513a:	d815      	bhi.n	b5168 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b513c:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b513e:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b5140:	3101      	adds	r1, #1
   b5142:	b289      	uxth	r1, r1
   b5144:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5146:	0a09      	lsrs	r1, r1, #8
   b5148:	5419      	strb	r1, [r3, r0]
   b514a:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b514c:	69e3      	ldr	r3, [r4, #28]
   b514e:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5150:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b5152:	3002      	adds	r0, #2
   b5154:	5499      	strb	r1, [r3, r2]
   b5156:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b5158:	f1b8 0f00 	cmp.w	r8, #0
   b515c:	d004      	beq.n	b5168 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b515e:	8c23      	ldrh	r3, [r4, #32]
   b5160:	1c5a      	adds	r2, r3, #1
   b5162:	8422      	strh	r2, [r4, #32]
   b5164:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b5168:	2100      	movs	r1, #0
   b516a:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b516c:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b516e:	69e2      	ldr	r2, [r4, #28]
   b5170:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5172:	d90a      	bls.n	b518a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b5174:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b5178:	459c      	cmp	ip, r3
   b517a:	d906      	bls.n	b518a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b517c:	f816 c001 	ldrb.w	ip, [r6, r1]
   b5180:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5184:	3101      	adds	r1, #1
   b5186:	b289      	uxth	r1, r1
   b5188:	e7ef      	b.n	b516a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b518a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b518e:	2900      	cmp	r1, #0
   b5190:	bf0c      	ite	eq
   b5192:	2130      	moveq	r1, #48	; 0x30
   b5194:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b5196:	f1b9 0f00 	cmp.w	r9, #0
   b519a:	d001      	beq.n	b51a0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b519c:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b51a0:	2d02      	cmp	r5, #2
   b51a2:	d10e      	bne.n	b51c2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b51a4:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b51a8:	3b05      	subs	r3, #5
   b51aa:	b29b      	uxth	r3, r3
   b51ac:	4620      	mov	r0, r4
   b51ae:	f7ff fe49 	bl	b4e44 <_ZN4MQTT5writeEhPht>
   b51b2:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b51b4:	a801      	add	r0, sp, #4
   b51b6:	f7ff fd87 	bl	b4cc8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b51ba:	4650      	mov	r0, sl
   b51bc:	b003      	add	sp, #12
   b51be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b51c2:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b51c4:	bf08      	it	eq
   b51c6:	f041 0102 	orreq.w	r1, r1, #2
   b51ca:	e7ed      	b.n	b51a8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b51cc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b51cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b51ce:	9c08      	ldr	r4, [sp, #32]
   b51d0:	9403      	str	r4, [sp, #12]
   b51d2:	2400      	movs	r4, #0
   b51d4:	9402      	str	r4, [sp, #8]
   b51d6:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b51da:	9401      	str	r4, [sp, #4]
   b51dc:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b51e0:	9400      	str	r4, [sp, #0]
   b51e2:	f7ff ff87 	bl	b50f4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b51e6:	b004      	add	sp, #16
   b51e8:	bd10      	pop	{r4, pc}

000b51ea <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b51ea:	b530      	push	{r4, r5, lr}
   b51ec:	b087      	sub	sp, #28
   b51ee:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b51f0:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b51f2:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b51f4:	9204      	str	r2, [sp, #16]
   b51f6:	f003 f9b3 	bl	b8560 <strlen>
   b51fa:	2500      	movs	r5, #0
   b51fc:	4603      	mov	r3, r0
   b51fe:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5202:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b5206:	9500      	str	r5, [sp, #0]
   b5208:	4620      	mov	r0, r4
   b520a:	f7ff ffdf 	bl	b51cc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b520e:	b007      	add	sp, #28
   b5210:	bd30      	pop	{r4, r5, pc}

000b5212 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b5212:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5214:	4604      	mov	r4, r0
   b5216:	460e      	mov	r6, r1
    if (isConnected()) {
   b5218:	f7ff fe6c 	bl	b4ef4 <_ZN4MQTT11isConnectedEv>
   b521c:	4605      	mov	r5, r0
   b521e:	b1c8      	cbz	r0, b5254 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b5220:	4621      	mov	r1, r4
   b5222:	a801      	add	r0, sp, #4
   b5224:	f7ff fd45 	bl	b4cb2 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b5228:	69e3      	ldr	r3, [r4, #28]
   b522a:	2262      	movs	r2, #98	; 0x62
   b522c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b522e:	69e3      	ldr	r3, [r4, #28]
   b5230:	2202      	movs	r2, #2
   b5232:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5234:	69e3      	ldr	r3, [r4, #28]
   b5236:	0a32      	lsrs	r2, r6, #8
   b5238:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b523a:	69e3      	ldr	r3, [r4, #28]
   b523c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b523e:	69e1      	ldr	r1, [r4, #28]
   b5240:	2204      	movs	r2, #4
   b5242:	4620      	mov	r0, r4
   b5244:	f001 fe59 	bl	b6efa <_ZN9TCPClient5writeEPKhj>
   b5248:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b524a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b524c:	bf18      	it	ne
   b524e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5250:	f7ff fd3a 	bl	b4cc8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5254:	4628      	mov	r0, r5
   b5256:	b002      	add	sp, #8
   b5258:	bd70      	pop	{r4, r5, r6, pc}

000b525a <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b525a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b525c:	4604      	mov	r4, r0
   b525e:	460e      	mov	r6, r1
    if (isConnected()) {
   b5260:	f7ff fe48 	bl	b4ef4 <_ZN4MQTT11isConnectedEv>
   b5264:	4605      	mov	r5, r0
   b5266:	b1c8      	cbz	r0, b529c <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b5268:	4621      	mov	r1, r4
   b526a:	a801      	add	r0, sp, #4
   b526c:	f7ff fd21 	bl	b4cb2 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b5270:	69e3      	ldr	r3, [r4, #28]
   b5272:	2272      	movs	r2, #114	; 0x72
   b5274:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5276:	69e3      	ldr	r3, [r4, #28]
   b5278:	2202      	movs	r2, #2
   b527a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b527c:	69e3      	ldr	r3, [r4, #28]
   b527e:	0a32      	lsrs	r2, r6, #8
   b5280:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5282:	69e3      	ldr	r3, [r4, #28]
   b5284:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b5286:	69e1      	ldr	r1, [r4, #28]
   b5288:	2204      	movs	r2, #4
   b528a:	4620      	mov	r0, r4
   b528c:	f001 fe35 	bl	b6efa <_ZN9TCPClient5writeEPKhj>
   b5290:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5292:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5294:	bf18      	it	ne
   b5296:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5298:	f7ff fd16 	bl	b4cc8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b529c:	4628      	mov	r0, r5
   b529e:	b002      	add	sp, #8
   b52a0:	bd70      	pop	{r4, r5, r6, pc}

000b52a2 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b52a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b52a6:	ed2d 8b02 	vpush	{d8}
   b52aa:	b087      	sub	sp, #28
   b52ac:	af00      	add	r7, sp, #0
   b52ae:	4604      	mov	r4, r0
    if (isConnected()) {
   b52b0:	f7ff fe20 	bl	b4ef4 <_ZN4MQTT11isConnectedEv>
   b52b4:	4681      	mov	r9, r0
   b52b6:	b1f8      	cbz	r0, b52f8 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b52b8:	4621      	mov	r1, r4
   b52ba:	f107 0014 	add.w	r0, r7, #20
   b52be:	f7ff fcf8 	bl	b4cb2 <_ZN4MQTT11MutexLockerC1EPS_>
   b52c2:	f000 fdfb 	bl	b5ebc <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b52c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b52c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b52cc:	4353      	muls	r3, r2
   b52ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b52d0:	1a82      	subs	r2, r0, r2
   b52d2:	429a      	cmp	r2, r3
   b52d4:	4606      	mov	r6, r0
   b52d6:	d803      	bhi.n	b52e0 <_ZN4MQTT4loopEv+0x3e>
   b52d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b52da:	1a82      	subs	r2, r0, r2
   b52dc:	4293      	cmp	r3, r2
   b52de:	d221      	bcs.n	b5324 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b52e0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b52e4:	b17b      	cbz	r3, b5306 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b52e6:	4620      	mov	r0, r4
   b52e8:	f002 f868 	bl	b73bc <_ZN9TCPClient4stopEv>
                return false;
   b52ec:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b52f0:	f107 0014 	add.w	r0, r7, #20
   b52f4:	f7ff fce8 	bl	b4cc8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b52f8:	4648      	mov	r0, r9
   b52fa:	371c      	adds	r7, #28
   b52fc:	46bd      	mov	sp, r7
   b52fe:	ecbd 8b02 	vpop	{d8}
   b5302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b5306:	69e2      	ldr	r2, [r4, #28]
   b5308:	21c0      	movs	r1, #192	; 0xc0
   b530a:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b530c:	69e2      	ldr	r2, [r4, #28]
   b530e:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b5310:	69e1      	ldr	r1, [r4, #28]
   b5312:	2202      	movs	r2, #2
   b5314:	4620      	mov	r0, r4
   b5316:	f001 fdf0 	bl	b6efa <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b531a:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b531e:	2301      	movs	r3, #1
   b5320:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b5324:	4620      	mov	r0, r4
   b5326:	f001 ffef 	bl	b7308 <_ZN9TCPClient9availableEv>
   b532a:	2800      	cmp	r0, #0
   b532c:	d0e0      	beq.n	b52f0 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b532e:	f107 0113 	add.w	r1, r7, #19
   b5332:	4620      	mov	r0, r4
   b5334:	f7ff fd34 	bl	b4da0 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b5338:	4683      	mov	fp, r0
   b533a:	2800      	cmp	r0, #0
   b533c:	d0d8      	beq.n	b52f0 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b533e:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b5340:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b5342:	7819      	ldrb	r1, [r3, #0]
   b5344:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b5348:	2a30      	cmp	r2, #48	; 0x30
   b534a:	d17f      	bne.n	b544c <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b534c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b5350:	f1ba 0f00 	cmp.w	sl, #0
   b5354:	d0cc      	beq.n	b52f0 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5356:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b535a:	466a      	mov	r2, sp
   b535c:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5360:	eb03 020c 	add.w	r2, r3, ip
   b5364:	7851      	ldrb	r1, [r2, #1]
   b5366:	7895      	ldrb	r5, [r2, #2]
   b5368:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b536c:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b536e:	f105 0208 	add.w	r2, r5, #8
   b5372:	4669      	mov	r1, sp
   b5374:	08d2      	lsrs	r2, r2, #3
   b5376:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b537a:	4695      	mov	sp, r2
   b537c:	f10c 0203 	add.w	r2, ip, #3
   b5380:	60fa      	str	r2, [r7, #12]
   b5382:	eb03 0e02 	add.w	lr, r3, r2
   b5386:	eb0d 0205 	add.w	r2, sp, r5
   b538a:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b538c:	f8c7 d008 	str.w	sp, [r7, #8]
   b5390:	607a      	str	r2, [r7, #4]
   b5392:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b5396:	428a      	cmp	r2, r1
   b5398:	d006      	beq.n	b53a8 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b539a:	460a      	mov	r2, r1
   b539c:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b53a0:	f802 8b01 	strb.w	r8, [r2], #1
   b53a4:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b53a6:	e7f4      	b.n	b5392 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b53a8:	2200      	movs	r2, #0
   b53aa:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b53ac:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b53b0:	68f9      	ldr	r1, [r7, #12]
   b53b2:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b53b6:	ebab 020c 	sub.w	r2, fp, ip
   b53ba:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b53bc:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b53c0:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b53c4:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b53c6:	d125      	bne.n	b5414 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b53c8:	f813 e001 	ldrb.w	lr, [r3, r1]
   b53cc:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b53ce:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b53d0:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b53d4:	f10c 0105 	add.w	r1, ip, #5
   b53d8:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b53da:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b53dc:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b53e0:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b53e2:	69e3      	ldr	r3, [r4, #28]
   b53e4:	2240      	movs	r2, #64	; 0x40
   b53e6:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b53e8:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b53ea:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b53ee:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b53f2:	69e3      	ldr	r3, [r4, #28]
   b53f4:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b53f8:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b53fa:	69e3      	ldr	r3, [r4, #28]
   b53fc:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b5400:	69e1      	ldr	r1, [r4, #28]
   b5402:	2204      	movs	r2, #4
   b5404:	4620      	mov	r0, r4
   b5406:	f001 fd78 	bl	b6efa <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b540a:	6266      	str	r6, [r4, #36]	; 0x24
   b540c:	ee18 3a10 	vmov	r3, s16
   b5410:	469d      	mov	sp, r3
   b5412:	e76d      	b.n	b52f0 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b5414:	f1b8 0f04 	cmp.w	r8, #4
   b5418:	d115      	bne.n	b5446 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b541a:	f813 e001 	ldrb.w	lr, [r3, r1]
   b541e:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5420:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5422:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b5426:	f10c 0105 	add.w	r1, ip, #5
   b542a:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b542c:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b542e:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5432:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b5434:	69e3      	ldr	r3, [r4, #28]
   b5436:	2250      	movs	r2, #80	; 0x50
   b5438:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b543a:	69e3      	ldr	r3, [r4, #28]
   b543c:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b543e:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b5442:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b5444:	e7d5      	b.n	b53f2 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b5446:	4419      	add	r1, r3
   b5448:	47d0      	blx	sl
   b544a:	e7df      	b.n	b540c <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b544c:	2a50      	cmp	r2, #80	; 0x50
   b544e:	d108      	bne.n	b5462 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b5450:	789a      	ldrb	r2, [r3, #2]
   b5452:	78d9      	ldrb	r1, [r3, #3]
   b5454:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b5458:	b289      	uxth	r1, r1
   b545a:	4620      	mov	r0, r4
   b545c:	f7ff fed9 	bl	b5212 <_ZN4MQTT14publishReleaseEt>
   b5460:	e746      	b.n	b52f0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b5462:	2a40      	cmp	r2, #64	; 0x40
   b5464:	d112      	bne.n	b548c <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b5466:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b5468:	2a00      	cmp	r2, #0
   b546a:	f43f af41 	beq.w	b52f0 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b546e:	f1bb 0f04 	cmp.w	fp, #4
   b5472:	f47f af3d 	bne.w	b52f0 <_ZN4MQTT4loopEv+0x4e>
   b5476:	f011 0f06 	tst.w	r1, #6
   b547a:	f47f af39 	bne.w	b52f0 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b547e:	7899      	ldrb	r1, [r3, #2]
   b5480:	78d8      	ldrb	r0, [r3, #3]
   b5482:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b5486:	b280      	uxth	r0, r0
   b5488:	4790      	blx	r2
   b548a:	e731      	b.n	b52f0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b548c:	2a60      	cmp	r2, #96	; 0x60
   b548e:	d108      	bne.n	b54a2 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b5490:	789a      	ldrb	r2, [r3, #2]
   b5492:	78d9      	ldrb	r1, [r3, #3]
   b5494:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b5498:	b289      	uxth	r1, r1
   b549a:	4620      	mov	r0, r4
   b549c:	f7ff fedd 	bl	b525a <_ZN4MQTT15publishCompleteEt>
   b54a0:	e726      	b.n	b52f0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b54a2:	2a70      	cmp	r2, #112	; 0x70
   b54a4:	d0df      	beq.n	b5466 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b54a6:	2a90      	cmp	r2, #144	; 0x90
   b54a8:	f43f af22 	beq.w	b52f0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b54ac:	2ac0      	cmp	r2, #192	; 0xc0
   b54ae:	d10a      	bne.n	b54c6 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b54b0:	22d0      	movs	r2, #208	; 0xd0
   b54b2:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b54b4:	69e3      	ldr	r3, [r4, #28]
   b54b6:	2200      	movs	r2, #0
   b54b8:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b54ba:	69e1      	ldr	r1, [r4, #28]
   b54bc:	2202      	movs	r2, #2
   b54be:	4620      	mov	r0, r4
   b54c0:	f001 fd1b 	bl	b6efa <_ZN9TCPClient5writeEPKhj>
   b54c4:	e714      	b.n	b52f0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b54c6:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b54c8:	bf04      	itt	eq
   b54ca:	2300      	moveq	r3, #0
   b54cc:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b54d0:	e70e      	b.n	b52f0 <_ZN4MQTT4loopEv+0x4e>

000b54d2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b54d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b54d4:	4604      	mov	r4, r0
   b54d6:	460f      	mov	r7, r1
   b54d8:	4616      	mov	r6, r2
    if (isConnected()) {
   b54da:	f7ff fd0b 	bl	b4ef4 <_ZN4MQTT11isConnectedEv>
   b54de:	4605      	mov	r5, r0
   b54e0:	b310      	cbz	r0, b5528 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b54e2:	4621      	mov	r1, r4
   b54e4:	a801      	add	r0, sp, #4
   b54e6:	f7ff fbe4 	bl	b4cb2 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b54ea:	8c23      	ldrh	r3, [r4, #32]
   b54ec:	3301      	adds	r3, #1
   b54ee:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b54f0:	b1eb      	cbz	r3, b552e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b54f2:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b54f4:	8c23      	ldrh	r3, [r4, #32]
   b54f6:	69e2      	ldr	r2, [r4, #28]
   b54f8:	0a1b      	lsrs	r3, r3, #8
   b54fa:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b54fc:	69e3      	ldr	r3, [r4, #28]
   b54fe:	8c22      	ldrh	r2, [r4, #32]
   b5500:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b5502:	69e2      	ldr	r2, [r4, #28]
   b5504:	2307      	movs	r3, #7
   b5506:	4639      	mov	r1, r7
   b5508:	4620      	mov	r0, r4
   b550a:	f7ff fcd7 	bl	b4ebc <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b550e:	69e3      	ldr	r3, [r4, #28]
   b5510:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b5512:	3804      	subs	r0, #4
   b5514:	b283      	uxth	r3, r0
   b5516:	69e2      	ldr	r2, [r4, #28]
   b5518:	2182      	movs	r1, #130	; 0x82
   b551a:	4620      	mov	r0, r4
   b551c:	f7ff fc92 	bl	b4e44 <_ZN4MQTT5writeEhPht>
   b5520:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b5522:	a801      	add	r0, sp, #4
   b5524:	f7ff fbd0 	bl	b4cc8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5528:	4628      	mov	r0, r5
   b552a:	b003      	add	sp, #12
   b552c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b552e:	2301      	movs	r3, #1
   b5530:	e7df      	b.n	b54f2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b5532 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b5532:	2200      	movs	r2, #0
   b5534:	f7ff bfcd 	b.w	b54d2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b5538 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5538:	b510      	push	{r4, lr}
   b553a:	4b04      	ldr	r3, [pc, #16]	; (b554c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b553c:	6003      	str	r3, [r0, #0]
   b553e:	4604      	mov	r4, r0
  if(buffer) {
   b5540:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5542:	b108      	cbz	r0, b5548 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b5544:	f000 feee 	bl	b6324 <free>
    buffer = NULL;
  }
}
   b5548:	4620      	mov	r0, r4
   b554a:	bd10      	pop	{r4, pc}
   b554c:	000baf1c 	.word	0x000baf1c

000b5550 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5550:	b510      	push	{r4, lr}
   b5552:	4604      	mov	r4, r0
}
   b5554:	f7ff fff0 	bl	b5538 <_ZN16Adafruit_SSD1306D1Ev>
   b5558:	4620      	mov	r0, r4
   b555a:	2150      	movs	r1, #80	; 0x50
   b555c:	f7fe fda1 	bl	b40a2 <_ZdlPvj>
   b5560:	4620      	mov	r0, r4
   b5562:	bd10      	pop	{r4, pc}

000b5564 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5564:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5566:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5568:	db4b      	blt.n	b5602 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b556a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b556e:	428c      	cmp	r4, r1
   b5570:	dd47      	ble.n	b5602 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5572:	2a00      	cmp	r2, #0
   b5574:	db45      	blt.n	b5602 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5576:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b557a:	4294      	cmp	r4, r2
   b557c:	dd41      	ble.n	b5602 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b557e:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b5580:	2c02      	cmp	r4, #2
   b5582:	d01f      	beq.n	b55c4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b5584:	2c03      	cmp	r4, #3
   b5586:	d026      	beq.n	b55d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b5588:	2c01      	cmp	r4, #1
   b558a:	d104      	bne.n	b5596 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b558c:	8904      	ldrh	r4, [r0, #8]
   b558e:	43d2      	mvns	r2, r2
   b5590:	4414      	add	r4, r2
      break;
   b5592:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b5594:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b5596:	2b01      	cmp	r3, #1
   b5598:	d023      	beq.n	b55e2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b559a:	2b02      	cmp	r3, #2
   b559c:	d032      	beq.n	b5604 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b559e:	bb83      	cbnz	r3, b5602 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b55a0:	2a00      	cmp	r2, #0
   b55a2:	4613      	mov	r3, r2
   b55a4:	8904      	ldrh	r4, [r0, #8]
   b55a6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b55a8:	bfb8      	it	lt
   b55aa:	1dd3      	addlt	r3, r2, #7
   b55ac:	10db      	asrs	r3, r3, #3
   b55ae:	fb13 1104 	smlabb	r1, r3, r4, r1
   b55b2:	f002 0207 	and.w	r2, r2, #7
   b55b6:	2301      	movs	r3, #1
   b55b8:	4093      	lsls	r3, r2
   b55ba:	5c42      	ldrb	r2, [r0, r1]
   b55bc:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b55c0:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b55c2:	e01e      	b.n	b5602 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b55c4:	8904      	ldrh	r4, [r0, #8]
   b55c6:	3c01      	subs	r4, #1
   b55c8:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b55ca:	8944      	ldrh	r4, [r0, #10]
   b55cc:	43d2      	mvns	r2, r2
   b55ce:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b55d0:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b55d2:	b212      	sxth	r2, r2
      break;
   b55d4:	e7df      	b.n	b5596 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b55d6:	8944      	ldrh	r4, [r0, #10]
   b55d8:	3c01      	subs	r4, #1
   b55da:	1a64      	subs	r4, r4, r1
      break;
   b55dc:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b55de:	b222      	sxth	r2, r4
      break;
   b55e0:	e7d9      	b.n	b5596 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b55e2:	2a00      	cmp	r2, #0
   b55e4:	8904      	ldrh	r4, [r0, #8]
   b55e6:	4613      	mov	r3, r2
   b55e8:	bfb8      	it	lt
   b55ea:	1dd3      	addlt	r3, r2, #7
   b55ec:	10db      	asrs	r3, r3, #3
   b55ee:	fb13 1104 	smlabb	r1, r3, r4, r1
   b55f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b55f4:	f002 0007 	and.w	r0, r2, #7
   b55f8:	2201      	movs	r2, #1
   b55fa:	4082      	lsls	r2, r0
   b55fc:	5c58      	ldrb	r0, [r3, r1]
   b55fe:	4302      	orrs	r2, r0
   b5600:	545a      	strb	r2, [r3, r1]
}
   b5602:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5604:	2a00      	cmp	r2, #0
   b5606:	4613      	mov	r3, r2
   b5608:	8904      	ldrh	r4, [r0, #8]
   b560a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b560c:	bfb8      	it	lt
   b560e:	1dd3      	addlt	r3, r2, #7
   b5610:	10db      	asrs	r3, r3, #3
   b5612:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5616:	f002 0207 	and.w	r2, r2, #7
   b561a:	2301      	movs	r3, #1
   b561c:	fa03 f202 	lsl.w	r2, r3, r2
   b5620:	5c43      	ldrb	r3, [r0, r1]
   b5622:	405a      	eors	r2, r3
   b5624:	e7cc      	b.n	b55c0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b5628 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b5628:	b570      	push	{r4, r5, r6, lr}
   b562a:	4604      	mov	r4, r0
   b562c:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b562e:	2600      	movs	r6, #0
   b5630:	f7ff f804 	bl	b463c <_ZN12Adafruit_GFXC1Ess>
   b5634:	4b11      	ldr	r3, [pc, #68]	; (b567c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b5636:	6023      	str	r3, [r4, #0]
   b5638:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b563a:	b915      	cbnz	r5, b5642 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b563c:	f002 f8de 	bl	b77fc <_Z19__fetch_global_Wirev>
   b5640:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5642:	23ff      	movs	r3, #255	; 0xff
   b5644:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b5648:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b564c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b5650:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b5654:	4b0a      	ldr	r3, [pc, #40]	; (b5680 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b5656:	63a3      	str	r3, [r4, #56]	; 0x38
   b5658:	2301      	movs	r3, #1
   b565a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b565e:	9b05      	ldr	r3, [sp, #20]
   b5660:	64a3      	str	r3, [r4, #72]	; 0x48
   b5662:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5666:	9b06      	ldr	r3, [sp, #24]
   b5668:	86a2      	strh	r2, [r4, #52]	; 0x34
   b566a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b566e:	6426      	str	r6, [r4, #64]	; 0x40
   b5670:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b5674:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b5676:	4620      	mov	r0, r4
   b5678:	bd70      	pop	{r4, r5, r6, pc}
   b567a:	bf00      	nop
   b567c:	000baf1c 	.word	0x000baf1c
   b5680:	000baa68 	.word	0x000baa68

000b5684 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5686:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5688:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b568a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b568c:	b190      	cbz	r0, b56b4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b568e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5692:	f001 fc1b 	bl	b6ecc <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5696:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5698:	6803      	ldr	r3, [r0, #0]
   b569a:	2100      	movs	r1, #0
   b569c:	689b      	ldr	r3, [r3, #8]
   b569e:	4798      	blx	r3
    WIRE_WRITE(c);
   b56a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b56a2:	6803      	ldr	r3, [r0, #0]
   b56a4:	4629      	mov	r1, r5
   b56a6:	689b      	ldr	r3, [r3, #8]
   b56a8:	4798      	blx	r3
    wire->endTransmission();
   b56aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b56ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b56b0:	f001 bc13 	b.w	b6eda <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b56b4:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b56b8:	4601      	mov	r1, r0
   b56ba:	b298      	uxth	r0, r3
   b56bc:	f002 f81b 	bl	b76f6 <digitalWrite>
  if(spi) {
   b56c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b56c2:	b120      	cbz	r0, b56ce <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b56c4:	4629      	mov	r1, r5
}
   b56c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b56ca:	f000 bf4d 	b.w	b6568 <_ZN8SPIClass8transferEh>
   b56ce:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b56d0:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b56d2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b56d6:	ea05 0107 	and.w	r1, r5, r7
   b56da:	b280      	uxth	r0, r0
   b56dc:	f002 f80b 	bl	b76f6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b56e0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b56e4:	2101      	movs	r1, #1
   b56e6:	b280      	uxth	r0, r0
   b56e8:	f002 f805 	bl	b76f6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b56ec:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b56f0:	2100      	movs	r1, #0
   b56f2:	b280      	uxth	r0, r0
   b56f4:	f001 ffff 	bl	b76f6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b56f8:	3e01      	subs	r6, #1
   b56fa:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b56fe:	d1e8      	bne.n	b56d2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b5700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5702 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5702:	b538      	push	{r3, r4, r5, lr}
   b5704:	4604      	mov	r4, r0
  TRANSACTION_START
   b5706:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5708:	460d      	mov	r5, r1
  TRANSACTION_START
   b570a:	b180      	cbz	r0, b572e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b570c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b570e:	f001 fbcf 	bl	b6eb0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b5712:	2d00      	cmp	r5, #0
   b5714:	4620      	mov	r0, r4
   b5716:	bf14      	ite	ne
   b5718:	21a7      	movne	r1, #167	; 0xa7
   b571a:	21a6      	moveq	r1, #166	; 0xa6
   b571c:	f7ff ffb2 	bl	b5684 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b5720:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5722:	b188      	cbz	r0, b5748 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b5724:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b572a:	f001 bbc1 	b.w	b6eb0 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b572e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5730:	b118      	cbz	r0, b573a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b5732:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5736:	f000 fea9 	bl	b648c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b573a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b573e:	2100      	movs	r1, #0
   b5740:	b280      	uxth	r0, r0
   b5742:	f001 ffd8 	bl	b76f6 <digitalWrite>
   b5746:	e7e4      	b.n	b5712 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b5748:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b574c:	2101      	movs	r1, #1
   b574e:	b280      	uxth	r0, r0
   b5750:	f001 ffd1 	bl	b76f6 <digitalWrite>
   b5754:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5756:	b118      	cbz	r0, b5760 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b5758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b575c:	f000 be7c 	b.w	b6458 <_ZN8SPIClass14endTransactionEv>
}
   b5760:	bd38      	pop	{r3, r4, r5, pc}

000b5762 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5762:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5766:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5768:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b576a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b576c:	188f      	adds	r7, r1, r2
   b576e:	b340      	cbz	r0, b57c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b5770:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5774:	f001 fbaa 	bl	b6ecc <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5778:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b577a:	6803      	ldr	r3, [r0, #0]
   b577c:	2100      	movs	r1, #0
   b577e:	689b      	ldr	r3, [r3, #8]
   b5780:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5782:	2601      	movs	r6, #1
    while(n--) {
   b5784:	42af      	cmp	r7, r5
        wire->endTransmission();
   b5786:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b5788:	d017      	beq.n	b57ba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b578a:	2e1f      	cmp	r6, #31
   b578c:	d90c      	bls.n	b57a8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b578e:	f001 fba4 	bl	b6eda <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5792:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5796:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5798:	f001 fb98 	bl	b6ecc <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b579c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b579e:	6803      	ldr	r3, [r0, #0]
   b57a0:	2100      	movs	r1, #0
   b57a2:	689b      	ldr	r3, [r3, #8]
   b57a4:	4798      	blx	r3
        bytesOut = 1;
   b57a6:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b57a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b57aa:	f815 1b01 	ldrb.w	r1, [r5], #1
   b57ae:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b57b0:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b57b2:	689b      	ldr	r3, [r3, #8]
   b57b4:	4798      	blx	r3
      bytesOut++;
   b57b6:	b2f6      	uxtb	r6, r6
    while(n--) {
   b57b8:	e7e4      	b.n	b5784 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b57ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b57be:	f001 bb8c 	b.w	b6eda <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b57c2:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b57c6:	4601      	mov	r1, r0
   b57c8:	b298      	uxth	r0, r3
   b57ca:	f001 ff94 	bl	b76f6 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b57ce:	42bd      	cmp	r5, r7
   b57d0:	d022      	beq.n	b5818 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b57d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b57d4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b57d8:	b118      	cbz	r0, b57e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b57da:	4649      	mov	r1, r9
   b57dc:	f000 fec4 	bl	b6568 <_ZN8SPIClass8transferEh>
   b57e0:	e7f5      	b.n	b57ce <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b57e2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b57e4:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b57e8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b57ec:	ea09 0108 	and.w	r1, r9, r8
   b57f0:	b280      	uxth	r0, r0
   b57f2:	f001 ff80 	bl	b76f6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b57f6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b57fa:	2101      	movs	r1, #1
   b57fc:	b280      	uxth	r0, r0
   b57fe:	f001 ff7a 	bl	b76f6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5802:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5806:	2100      	movs	r1, #0
   b5808:	b280      	uxth	r0, r0
   b580a:	f001 ff74 	bl	b76f6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b580e:	3e01      	subs	r6, #1
   b5810:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5814:	d1e8      	bne.n	b57e8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b5816:	e7da      	b.n	b57ce <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b5818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b581c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b581c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5820:	1dda      	adds	r2, r3, #7
   b5822:	bf48      	it	mi
   b5824:	f103 020e 	addmi.w	r2, r3, #14
   b5828:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b582c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b582e:	10d2      	asrs	r2, r2, #3
   b5830:	435a      	muls	r2, r3
   b5832:	2100      	movs	r1, #0
   b5834:	f002 be53 	b.w	b84de <memset>

000b5838 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b5838:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b583c:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b583e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b5840:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b5844:	4604      	mov	r4, r0
   b5846:	460f      	mov	r7, r1
   b5848:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b584a:	b1c3      	cbz	r3, b587e <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b584c:	4620      	mov	r0, r4
   b584e:	f7ff ffe5 	bl	b581c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b5852:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b5856:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b585a:	2820      	cmp	r0, #32
   b585c:	dc21      	bgt.n	b58a2 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b585e:	2320      	movs	r3, #32
   b5860:	2201      	movs	r2, #1
   b5862:	3820      	subs	r0, #32
   b5864:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b5868:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b586c:	2373      	movs	r3, #115	; 0x73
   b586e:	3973      	subs	r1, #115	; 0x73
   b5870:	9300      	str	r3, [sp, #0]
   b5872:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5876:	4b89      	ldr	r3, [pc, #548]	; (b5a9c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b5878:	f340 024f 	sbfx	r2, r0, #1, #16
   b587c:	e021      	b.n	b58c2 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b587e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5882:	1dd8      	adds	r0, r3, #7
   b5884:	bf48      	it	mi
   b5886:	f103 000e 	addmi.w	r0, r3, #14
   b588a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b588e:	10c0      	asrs	r0, r0, #3
   b5890:	4358      	muls	r0, r3
   b5892:	f000 fd3f 	bl	b6314 <malloc>
   b5896:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5898:	2800      	cmp	r0, #0
   b589a:	d1d7      	bne.n	b584c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b589c:	b004      	add	sp, #16
   b589e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b58a2:	3840      	subs	r0, #64	; 0x40
   b58a4:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b58a8:	fa02 f280 	sxtah	r2, r2, r0
   b58ac:	2340      	movs	r3, #64	; 0x40
   b58ae:	2001      	movs	r0, #1
   b58b0:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b58b4:	2352      	movs	r3, #82	; 0x52
   b58b6:	3952      	subs	r1, #82	; 0x52
   b58b8:	9300      	str	r3, [sp, #0]
   b58ba:	4b79      	ldr	r3, [pc, #484]	; (b5aa0 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b58bc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b58c0:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b58c2:	4620      	mov	r0, r4
   b58c4:	f341 014f 	sbfx	r1, r1, #1, #16
   b58c8:	f7fe fece 	bl	b4668 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b58cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b58ce:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b58d2:	2800      	cmp	r0, #0
   b58d4:	d078      	beq.n	b59c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b58d6:	2d00      	cmp	r5, #0
   b58d8:	d174      	bne.n	b59c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b58da:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b58de:	2b20      	cmp	r3, #32
   b58e0:	bf0c      	ite	eq
   b58e2:	253c      	moveq	r5, #60	; 0x3c
   b58e4:	253d      	movne	r5, #61	; 0x3d
   b58e6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b58ea:	f1b8 0f00 	cmp.w	r8, #0
   b58ee:	d001      	beq.n	b58f4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b58f0:	f001 fae2 	bl	b6eb8 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b58f4:	b1fe      	cbz	r6, b5936 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b58f6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b58fa:	2800      	cmp	r0, #0
   b58fc:	db1b      	blt.n	b5936 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b58fe:	2101      	movs	r1, #1
   b5900:	b280      	uxth	r0, r0
   b5902:	f001 fee7 	bl	b76d4 <pinMode>
    digitalWrite(rstPin, HIGH);
   b5906:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b590a:	2101      	movs	r1, #1
   b590c:	b280      	uxth	r0, r0
   b590e:	f001 fef2 	bl	b76f6 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b5912:	2001      	movs	r0, #1
   b5914:	f001 f872 	bl	b69fc <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b5918:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b591c:	2100      	movs	r1, #0
   b591e:	b280      	uxth	r0, r0
   b5920:	f001 fee9 	bl	b76f6 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b5924:	200a      	movs	r0, #10
   b5926:	f001 f869 	bl	b69fc <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b592a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b592e:	2101      	movs	r1, #1
   b5930:	b280      	uxth	r0, r0
   b5932:	f001 fee0 	bl	b76f6 <digitalWrite>
  TRANSACTION_START
   b5936:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5938:	2800      	cmp	r0, #0
   b593a:	d074      	beq.n	b5a26 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b593c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b593e:	f001 fab7 	bl	b6eb0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b5942:	2204      	movs	r2, #4
   b5944:	4957      	ldr	r1, [pc, #348]	; (b5aa4 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b5946:	4620      	mov	r0, r4
   b5948:	f7ff ff0b 	bl	b5762 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b594c:	8961      	ldrh	r1, [r4, #10]
   b594e:	3901      	subs	r1, #1
   b5950:	b2c9      	uxtb	r1, r1
   b5952:	4620      	mov	r0, r4
   b5954:	f7ff fe96 	bl	b5684 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b5958:	4953      	ldr	r1, [pc, #332]	; (b5aa8 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b595a:	2204      	movs	r2, #4
   b595c:	4620      	mov	r0, r4
   b595e:	f7ff ff00 	bl	b5762 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b5962:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5966:	2b01      	cmp	r3, #1
   b5968:	bf0c      	ite	eq
   b596a:	2110      	moveq	r1, #16
   b596c:	2114      	movne	r1, #20
   b596e:	4620      	mov	r0, r4
   b5970:	f7ff fe88 	bl	b5684 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b5974:	2204      	movs	r2, #4
   b5976:	494d      	ldr	r1, [pc, #308]	; (b5aac <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b5978:	4620      	mov	r0, r4
   b597a:	f7ff fef2 	bl	b5762 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b597e:	68a3      	ldr	r3, [r4, #8]
   b5980:	4a4b      	ldr	r2, [pc, #300]	; (b5ab0 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b5982:	4293      	cmp	r3, r2
   b5984:	d15c      	bne.n	b5a40 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b5986:	494b      	ldr	r1, [pc, #300]	; (b5ab4 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b5988:	2204      	movs	r2, #4
   b598a:	4620      	mov	r0, r4
   b598c:	f7ff fee9 	bl	b5762 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5990:	21d9      	movs	r1, #217	; 0xd9
   b5992:	4620      	mov	r0, r4
   b5994:	f7ff fe76 	bl	b5684 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b5998:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b599c:	2b01      	cmp	r3, #1
   b599e:	bf0c      	ite	eq
   b59a0:	2122      	moveq	r1, #34	; 0x22
   b59a2:	21f1      	movne	r1, #241	; 0xf1
   b59a4:	4620      	mov	r0, r4
   b59a6:	f7ff fe6d 	bl	b5684 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b59aa:	4620      	mov	r0, r4
   b59ac:	4942      	ldr	r1, [pc, #264]	; (b5ab8 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b59ae:	2206      	movs	r2, #6
   b59b0:	f7ff fed7 	bl	b5762 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b59b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b59b6:	2800      	cmp	r0, #0
   b59b8:	d063      	beq.n	b5a82 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b59ba:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b59bc:	f001 fa78 	bl	b6eb0 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b59c0:	2001      	movs	r0, #1
   b59c2:	e76b      	b.n	b589c <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b59c4:	b26d      	sxtb	r5, r5
   b59c6:	e78e      	b.n	b58e6 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b59c8:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b59cc:	2101      	movs	r1, #1
   b59ce:	b280      	uxth	r0, r0
   b59d0:	f001 fe80 	bl	b76d4 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b59d4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b59d8:	2101      	movs	r1, #1
   b59da:	b280      	uxth	r0, r0
   b59dc:	f001 fe7a 	bl	b76d4 <pinMode>
    SSD1306_DESELECT
   b59e0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b59e4:	2101      	movs	r1, #1
   b59e6:	b280      	uxth	r0, r0
   b59e8:	f001 fe85 	bl	b76f6 <digitalWrite>
    if(spi) { // Hardware SPI
   b59ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b59ee:	b13d      	cbz	r5, b5a00 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b59f0:	f1b8 0f00 	cmp.w	r8, #0
   b59f4:	f43f af7e 	beq.w	b58f4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b59f8:	4628      	mov	r0, r5
   b59fa:	f000 fd19 	bl	b6430 <_ZN8SPIClass5beginEv>
   b59fe:	e779      	b.n	b58f4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b5a00:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5a04:	2101      	movs	r1, #1
   b5a06:	b280      	uxth	r0, r0
   b5a08:	f001 fe64 	bl	b76d4 <pinMode>
      pinMode(clkPin , OUTPUT);
   b5a0c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5a10:	2101      	movs	r1, #1
   b5a12:	b280      	uxth	r0, r0
   b5a14:	f001 fe5e 	bl	b76d4 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b5a18:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5a1c:	4629      	mov	r1, r5
   b5a1e:	b280      	uxth	r0, r0
   b5a20:	f001 fe69 	bl	b76f6 <digitalWrite>
   b5a24:	e766      	b.n	b58f4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b5a26:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5a28:	b118      	cbz	r0, b5a32 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b5a2a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5a2e:	f000 fd2d 	bl	b648c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5a32:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5a36:	2100      	movs	r1, #0
   b5a38:	b280      	uxth	r0, r0
   b5a3a:	f001 fe5c 	bl	b76f6 <digitalWrite>
   b5a3e:	e780      	b.n	b5942 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b5a40:	4a1e      	ldr	r2, [pc, #120]	; (b5abc <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b5a42:	4293      	cmp	r3, r2
   b5a44:	d10e      	bne.n	b5a64 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b5a46:	491e      	ldr	r1, [pc, #120]	; (b5ac0 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b5a48:	2203      	movs	r2, #3
   b5a4a:	4620      	mov	r0, r4
   b5a4c:	f7ff fe89 	bl	b5762 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b5a50:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5a54:	2b01      	cmp	r3, #1
   b5a56:	bf0c      	ite	eq
   b5a58:	219f      	moveq	r1, #159	; 0x9f
   b5a5a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5a5c:	4620      	mov	r0, r4
   b5a5e:	f7ff fe11 	bl	b5684 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b5a62:	e795      	b.n	b5990 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b5a64:	4a17      	ldr	r2, [pc, #92]	; (b5ac4 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b5a66:	4293      	cmp	r3, r2
   b5a68:	d192      	bne.n	b5990 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b5a6a:	4917      	ldr	r1, [pc, #92]	; (b5ac8 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b5a6c:	2203      	movs	r2, #3
   b5a6e:	4620      	mov	r0, r4
   b5a70:	f7ff fe77 	bl	b5762 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5a74:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5a78:	2b01      	cmp	r3, #1
   b5a7a:	bf0c      	ite	eq
   b5a7c:	2110      	moveq	r1, #16
   b5a7e:	21af      	movne	r1, #175	; 0xaf
   b5a80:	e7ec      	b.n	b5a5c <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b5a82:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5a86:	2101      	movs	r1, #1
   b5a88:	b280      	uxth	r0, r0
   b5a8a:	f001 fe34 	bl	b76f6 <digitalWrite>
   b5a8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5a90:	2800      	cmp	r0, #0
   b5a92:	d095      	beq.n	b59c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5a94:	f000 fce0 	bl	b6458 <_ZN8SPIClass14endTransactionEv>
   b5a98:	e792      	b.n	b59c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5a9a:	bf00      	nop
   b5a9c:	000bad34 	.word	0x000bad34
   b5aa0:	000baa74 	.word	0x000baa74
   b5aa4:	000baf7c 	.word	0x000baf7c
   b5aa8:	000baf80 	.word	0x000baf80
   b5aac:	000baf84 	.word	0x000baf84
   b5ab0:	00200080 	.word	0x00200080
   b5ab4:	000baf8e 	.word	0x000baf8e
   b5ab8:	000baf88 	.word	0x000baf88
   b5abc:	00400080 	.word	0x00400080
   b5ac0:	000baf92 	.word	0x000baf92
   b5ac4:	00100060 	.word	0x00100060
   b5ac8:	000baf95 	.word	0x000baf95

000b5acc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5acc:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5ace:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5ad0:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5ad4:	db3d      	blt.n	b5b52 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5ad6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5ada:	4294      	cmp	r4, r2
   b5adc:	dd39      	ble.n	b5b52 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b5ade:	2900      	cmp	r1, #0
      w += x;
   b5ae0:	bfbe      	ittt	lt
   b5ae2:	185b      	addlt	r3, r3, r1
   b5ae4:	b21b      	sxthlt	r3, r3
      x  = 0;
   b5ae6:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b5ae8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b5aec:	18ce      	adds	r6, r1, r3
   b5aee:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5af0:	bfc4      	itt	gt
   b5af2:	1a63      	subgt	r3, r4, r1
   b5af4:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b5af6:	2b00      	cmp	r3, #0
   b5af8:	dd2b      	ble.n	b5b52 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b5afa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5afc:	10d6      	asrs	r6, r2, #3
   b5afe:	fb14 1106 	smlabb	r1, r4, r6, r1
   b5b02:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b5b04:	f002 0007 	and.w	r0, r2, #7
   b5b08:	2201      	movs	r2, #1
   b5b0a:	4082      	lsls	r2, r0
      switch(color) {
   b5b0c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b5b0e:	b2d2      	uxtb	r2, r2
      switch(color) {
   b5b10:	d016      	beq.n	b5b40 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b5b12:	2d02      	cmp	r5, #2
   b5b14:	d00b      	beq.n	b5b2e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b5b16:	b9e5      	cbnz	r5, b5b52 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b5b18:	43d2      	mvns	r2, r2
   b5b1a:	b2d2      	uxtb	r2, r2
   b5b1c:	440b      	add	r3, r1
   b5b1e:	4299      	cmp	r1, r3
   b5b20:	d017      	beq.n	b5b52 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5b22:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5b26:	4010      	ands	r0, r2
   b5b28:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5b2c:	e7f7      	b.n	b5b1e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b5b2e:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b5b30:	4299      	cmp	r1, r3
   b5b32:	d00e      	beq.n	b5b52 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5b34:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5b38:	4050      	eors	r0, r2
   b5b3a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5b3e:	e7f7      	b.n	b5b30 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5b40:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b5b42:	4299      	cmp	r1, r3
   b5b44:	d005      	beq.n	b5b52 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5b46:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5b4a:	4310      	orrs	r0, r2
   b5b4c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5b50:	e7f7      	b.n	b5b42 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5b52:	bd70      	pop	{r4, r5, r6, pc}

000b5b54 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5b54:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5b56:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5b58:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5b5c:	db76      	blt.n	b5c4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5b5e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5b62:	42b1      	cmp	r1, r6
   b5b64:	da72      	bge.n	b5c4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b5b66:	2a00      	cmp	r2, #0
      __h += __y;
   b5b68:	bfbe      	ittt	lt
   b5b6a:	189b      	addlt	r3, r3, r2
   b5b6c:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5b6e:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5b70:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5b74:	18d7      	adds	r7, r2, r3
   b5b76:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5b78:	bfc4      	itt	gt
   b5b7a:	1aa3      	subgt	r3, r4, r2
   b5b7c:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b5b7e:	2b00      	cmp	r3, #0
   b5b80:	dd64      	ble.n	b5c4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5b82:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b5b86:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5b88:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b5b8c:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5b90:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5b92:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b5b96:	d023      	beq.n	b5be0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5b98:	f1c2 0208 	rsb	r2, r2, #8
   b5b9c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5b9e:	492d      	ldr	r1, [pc, #180]	; (b5c54 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5ba0:	4293      	cmp	r3, r2
   b5ba2:	bf3c      	itt	cc
   b5ba4:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5ba8:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5bac:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5bae:	bf3c      	itt	cc
   b5bb0:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5bb4:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b5bb8:	2d01      	cmp	r5, #1
   b5bba:	d007      	beq.n	b5bcc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5bbc:	2d02      	cmp	r5, #2
   b5bbe:	d02e      	beq.n	b5c1e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5bc0:	b94d      	cbnz	r5, b5bd6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b5bc2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5bc6:	ea2c 0101 	bic.w	r1, ip, r1
   b5bca:	e003      	b.n	b5bd4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b5bcc:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5bd0:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b5bd4:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b5bd6:	4293      	cmp	r3, r2
   b5bd8:	d338      	bcc.n	b5c4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b5bda:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b5bde:	440c      	add	r4, r1
        h -= mod;
   b5be0:	1a9a      	subs	r2, r3, r2
   b5be2:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b5be4:	2a07      	cmp	r2, #7
   b5be6:	d90e      	bls.n	b5c06 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b5be8:	2d02      	cmp	r5, #2
   b5bea:	d11d      	bne.n	b5c28 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b5bec:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b5bee:	7821      	ldrb	r1, [r4, #0]
   b5bf0:	43c9      	mvns	r1, r1
   b5bf2:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b5bf4:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5bf6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b5bfa:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5bfc:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5bfe:	440c      	add	r4, r1
            } while(h >= 8);
   b5c00:	d8f5      	bhi.n	b5bee <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b5c02:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b5c06:	b30a      	cbz	r2, b5c4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5c08:	4b13      	ldr	r3, [pc, #76]	; (b5c58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b5c0a:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5c0c:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b5c0e:	d01a      	beq.n	b5c46 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b5c10:	2d02      	cmp	r5, #2
   b5c12:	d01c      	beq.n	b5c4e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b5c14:	b9d5      	cbnz	r5, b5c4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b5c16:	7822      	ldrb	r2, [r4, #0]
   b5c18:	ea22 0303 	bic.w	r3, r2, r3
   b5c1c:	e015      	b.n	b5c4a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b5c1e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5c22:	ea81 010c 	eor.w	r1, r1, ip
   b5c26:	e7d5      	b.n	b5bd4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b5c28:	1e29      	subs	r1, r5, #0
   b5c2a:	bf18      	it	ne
   b5c2c:	2101      	movne	r1, #1
   b5c2e:	4249      	negs	r1, r1
   b5c30:	b2c9      	uxtb	r1, r1
   b5c32:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b5c34:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b5c36:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5c38:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b5c3c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5c3e:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5c40:	4434      	add	r4, r6
            } while(h >= 8);
   b5c42:	d8f7      	bhi.n	b5c34 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b5c44:	e7dd      	b.n	b5c02 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b5c46:	7822      	ldrb	r2, [r4, #0]
   b5c48:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b5c4a:	7023      	strb	r3, [r4, #0]
}
   b5c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b5c4e:	7822      	ldrb	r2, [r4, #0]
   b5c50:	4053      	eors	r3, r2
   b5c52:	e7fa      	b.n	b5c4a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5c54:	000baf6c 	.word	0x000baf6c
   b5c58:	000baf74 	.word	0x000baf74

000b5c5c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5c5c:	b470      	push	{r4, r5, r6}
   b5c5e:	4614      	mov	r4, r2
  switch(rotation) {
   b5c60:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5c62:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b5c66:	2a02      	cmp	r2, #2
   b5c68:	d00d      	beq.n	b5c86 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b5c6a:	2a03      	cmp	r2, #3
   b5c6c:	d018      	beq.n	b5ca0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b5c6e:	2a01      	cmp	r2, #1
   b5c70:	d111      	bne.n	b5c96 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5c72:	8902      	ldrh	r2, [r0, #8]
   b5c74:	43e4      	mvns	r4, r4
   b5c76:	4414      	add	r4, r2
   b5c78:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5c7a:	9603      	str	r6, [sp, #12]
   b5c7c:	460a      	mov	r2, r1
   b5c7e:	4621      	mov	r1, r4
}
   b5c80:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5c82:	f7ff bf67 	b.w	b5b54 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b5c86:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b5c88:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b5c8a:	43e4      	mvns	r4, r4
    x -= (w-1);
   b5c8c:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b5c8e:	4414      	add	r4, r2
    x -= (w-1);
   b5c90:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b5c92:	b224      	sxth	r4, r4
    x -= (w-1);
   b5c94:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b5c96:	9603      	str	r6, [sp, #12]
   b5c98:	4622      	mov	r2, r4
}
   b5c9a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b5c9c:	f7ff bf16 	b.w	b5acc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b5ca0:	8945      	ldrh	r5, [r0, #10]
   b5ca2:	4419      	add	r1, r3
   b5ca4:	1a69      	subs	r1, r5, r1
   b5ca6:	b209      	sxth	r1, r1
    break;
   b5ca8:	e7e7      	b.n	b5c7a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b5caa <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5caa:	b430      	push	{r4, r5}
   b5cac:	4614      	mov	r4, r2
  switch(rotation) {
   b5cae:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5cb0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b5cb4:	2a02      	cmp	r2, #2
   b5cb6:	d00d      	beq.n	b5cd4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b5cb8:	2a03      	cmp	r2, #3
   b5cba:	d018      	beq.n	b5cee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5cbc:	2a01      	cmp	r2, #1
   b5cbe:	d111      	bne.n	b5ce4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b5cc0:	18e2      	adds	r2, r4, r3
   b5cc2:	8904      	ldrh	r4, [r0, #8]
   b5cc4:	1aa4      	subs	r4, r4, r2
   b5cc6:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5cc8:	9502      	str	r5, [sp, #8]
   b5cca:	460a      	mov	r2, r1
   b5ccc:	4621      	mov	r1, r4
}
   b5cce:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5cd0:	f7ff befc 	b.w	b5acc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b5cd4:	8902      	ldrh	r2, [r0, #8]
   b5cd6:	43c9      	mvns	r1, r1
   b5cd8:	4411      	add	r1, r2
    y -= (h-1);
   b5cda:	18e2      	adds	r2, r4, r3
   b5cdc:	8944      	ldrh	r4, [r0, #10]
   b5cde:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b5ce0:	b209      	sxth	r1, r1
    y -= (h-1);
   b5ce2:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b5ce4:	9502      	str	r5, [sp, #8]
   b5ce6:	4622      	mov	r2, r4
}
   b5ce8:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b5cea:	f7ff bf33 	b.w	b5b54 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b5cee:	8942      	ldrh	r2, [r0, #10]
   b5cf0:	43c9      	mvns	r1, r1
   b5cf2:	4411      	add	r1, r2
   b5cf4:	b209      	sxth	r1, r1
    break;
   b5cf6:	e7e7      	b.n	b5cc8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b5cf8 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5cfc:	4604      	mov	r4, r0
  TRANSACTION_START
   b5cfe:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b5d00:	2800      	cmp	r0, #0
   b5d02:	d042      	beq.n	b5d8a <_ZN16Adafruit_SSD13067displayEv+0x92>
   b5d04:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5d06:	f001 f8d3 	bl	b6eb0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b5d0a:	4947      	ldr	r1, [pc, #284]	; (b5e28 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b5d0c:	2205      	movs	r2, #5
   b5d0e:	4620      	mov	r0, r4
   b5d10:	f7ff fd27 	bl	b5762 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b5d14:	8921      	ldrh	r1, [r4, #8]
   b5d16:	3901      	subs	r1, #1
   b5d18:	4620      	mov	r0, r4
   b5d1a:	b2c9      	uxtb	r1, r1
   b5d1c:	f7ff fcb2 	bl	b5684 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5d20:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5d24:	1dde      	adds	r6, r3, #7
   b5d26:	bf48      	it	mi
   b5d28:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b5d2c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5d30:	8923      	ldrh	r3, [r4, #8]
   b5d32:	10f6      	asrs	r6, r6, #3
   b5d34:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b5d38:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b5d3c:	2800      	cmp	r0, #0
   b5d3e:	d03a      	beq.n	b5db6 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b5d40:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5d44:	f001 f8c2 	bl	b6ecc <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b5d48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5d4a:	6803      	ldr	r3, [r0, #0]
   b5d4c:	2140      	movs	r1, #64	; 0x40
   b5d4e:	689b      	ldr	r3, [r3, #8]
   b5d50:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5d52:	2701      	movs	r7, #1
    while(count--) {
   b5d54:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b5d56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b5d58:	d024      	beq.n	b5da4 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b5d5a:	2f1f      	cmp	r7, #31
   b5d5c:	d90c      	bls.n	b5d78 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b5d5e:	f001 f8bc 	bl	b6eda <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5d62:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5d66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5d68:	f001 f8b0 	bl	b6ecc <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b5d6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5d6e:	6803      	ldr	r3, [r0, #0]
   b5d70:	2140      	movs	r1, #64	; 0x40
   b5d72:	689b      	ldr	r3, [r3, #8]
   b5d74:	4798      	blx	r3
        bytesOut = 1;
   b5d76:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b5d78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5d7a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5d7e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5d80:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b5d82:	689b      	ldr	r3, [r3, #8]
   b5d84:	4798      	blx	r3
      bytesOut++;
   b5d86:	b2ff      	uxtb	r7, r7
    while(count--) {
   b5d88:	e7e4      	b.n	b5d54 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b5d8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5d8c:	b118      	cbz	r0, b5d96 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b5d8e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5d92:	f000 fb7b 	bl	b648c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5d96:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5d9a:	2100      	movs	r1, #0
   b5d9c:	b280      	uxth	r0, r0
   b5d9e:	f001 fcaa 	bl	b76f6 <digitalWrite>
   b5da2:	e7b2      	b.n	b5d0a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b5da4:	f001 f899 	bl	b6eda <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b5da8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5daa:	b378      	cbz	r0, b5e0c <_ZN16Adafruit_SSD13067displayEv+0x114>
   b5dac:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5dae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5db2:	f001 b87d 	b.w	b6eb0 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b5db6:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5dba:	2101      	movs	r1, #1
   b5dbc:	b280      	uxth	r0, r0
   b5dbe:	f001 fc9a 	bl	b76f6 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b5dc2:	42ae      	cmp	r6, r5
   b5dc4:	d0f0      	beq.n	b5da8 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b5dc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b5dc8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5dcc:	b118      	cbz	r0, b5dd6 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b5dce:	4649      	mov	r1, r9
   b5dd0:	f000 fbca 	bl	b6568 <_ZN8SPIClass8transferEh>
   b5dd4:	e7f5      	b.n	b5dc2 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b5dd6:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5dd8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5ddc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5de0:	ea09 0108 	and.w	r1, r9, r8
   b5de4:	b280      	uxth	r0, r0
   b5de6:	f001 fc86 	bl	b76f6 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5dea:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5dee:	2101      	movs	r1, #1
   b5df0:	b280      	uxth	r0, r0
   b5df2:	f001 fc80 	bl	b76f6 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5df6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5dfa:	2100      	movs	r1, #0
   b5dfc:	b280      	uxth	r0, r0
   b5dfe:	f001 fc7a 	bl	b76f6 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5e02:	3f01      	subs	r7, #1
   b5e04:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5e08:	d1e8      	bne.n	b5ddc <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b5e0a:	e7da      	b.n	b5dc2 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b5e0c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5e10:	2101      	movs	r1, #1
   b5e12:	b280      	uxth	r0, r0
   b5e14:	f001 fc6f 	bl	b76f6 <digitalWrite>
   b5e18:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5e1a:	b118      	cbz	r0, b5e24 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b5e1c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b5e20:	f000 bb1a 	b.w	b6458 <_ZN8SPIClass14endTransactionEv>
}
   b5e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5e28:	000baf98 	.word	0x000baf98

000b5e2c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5e2c:	b508      	push	{r3, lr}
   b5e2e:	4b02      	ldr	r3, [pc, #8]	; (b5e38 <netdb_freeaddrinfo+0xc>)
   b5e30:	681b      	ldr	r3, [r3, #0]
   b5e32:	689b      	ldr	r3, [r3, #8]
   b5e34:	9301      	str	r3, [sp, #4]
   b5e36:	bd08      	pop	{r3, pc}
   b5e38:	00030268 	.word	0x00030268

000b5e3c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5e3c:	b508      	push	{r3, lr}
   b5e3e:	4b02      	ldr	r3, [pc, #8]	; (b5e48 <netdb_getaddrinfo+0xc>)
   b5e40:	681b      	ldr	r3, [r3, #0]
   b5e42:	68db      	ldr	r3, [r3, #12]
   b5e44:	9301      	str	r3, [sp, #4]
   b5e46:	bd08      	pop	{r3, pc}
   b5e48:	00030268 	.word	0x00030268

000b5e4c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5e4c:	b508      	push	{r3, lr}
   b5e4e:	4b02      	ldr	r3, [pc, #8]	; (b5e58 <HAL_Pin_Mode+0xc>)
   b5e50:	681b      	ldr	r3, [r3, #0]
   b5e52:	689b      	ldr	r3, [r3, #8]
   b5e54:	9301      	str	r3, [sp, #4]
   b5e56:	bd08      	pop	{r3, pc}
   b5e58:	0003022c 	.word	0x0003022c

000b5e5c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5e5c:	b508      	push	{r3, lr}
   b5e5e:	4b02      	ldr	r3, [pc, #8]	; (b5e68 <HAL_Get_Pin_Mode+0xc>)
   b5e60:	681b      	ldr	r3, [r3, #0]
   b5e62:	68db      	ldr	r3, [r3, #12]
   b5e64:	9301      	str	r3, [sp, #4]
   b5e66:	bd08      	pop	{r3, pc}
   b5e68:	0003022c 	.word	0x0003022c

000b5e6c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5e6c:	b508      	push	{r3, lr}
   b5e6e:	4b02      	ldr	r3, [pc, #8]	; (b5e78 <HAL_GPIO_Write+0xc>)
   b5e70:	681b      	ldr	r3, [r3, #0]
   b5e72:	691b      	ldr	r3, [r3, #16]
   b5e74:	9301      	str	r3, [sp, #4]
   b5e76:	bd08      	pop	{r3, pc}
   b5e78:	0003022c 	.word	0x0003022c

000b5e7c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5e7c:	b508      	push	{r3, lr}
   b5e7e:	4b02      	ldr	r3, [pc, #8]	; (b5e88 <HAL_GPIO_Read+0xc>)
   b5e80:	681b      	ldr	r3, [r3, #0]
   b5e82:	695b      	ldr	r3, [r3, #20]
   b5e84:	9301      	str	r3, [sp, #4]
   b5e86:	bd08      	pop	{r3, pc}
   b5e88:	0003022c 	.word	0x0003022c

000b5e8c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5e8c:	b508      	push	{r3, lr}
   b5e8e:	4b02      	ldr	r3, [pc, #8]	; (b5e98 <if_index_to_name+0xc>)
   b5e90:	681b      	ldr	r3, [r3, #0]
   b5e92:	695b      	ldr	r3, [r3, #20]
   b5e94:	9301      	str	r3, [sp, #4]
   b5e96:	bd08      	pop	{r3, pc}
   b5e98:	0003026c 	.word	0x0003026c

000b5e9c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5e9c:	b508      	push	{r3, lr}
   b5e9e:	4b02      	ldr	r3, [pc, #8]	; (b5ea8 <HAL_RNG_GetRandomNumber+0xc>)
   b5ea0:	681b      	ldr	r3, [r3, #0]
   b5ea2:	685b      	ldr	r3, [r3, #4]
   b5ea4:	9301      	str	r3, [sp, #4]
   b5ea6:	bd08      	pop	{r3, pc}
   b5ea8:	00030218 	.word	0x00030218

000b5eac <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5eac:	b508      	push	{r3, lr}
   b5eae:	4b02      	ldr	r3, [pc, #8]	; (b5eb8 <HAL_Delay_Microseconds+0xc>)
   b5eb0:	681b      	ldr	r3, [r3, #0]
   b5eb2:	68db      	ldr	r3, [r3, #12]
   b5eb4:	9301      	str	r3, [sp, #4]
   b5eb6:	bd08      	pop	{r3, pc}
   b5eb8:	00030218 	.word	0x00030218

000b5ebc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5ebc:	b508      	push	{r3, lr}
   b5ebe:	4b02      	ldr	r3, [pc, #8]	; (b5ec8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5ec0:	681b      	ldr	r3, [r3, #0]
   b5ec2:	695b      	ldr	r3, [r3, #20]
   b5ec4:	9301      	str	r3, [sp, #4]
   b5ec6:	bd08      	pop	{r3, pc}
   b5ec8:	00030218 	.word	0x00030218

000b5ecc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5ecc:	b508      	push	{r3, lr}
   b5ece:	4b02      	ldr	r3, [pc, #8]	; (b5ed8 <os_mutex_create+0xc>)
   b5ed0:	681b      	ldr	r3, [r3, #0]
   b5ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5ed4:	9301      	str	r3, [sp, #4]
   b5ed6:	bd08      	pop	{r3, pc}
   b5ed8:	00030248 	.word	0x00030248

000b5edc <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b5edc:	b508      	push	{r3, lr}
   b5ede:	4b02      	ldr	r3, [pc, #8]	; (b5ee8 <os_mutex_destroy+0xc>)
   b5ee0:	681b      	ldr	r3, [r3, #0]
   b5ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5ee4:	9301      	str	r3, [sp, #4]
   b5ee6:	bd08      	pop	{r3, pc}
   b5ee8:	00030248 	.word	0x00030248

000b5eec <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b5eec:	b508      	push	{r3, lr}
   b5eee:	4b02      	ldr	r3, [pc, #8]	; (b5ef8 <os_mutex_lock+0xc>)
   b5ef0:	681b      	ldr	r3, [r3, #0]
   b5ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5ef4:	9301      	str	r3, [sp, #4]
   b5ef6:	bd08      	pop	{r3, pc}
   b5ef8:	00030248 	.word	0x00030248

000b5efc <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b5efc:	b508      	push	{r3, lr}
   b5efe:	4b02      	ldr	r3, [pc, #8]	; (b5f08 <os_mutex_unlock+0xc>)
   b5f00:	681b      	ldr	r3, [r3, #0]
   b5f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f04:	9301      	str	r3, [sp, #4]
   b5f06:	bd08      	pop	{r3, pc}
   b5f08:	00030248 	.word	0x00030248

000b5f0c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5f0c:	b508      	push	{r3, lr}
   b5f0e:	4b02      	ldr	r3, [pc, #8]	; (b5f18 <os_mutex_recursive_create+0xc>)
   b5f10:	681b      	ldr	r3, [r3, #0]
   b5f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5f14:	9301      	str	r3, [sp, #4]
   b5f16:	bd08      	pop	{r3, pc}
   b5f18:	00030248 	.word	0x00030248

000b5f1c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5f1c:	b508      	push	{r3, lr}
   b5f1e:	4b02      	ldr	r3, [pc, #8]	; (b5f28 <inet_inet_ntop+0xc>)
   b5f20:	681b      	ldr	r3, [r3, #0]
   b5f22:	695b      	ldr	r3, [r3, #20]
   b5f24:	9301      	str	r3, [sp, #4]
   b5f26:	bd08      	pop	{r3, pc}
   b5f28:	00030264 	.word	0x00030264

000b5f2c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5f2c:	b508      	push	{r3, lr}
   b5f2e:	4b02      	ldr	r3, [pc, #8]	; (b5f38 <inet_htonl+0xc>)
   b5f30:	681b      	ldr	r3, [r3, #0]
   b5f32:	6a1b      	ldr	r3, [r3, #32]
   b5f34:	9301      	str	r3, [sp, #4]
   b5f36:	bd08      	pop	{r3, pc}
   b5f38:	00030264 	.word	0x00030264

000b5f3c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5f3c:	b508      	push	{r3, lr}
   b5f3e:	4b02      	ldr	r3, [pc, #8]	; (b5f48 <inet_htons+0xc>)
   b5f40:	681b      	ldr	r3, [r3, #0]
   b5f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f44:	9301      	str	r3, [sp, #4]
   b5f46:	bd08      	pop	{r3, pc}
   b5f48:	00030264 	.word	0x00030264

000b5f4c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5f4c:	b508      	push	{r3, lr}
   b5f4e:	4b02      	ldr	r3, [pc, #8]	; (b5f58 <hal_usart_write+0xc>)
   b5f50:	681b      	ldr	r3, [r3, #0]
   b5f52:	68db      	ldr	r3, [r3, #12]
   b5f54:	9301      	str	r3, [sp, #4]
   b5f56:	bd08      	pop	{r3, pc}
   b5f58:	0003023c 	.word	0x0003023c

000b5f5c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5f5c:	b508      	push	{r3, lr}
   b5f5e:	4b02      	ldr	r3, [pc, #8]	; (b5f68 <hal_usart_available+0xc>)
   b5f60:	681b      	ldr	r3, [r3, #0]
   b5f62:	691b      	ldr	r3, [r3, #16]
   b5f64:	9301      	str	r3, [sp, #4]
   b5f66:	bd08      	pop	{r3, pc}
   b5f68:	0003023c 	.word	0x0003023c

000b5f6c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5f6c:	b508      	push	{r3, lr}
   b5f6e:	4b02      	ldr	r3, [pc, #8]	; (b5f78 <hal_usart_read+0xc>)
   b5f70:	681b      	ldr	r3, [r3, #0]
   b5f72:	695b      	ldr	r3, [r3, #20]
   b5f74:	9301      	str	r3, [sp, #4]
   b5f76:	bd08      	pop	{r3, pc}
   b5f78:	0003023c 	.word	0x0003023c

000b5f7c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5f7c:	b508      	push	{r3, lr}
   b5f7e:	4b02      	ldr	r3, [pc, #8]	; (b5f88 <hal_usart_peek+0xc>)
   b5f80:	681b      	ldr	r3, [r3, #0]
   b5f82:	699b      	ldr	r3, [r3, #24]
   b5f84:	9301      	str	r3, [sp, #4]
   b5f86:	bd08      	pop	{r3, pc}
   b5f88:	0003023c 	.word	0x0003023c

000b5f8c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5f8c:	b508      	push	{r3, lr}
   b5f8e:	4b02      	ldr	r3, [pc, #8]	; (b5f98 <hal_usart_flush+0xc>)
   b5f90:	681b      	ldr	r3, [r3, #0]
   b5f92:	69db      	ldr	r3, [r3, #28]
   b5f94:	9301      	str	r3, [sp, #4]
   b5f96:	bd08      	pop	{r3, pc}
   b5f98:	0003023c 	.word	0x0003023c

000b5f9c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5f9c:	b508      	push	{r3, lr}
   b5f9e:	4b02      	ldr	r3, [pc, #8]	; (b5fa8 <hal_usart_is_enabled+0xc>)
   b5fa0:	681b      	ldr	r3, [r3, #0]
   b5fa2:	6a1b      	ldr	r3, [r3, #32]
   b5fa4:	9301      	str	r3, [sp, #4]
   b5fa6:	bd08      	pop	{r3, pc}
   b5fa8:	0003023c 	.word	0x0003023c

000b5fac <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5fac:	b508      	push	{r3, lr}
   b5fae:	4b02      	ldr	r3, [pc, #8]	; (b5fb8 <hal_usart_available_data_for_write+0xc>)
   b5fb0:	681b      	ldr	r3, [r3, #0]
   b5fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5fb4:	9301      	str	r3, [sp, #4]
   b5fb6:	bd08      	pop	{r3, pc}
   b5fb8:	0003023c 	.word	0x0003023c

000b5fbc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5fbc:	b508      	push	{r3, lr}
   b5fbe:	4b02      	ldr	r3, [pc, #8]	; (b5fc8 <hal_usart_init_ex+0xc>)
   b5fc0:	681b      	ldr	r3, [r3, #0]
   b5fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5fc4:	9301      	str	r3, [sp, #4]
   b5fc6:	bd08      	pop	{r3, pc}
   b5fc8:	0003023c 	.word	0x0003023c

000b5fcc <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b5fcc:	b508      	push	{r3, lr}
   b5fce:	4b02      	ldr	r3, [pc, #8]	; (b5fd8 <hal_i2c_set_speed+0xc>)
   b5fd0:	681b      	ldr	r3, [r3, #0]
   b5fd2:	681b      	ldr	r3, [r3, #0]
   b5fd4:	9301      	str	r3, [sp, #4]
   b5fd6:	bd08      	pop	{r3, pc}
   b5fd8:	00030228 	.word	0x00030228

000b5fdc <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5fdc:	b508      	push	{r3, lr}
   b5fde:	4b02      	ldr	r3, [pc, #8]	; (b5fe8 <hal_i2c_begin+0xc>)
   b5fe0:	681b      	ldr	r3, [r3, #0]
   b5fe2:	68db      	ldr	r3, [r3, #12]
   b5fe4:	9301      	str	r3, [sp, #4]
   b5fe6:	bd08      	pop	{r3, pc}
   b5fe8:	00030228 	.word	0x00030228

000b5fec <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5fec:	b508      	push	{r3, lr}
   b5fee:	4b02      	ldr	r3, [pc, #8]	; (b5ff8 <hal_i2c_begin_transmission+0xc>)
   b5ff0:	681b      	ldr	r3, [r3, #0]
   b5ff2:	699b      	ldr	r3, [r3, #24]
   b5ff4:	9301      	str	r3, [sp, #4]
   b5ff6:	bd08      	pop	{r3, pc}
   b5ff8:	00030228 	.word	0x00030228

000b5ffc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5ffc:	b508      	push	{r3, lr}
   b5ffe:	4b02      	ldr	r3, [pc, #8]	; (b6008 <hal_i2c_end_transmission+0xc>)
   b6000:	681b      	ldr	r3, [r3, #0]
   b6002:	69db      	ldr	r3, [r3, #28]
   b6004:	9301      	str	r3, [sp, #4]
   b6006:	bd08      	pop	{r3, pc}
   b6008:	00030228 	.word	0x00030228

000b600c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b600c:	b508      	push	{r3, lr}
   b600e:	4b02      	ldr	r3, [pc, #8]	; (b6018 <hal_i2c_write+0xc>)
   b6010:	681b      	ldr	r3, [r3, #0]
   b6012:	6a1b      	ldr	r3, [r3, #32]
   b6014:	9301      	str	r3, [sp, #4]
   b6016:	bd08      	pop	{r3, pc}
   b6018:	00030228 	.word	0x00030228

000b601c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b601c:	b508      	push	{r3, lr}
   b601e:	4b02      	ldr	r3, [pc, #8]	; (b6028 <hal_i2c_available+0xc>)
   b6020:	681b      	ldr	r3, [r3, #0]
   b6022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6024:	9301      	str	r3, [sp, #4]
   b6026:	bd08      	pop	{r3, pc}
   b6028:	00030228 	.word	0x00030228

000b602c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b602c:	b508      	push	{r3, lr}
   b602e:	4b02      	ldr	r3, [pc, #8]	; (b6038 <hal_i2c_read+0xc>)
   b6030:	681b      	ldr	r3, [r3, #0]
   b6032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6034:	9301      	str	r3, [sp, #4]
   b6036:	bd08      	pop	{r3, pc}
   b6038:	00030228 	.word	0x00030228

000b603c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b603c:	b508      	push	{r3, lr}
   b603e:	4b02      	ldr	r3, [pc, #8]	; (b6048 <hal_i2c_peek+0xc>)
   b6040:	681b      	ldr	r3, [r3, #0]
   b6042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6044:	9301      	str	r3, [sp, #4]
   b6046:	bd08      	pop	{r3, pc}
   b6048:	00030228 	.word	0x00030228

000b604c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b604c:	b508      	push	{r3, lr}
   b604e:	4b02      	ldr	r3, [pc, #8]	; (b6058 <hal_i2c_flush+0xc>)
   b6050:	681b      	ldr	r3, [r3, #0]
   b6052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6054:	9301      	str	r3, [sp, #4]
   b6056:	bd08      	pop	{r3, pc}
   b6058:	00030228 	.word	0x00030228

000b605c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b605c:	b508      	push	{r3, lr}
   b605e:	4b02      	ldr	r3, [pc, #8]	; (b6068 <hal_i2c_is_enabled+0xc>)
   b6060:	681b      	ldr	r3, [r3, #0]
   b6062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6064:	9301      	str	r3, [sp, #4]
   b6066:	bd08      	pop	{r3, pc}
   b6068:	00030228 	.word	0x00030228

000b606c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b606c:	b508      	push	{r3, lr}
   b606e:	4b02      	ldr	r3, [pc, #8]	; (b6078 <hal_i2c_init+0xc>)
   b6070:	681b      	ldr	r3, [r3, #0]
   b6072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6074:	9301      	str	r3, [sp, #4]
   b6076:	bd08      	pop	{r3, pc}
   b6078:	00030228 	.word	0x00030228

000b607c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b607c:	b508      	push	{r3, lr}
   b607e:	4b02      	ldr	r3, [pc, #8]	; (b6088 <sock_setsockopt+0xc>)
   b6080:	681b      	ldr	r3, [r3, #0]
   b6082:	699b      	ldr	r3, [r3, #24]
   b6084:	9301      	str	r3, [sp, #4]
   b6086:	bd08      	pop	{r3, pc}
   b6088:	00030238 	.word	0x00030238

000b608c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b608c:	b508      	push	{r3, lr}
   b608e:	4b02      	ldr	r3, [pc, #8]	; (b6098 <sock_close+0xc>)
   b6090:	681b      	ldr	r3, [r3, #0]
   b6092:	69db      	ldr	r3, [r3, #28]
   b6094:	9301      	str	r3, [sp, #4]
   b6096:	bd08      	pop	{r3, pc}
   b6098:	00030238 	.word	0x00030238

000b609c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b609c:	b508      	push	{r3, lr}
   b609e:	4b02      	ldr	r3, [pc, #8]	; (b60a8 <sock_connect+0xc>)
   b60a0:	681b      	ldr	r3, [r3, #0]
   b60a2:	6a1b      	ldr	r3, [r3, #32]
   b60a4:	9301      	str	r3, [sp, #4]
   b60a6:	bd08      	pop	{r3, pc}
   b60a8:	00030238 	.word	0x00030238

000b60ac <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b60ac:	b508      	push	{r3, lr}
   b60ae:	4b02      	ldr	r3, [pc, #8]	; (b60b8 <sock_recv+0xc>)
   b60b0:	681b      	ldr	r3, [r3, #0]
   b60b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b60b4:	9301      	str	r3, [sp, #4]
   b60b6:	bd08      	pop	{r3, pc}
   b60b8:	00030238 	.word	0x00030238

000b60bc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b60bc:	b508      	push	{r3, lr}
   b60be:	4b02      	ldr	r3, [pc, #8]	; (b60c8 <sock_send+0xc>)
   b60c0:	681b      	ldr	r3, [r3, #0]
   b60c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b60c4:	9301      	str	r3, [sp, #4]
   b60c6:	bd08      	pop	{r3, pc}
   b60c8:	00030238 	.word	0x00030238

000b60cc <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b60cc:	b508      	push	{r3, lr}
   b60ce:	4b02      	ldr	r3, [pc, #8]	; (b60d8 <sock_socket+0xc>)
   b60d0:	681b      	ldr	r3, [r3, #0]
   b60d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b60d4:	9301      	str	r3, [sp, #4]
   b60d6:	bd08      	pop	{r3, pc}
   b60d8:	00030238 	.word	0x00030238

000b60dc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b60dc:	b508      	push	{r3, lr}
   b60de:	4b02      	ldr	r3, [pc, #8]	; (b60e8 <hal_spi_begin+0xc>)
   b60e0:	681b      	ldr	r3, [r3, #0]
   b60e2:	681b      	ldr	r3, [r3, #0]
   b60e4:	9301      	str	r3, [sp, #4]
   b60e6:	bd08      	pop	{r3, pc}
   b60e8:	00030230 	.word	0x00030230

000b60ec <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b60ec:	b508      	push	{r3, lr}
   b60ee:	4b02      	ldr	r3, [pc, #8]	; (b60f8 <hal_spi_transfer+0xc>)
   b60f0:	681b      	ldr	r3, [r3, #0]
   b60f2:	695b      	ldr	r3, [r3, #20]
   b60f4:	9301      	str	r3, [sp, #4]
   b60f6:	bd08      	pop	{r3, pc}
   b60f8:	00030230 	.word	0x00030230

000b60fc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b60fc:	b508      	push	{r3, lr}
   b60fe:	4b02      	ldr	r3, [pc, #8]	; (b6108 <hal_spi_init+0xc>)
   b6100:	681b      	ldr	r3, [r3, #0]
   b6102:	69db      	ldr	r3, [r3, #28]
   b6104:	9301      	str	r3, [sp, #4]
   b6106:	bd08      	pop	{r3, pc}
   b6108:	00030230 	.word	0x00030230

000b610c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b610c:	b508      	push	{r3, lr}
   b610e:	4b02      	ldr	r3, [pc, #8]	; (b6118 <hal_spi_is_enabled+0xc>)
   b6110:	681b      	ldr	r3, [r3, #0]
   b6112:	6a1b      	ldr	r3, [r3, #32]
   b6114:	9301      	str	r3, [sp, #4]
   b6116:	bd08      	pop	{r3, pc}
   b6118:	00030230 	.word	0x00030230

000b611c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b611c:	b508      	push	{r3, lr}
   b611e:	4b02      	ldr	r3, [pc, #8]	; (b6128 <hal_spi_info+0xc>)
   b6120:	681b      	ldr	r3, [r3, #0]
   b6122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6124:	9301      	str	r3, [sp, #4]
   b6126:	bd08      	pop	{r3, pc}
   b6128:	00030230 	.word	0x00030230

000b612c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b612c:	b508      	push	{r3, lr}
   b612e:	4b02      	ldr	r3, [pc, #8]	; (b6138 <hal_spi_set_settings+0xc>)
   b6130:	681b      	ldr	r3, [r3, #0]
   b6132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6134:	9301      	str	r3, [sp, #4]
   b6136:	bd08      	pop	{r3, pc}
   b6138:	00030230 	.word	0x00030230

000b613c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b613c:	b508      	push	{r3, lr}
   b613e:	4b02      	ldr	r3, [pc, #8]	; (b6148 <hal_spi_acquire+0xc>)
   b6140:	681b      	ldr	r3, [r3, #0]
   b6142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6144:	9301      	str	r3, [sp, #4]
   b6146:	bd08      	pop	{r3, pc}
   b6148:	00030230 	.word	0x00030230

000b614c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b614c:	b508      	push	{r3, lr}
   b614e:	4b02      	ldr	r3, [pc, #8]	; (b6158 <hal_spi_release+0xc>)
   b6150:	681b      	ldr	r3, [r3, #0]
   b6152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6154:	9301      	str	r3, [sp, #4]
   b6156:	bd08      	pop	{r3, pc}
   b6158:	00030230 	.word	0x00030230

000b615c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b615c:	b508      	push	{r3, lr}
   b615e:	4b02      	ldr	r3, [pc, #8]	; (b6168 <HAL_USB_USART_Init+0xc>)
   b6160:	681b      	ldr	r3, [r3, #0]
   b6162:	681b      	ldr	r3, [r3, #0]
   b6164:	9301      	str	r3, [sp, #4]
   b6166:	bd08      	pop	{r3, pc}
   b6168:	0003024c 	.word	0x0003024c

000b616c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b616c:	b508      	push	{r3, lr}
   b616e:	4b02      	ldr	r3, [pc, #8]	; (b6178 <HAL_USB_USART_Available_Data+0xc>)
   b6170:	681b      	ldr	r3, [r3, #0]
   b6172:	691b      	ldr	r3, [r3, #16]
   b6174:	9301      	str	r3, [sp, #4]
   b6176:	bd08      	pop	{r3, pc}
   b6178:	0003024c 	.word	0x0003024c

000b617c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b617c:	b508      	push	{r3, lr}
   b617e:	4b02      	ldr	r3, [pc, #8]	; (b6188 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6180:	681b      	ldr	r3, [r3, #0]
   b6182:	695b      	ldr	r3, [r3, #20]
   b6184:	9301      	str	r3, [sp, #4]
   b6186:	bd08      	pop	{r3, pc}
   b6188:	0003024c 	.word	0x0003024c

000b618c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b618c:	b508      	push	{r3, lr}
   b618e:	4b02      	ldr	r3, [pc, #8]	; (b6198 <HAL_USB_USART_Receive_Data+0xc>)
   b6190:	681b      	ldr	r3, [r3, #0]
   b6192:	699b      	ldr	r3, [r3, #24]
   b6194:	9301      	str	r3, [sp, #4]
   b6196:	bd08      	pop	{r3, pc}
   b6198:	0003024c 	.word	0x0003024c

000b619c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b619c:	b508      	push	{r3, lr}
   b619e:	4b02      	ldr	r3, [pc, #8]	; (b61a8 <HAL_USB_USART_Send_Data+0xc>)
   b61a0:	681b      	ldr	r3, [r3, #0]
   b61a2:	69db      	ldr	r3, [r3, #28]
   b61a4:	9301      	str	r3, [sp, #4]
   b61a6:	bd08      	pop	{r3, pc}
   b61a8:	0003024c 	.word	0x0003024c

000b61ac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b61ac:	b508      	push	{r3, lr}
   b61ae:	4b02      	ldr	r3, [pc, #8]	; (b61b8 <HAL_USB_USART_Flush_Data+0xc>)
   b61b0:	681b      	ldr	r3, [r3, #0]
   b61b2:	6a1b      	ldr	r3, [r3, #32]
   b61b4:	9301      	str	r3, [sp, #4]
   b61b6:	bd08      	pop	{r3, pc}
   b61b8:	0003024c 	.word	0x0003024c

000b61bc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b61bc:	b508      	push	{r3, lr}
   b61be:	4b02      	ldr	r3, [pc, #8]	; (b61c8 <panic_+0xc>)
   b61c0:	681b      	ldr	r3, [r3, #0]
   b61c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b61c4:	9301      	str	r3, [sp, #4]
   b61c6:	bd08      	pop	{r3, pc}
   b61c8:	00030260 	.word	0x00030260

000b61cc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b61cc:	b508      	push	{r3, lr}
   b61ce:	4b02      	ldr	r3, [pc, #8]	; (b61d8 <log_message+0xc>)
   b61d0:	681b      	ldr	r3, [r3, #0]
   b61d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b61d4:	9301      	str	r3, [sp, #4]
   b61d6:	bd08      	pop	{r3, pc}
   b61d8:	00030260 	.word	0x00030260

000b61dc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b61dc:	b508      	push	{r3, lr}
   b61de:	4b02      	ldr	r3, [pc, #8]	; (b61e8 <set_system_mode+0xc>)
   b61e0:	681b      	ldr	r3, [r3, #0]
   b61e2:	685b      	ldr	r3, [r3, #4]
   b61e4:	9301      	str	r3, [sp, #4]
   b61e6:	bd08      	pop	{r3, pc}
   b61e8:	00030220 	.word	0x00030220

000b61ec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b61ec:	b508      	push	{r3, lr}
   b61ee:	4b02      	ldr	r3, [pc, #8]	; (b61f8 <system_delay_ms+0xc>)
   b61f0:	681b      	ldr	r3, [r3, #0]
   b61f2:	695b      	ldr	r3, [r3, #20]
   b61f4:	9301      	str	r3, [sp, #4]
   b61f6:	bd08      	pop	{r3, pc}
   b61f8:	00030220 	.word	0x00030220

000b61fc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b61fc:	b508      	push	{r3, lr}
   b61fe:	4b02      	ldr	r3, [pc, #8]	; (b6208 <system_thread_set_state+0xc>)
   b6200:	681b      	ldr	r3, [r3, #0]
   b6202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6204:	9301      	str	r3, [sp, #4]
   b6206:	bd08      	pop	{r3, pc}
   b6208:	00030220 	.word	0x00030220

000b620c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b620c:	b508      	push	{r3, lr}
   b620e:	4b03      	ldr	r3, [pc, #12]	; (b621c <system_ctrl_set_app_request_handler+0x10>)
   b6210:	681b      	ldr	r3, [r3, #0]
   b6212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6216:	9301      	str	r3, [sp, #4]
   b6218:	bd08      	pop	{r3, pc}
   b621a:	0000      	.short	0x0000
   b621c:	00030220 	.word	0x00030220

000b6220 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6220:	b508      	push	{r3, lr}
   b6222:	4b03      	ldr	r3, [pc, #12]	; (b6230 <system_ctrl_set_result+0x10>)
   b6224:	681b      	ldr	r3, [r3, #0]
   b6226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b622a:	9301      	str	r3, [sp, #4]
   b622c:	bd08      	pop	{r3, pc}
   b622e:	0000      	.short	0x0000
   b6230:	00030220 	.word	0x00030220

000b6234 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6234:	b508      	push	{r3, lr}
   b6236:	4b02      	ldr	r3, [pc, #8]	; (b6240 <network_connect+0xc>)
   b6238:	681b      	ldr	r3, [r3, #0]
   b623a:	685b      	ldr	r3, [r3, #4]
   b623c:	9301      	str	r3, [sp, #4]
   b623e:	bd08      	pop	{r3, pc}
   b6240:	00030240 	.word	0x00030240

000b6244 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6244:	b508      	push	{r3, lr}
   b6246:	4b02      	ldr	r3, [pc, #8]	; (b6250 <network_connecting+0xc>)
   b6248:	681b      	ldr	r3, [r3, #0]
   b624a:	689b      	ldr	r3, [r3, #8]
   b624c:	9301      	str	r3, [sp, #4]
   b624e:	bd08      	pop	{r3, pc}
   b6250:	00030240 	.word	0x00030240

000b6254 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6254:	b508      	push	{r3, lr}
   b6256:	4b02      	ldr	r3, [pc, #8]	; (b6260 <network_disconnect+0xc>)
   b6258:	681b      	ldr	r3, [r3, #0]
   b625a:	68db      	ldr	r3, [r3, #12]
   b625c:	9301      	str	r3, [sp, #4]
   b625e:	bd08      	pop	{r3, pc}
   b6260:	00030240 	.word	0x00030240

000b6264 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6264:	b508      	push	{r3, lr}
   b6266:	4b02      	ldr	r3, [pc, #8]	; (b6270 <network_ready+0xc>)
   b6268:	681b      	ldr	r3, [r3, #0]
   b626a:	691b      	ldr	r3, [r3, #16]
   b626c:	9301      	str	r3, [sp, #4]
   b626e:	bd08      	pop	{r3, pc}
   b6270:	00030240 	.word	0x00030240

000b6274 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6274:	b508      	push	{r3, lr}
   b6276:	4b02      	ldr	r3, [pc, #8]	; (b6280 <network_on+0xc>)
   b6278:	681b      	ldr	r3, [r3, #0]
   b627a:	695b      	ldr	r3, [r3, #20]
   b627c:	9301      	str	r3, [sp, #4]
   b627e:	bd08      	pop	{r3, pc}
   b6280:	00030240 	.word	0x00030240

000b6284 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6284:	b508      	push	{r3, lr}
   b6286:	4b02      	ldr	r3, [pc, #8]	; (b6290 <network_off+0xc>)
   b6288:	681b      	ldr	r3, [r3, #0]
   b628a:	699b      	ldr	r3, [r3, #24]
   b628c:	9301      	str	r3, [sp, #4]
   b628e:	bd08      	pop	{r3, pc}
   b6290:	00030240 	.word	0x00030240

000b6294 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6294:	b508      	push	{r3, lr}
   b6296:	4b02      	ldr	r3, [pc, #8]	; (b62a0 <network_listen+0xc>)
   b6298:	681b      	ldr	r3, [r3, #0]
   b629a:	69db      	ldr	r3, [r3, #28]
   b629c:	9301      	str	r3, [sp, #4]
   b629e:	bd08      	pop	{r3, pc}
   b62a0:	00030240 	.word	0x00030240

000b62a4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b62a4:	b508      	push	{r3, lr}
   b62a6:	4b02      	ldr	r3, [pc, #8]	; (b62b0 <network_listening+0xc>)
   b62a8:	681b      	ldr	r3, [r3, #0]
   b62aa:	6a1b      	ldr	r3, [r3, #32]
   b62ac:	9301      	str	r3, [sp, #4]
   b62ae:	bd08      	pop	{r3, pc}
   b62b0:	00030240 	.word	0x00030240

000b62b4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b62b4:	b508      	push	{r3, lr}
   b62b6:	4b02      	ldr	r3, [pc, #8]	; (b62c0 <network_set_listen_timeout+0xc>)
   b62b8:	681b      	ldr	r3, [r3, #0]
   b62ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b62bc:	9301      	str	r3, [sp, #4]
   b62be:	bd08      	pop	{r3, pc}
   b62c0:	00030240 	.word	0x00030240

000b62c4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b62c4:	b508      	push	{r3, lr}
   b62c6:	4b02      	ldr	r3, [pc, #8]	; (b62d0 <network_get_listen_timeout+0xc>)
   b62c8:	681b      	ldr	r3, [r3, #0]
   b62ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b62cc:	9301      	str	r3, [sp, #4]
   b62ce:	bd08      	pop	{r3, pc}
   b62d0:	00030240 	.word	0x00030240

000b62d4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b62d4:	b508      	push	{r3, lr}
   b62d6:	4b02      	ldr	r3, [pc, #8]	; (b62e0 <network_is_on+0xc>)
   b62d8:	681b      	ldr	r3, [r3, #0]
   b62da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b62dc:	9301      	str	r3, [sp, #4]
   b62de:	bd08      	pop	{r3, pc}
   b62e0:	00030240 	.word	0x00030240

000b62e4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b62e4:	b508      	push	{r3, lr}
   b62e6:	4b02      	ldr	r3, [pc, #8]	; (b62f0 <network_is_off+0xc>)
   b62e8:	681b      	ldr	r3, [r3, #0]
   b62ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b62ec:	9301      	str	r3, [sp, #4]
   b62ee:	bd08      	pop	{r3, pc}
   b62f0:	00030240 	.word	0x00030240

000b62f4 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b62f4:	b508      	push	{r3, lr}
   b62f6:	4b02      	ldr	r3, [pc, #8]	; (b6300 <spark_deviceID+0xc>)
   b62f8:	681b      	ldr	r3, [r3, #0]
   b62fa:	69db      	ldr	r3, [r3, #28]
   b62fc:	9301      	str	r3, [sp, #4]
   b62fe:	bd08      	pop	{r3, pc}
   b6300:	00030244 	.word	0x00030244

000b6304 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6304:	b508      	push	{r3, lr}
   b6306:	4b02      	ldr	r3, [pc, #8]	; (b6310 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6308:	681b      	ldr	r3, [r3, #0]
   b630a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b630c:	9301      	str	r3, [sp, #4]
   b630e:	bd08      	pop	{r3, pc}
   b6310:	00030244 	.word	0x00030244

000b6314 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6314:	b508      	push	{r3, lr}
   b6316:	4b02      	ldr	r3, [pc, #8]	; (b6320 <malloc+0xc>)
   b6318:	681b      	ldr	r3, [r3, #0]
   b631a:	681b      	ldr	r3, [r3, #0]
   b631c:	9301      	str	r3, [sp, #4]
   b631e:	bd08      	pop	{r3, pc}
   b6320:	0003021c 	.word	0x0003021c

000b6324 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6324:	b508      	push	{r3, lr}
   b6326:	4b02      	ldr	r3, [pc, #8]	; (b6330 <free+0xc>)
   b6328:	681b      	ldr	r3, [r3, #0]
   b632a:	685b      	ldr	r3, [r3, #4]
   b632c:	9301      	str	r3, [sp, #4]
   b632e:	bd08      	pop	{r3, pc}
   b6330:	0003021c 	.word	0x0003021c

000b6334 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6334:	b508      	push	{r3, lr}
   b6336:	4b02      	ldr	r3, [pc, #8]	; (b6340 <realloc+0xc>)
   b6338:	681b      	ldr	r3, [r3, #0]
   b633a:	689b      	ldr	r3, [r3, #8]
   b633c:	9301      	str	r3, [sp, #4]
   b633e:	bd08      	pop	{r3, pc}
   b6340:	0003021c 	.word	0x0003021c

000b6344 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6344:	b508      	push	{r3, lr}
   b6346:	4b02      	ldr	r3, [pc, #8]	; (b6350 <vsnprintf+0xc>)
   b6348:	681b      	ldr	r3, [r3, #0]
   b634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b634c:	9301      	str	r3, [sp, #4]
   b634e:	bd08      	pop	{r3, pc}
   b6350:	0003021c 	.word	0x0003021c

000b6354 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6354:	b508      	push	{r3, lr}
   b6356:	4b02      	ldr	r3, [pc, #8]	; (b6360 <_malloc_r+0xc>)
   b6358:	681b      	ldr	r3, [r3, #0]
   b635a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b635c:	9301      	str	r3, [sp, #4]
   b635e:	bd08      	pop	{r3, pc}
   b6360:	0003021c 	.word	0x0003021c

000b6364 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6364:	b508      	push	{r3, lr}
   b6366:	4b02      	ldr	r3, [pc, #8]	; (b6370 <__errno+0xc>)
   b6368:	681b      	ldr	r3, [r3, #0]
   b636a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b636c:	9301      	str	r3, [sp, #4]
   b636e:	bd08      	pop	{r3, pc}
   b6370:	0003021c 	.word	0x0003021c

000b6374 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6374:	b508      	push	{r3, lr}
   b6376:	4b02      	ldr	r3, [pc, #8]	; (b6380 <__assert_func+0xc>)
   b6378:	681b      	ldr	r3, [r3, #0]
   b637a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b637c:	9301      	str	r3, [sp, #4]
   b637e:	bd08      	pop	{r3, pc}
   b6380:	0003021c 	.word	0x0003021c

000b6384 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6384:	b508      	push	{r3, lr}
   b6386:	4b02      	ldr	r3, [pc, #8]	; (b6390 <newlib_impure_ptr_callback+0xc>)
   b6388:	681b      	ldr	r3, [r3, #0]
   b638a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b638c:	9301      	str	r3, [sp, #4]
   b638e:	bd08      	pop	{r3, pc}
   b6390:	0003021c 	.word	0x0003021c

000b6394 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6394:	2200      	movs	r2, #0
   b6396:	6840      	ldr	r0, [r0, #4]
   b6398:	4611      	mov	r1, r2
   b639a:	f7ff bf83 	b.w	b62a4 <network_listening>

000b639e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b639e:	2200      	movs	r2, #0
   b63a0:	6840      	ldr	r0, [r0, #4]
   b63a2:	4611      	mov	r1, r2
   b63a4:	f7ff bf8e 	b.w	b62c4 <network_get_listen_timeout>

000b63a8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b63a8:	6840      	ldr	r0, [r0, #4]
   b63aa:	2200      	movs	r2, #0
   b63ac:	f7ff bf82 	b.w	b62b4 <network_set_listen_timeout>

000b63b0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b63b0:	6840      	ldr	r0, [r0, #4]
   b63b2:	2200      	movs	r2, #0
   b63b4:	f081 0101 	eor.w	r1, r1, #1
   b63b8:	f7ff bf6c 	b.w	b6294 <network_listen>

000b63bc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b63bc:	2300      	movs	r3, #0
   b63be:	6840      	ldr	r0, [r0, #4]
   b63c0:	461a      	mov	r2, r3
   b63c2:	4619      	mov	r1, r3
   b63c4:	f7ff bf5e 	b.w	b6284 <network_off>

000b63c8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b63c8:	2300      	movs	r3, #0
   b63ca:	6840      	ldr	r0, [r0, #4]
   b63cc:	461a      	mov	r2, r3
   b63ce:	4619      	mov	r1, r3
   b63d0:	f7ff bf50 	b.w	b6274 <network_on>

000b63d4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b63d4:	2200      	movs	r2, #0
   b63d6:	6840      	ldr	r0, [r0, #4]
   b63d8:	4611      	mov	r1, r2
   b63da:	f7ff bf43 	b.w	b6264 <network_ready>

000b63de <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b63de:	2200      	movs	r2, #0
   b63e0:	6840      	ldr	r0, [r0, #4]
   b63e2:	4611      	mov	r1, r2
   b63e4:	f7ff bf2e 	b.w	b6244 <network_connecting>

000b63e8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b63e8:	6840      	ldr	r0, [r0, #4]
   b63ea:	2200      	movs	r2, #0
   b63ec:	2102      	movs	r1, #2
   b63ee:	f7ff bf31 	b.w	b6254 <network_disconnect>

000b63f2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b63f2:	2300      	movs	r3, #0
   b63f4:	6840      	ldr	r0, [r0, #4]
   b63f6:	461a      	mov	r2, r3
   b63f8:	f7ff bf1c 	b.w	b6234 <network_connect>

000b63fc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b63fc:	4b02      	ldr	r3, [pc, #8]	; (b6408 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b63fe:	2203      	movs	r2, #3
   b6400:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6402:	4a02      	ldr	r2, [pc, #8]	; (b640c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6404:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6406:	4770      	bx	lr
   b6408:	2003e6c4 	.word	0x2003e6c4
   b640c:	000bafa8 	.word	0x000bafa8

000b6410 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6410:	2100      	movs	r1, #0
   b6412:	f7ff be9b 	b.w	b614c <hal_spi_release>

000b6416 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6416:	2100      	movs	r1, #0
   b6418:	f7ff be90 	b.w	b613c <hal_spi_acquire>

000b641c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b641c:	b510      	push	{r4, lr}
   b641e:	4604      	mov	r4, r0
   b6420:	4608      	mov	r0, r1
{
    _spi = spi;
   b6422:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6424:	f7ff fe6a 	bl	b60fc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6428:	2300      	movs	r3, #0
   b642a:	6063      	str	r3, [r4, #4]
}
   b642c:	4620      	mov	r0, r4
   b642e:	bd10      	pop	{r4, pc}

000b6430 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6430:	b513      	push	{r0, r1, r4, lr}
   b6432:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6434:	7800      	ldrb	r0, [r0, #0]
   b6436:	f7ff ffee 	bl	b6416 <_ZN8SPIClass4lockEv.isra.0>
   b643a:	b958      	cbnz	r0, b6454 <_ZN8SPIClass5beginEv+0x24>
   b643c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b643e:	9001      	str	r0, [sp, #4]
   b6440:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6444:	f7ff fe4a 	bl	b60dc <hal_spi_begin>
        unlock();
   b6448:	9801      	ldr	r0, [sp, #4]
    }
}
   b644a:	b002      	add	sp, #8
   b644c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6450:	f7ff bfde 	b.w	b6410 <_ZN8SPIClass6unlockEv.isra.0>
   b6454:	b002      	add	sp, #8
   b6456:	bd10      	pop	{r4, pc}

000b6458 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6458:	7800      	ldrb	r0, [r0, #0]
   b645a:	f7ff bfd9 	b.w	b6410 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6460 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6460:	0840      	lsrs	r0, r0, #1
{
   b6462:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6464:	6018      	str	r0, [r3, #0]
   b6466:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6468:	6818      	ldr	r0, [r3, #0]
   b646a:	4288      	cmp	r0, r1
   b646c:	b2e5      	uxtb	r5, r4
   b646e:	d906      	bls.n	b647e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6470:	3401      	adds	r4, #1
   b6472:	2c08      	cmp	r4, #8
   b6474:	d002      	beq.n	b647c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6476:	0840      	lsrs	r0, r0, #1
   b6478:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b647a:	e7f5      	b.n	b6468 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b647c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b647e:	4b02      	ldr	r3, [pc, #8]	; (b6488 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6480:	5d5b      	ldrb	r3, [r3, r5]
   b6482:	7013      	strb	r3, [r2, #0]
}
   b6484:	bd30      	pop	{r4, r5, pc}
   b6486:	bf00      	nop
   b6488:	000bafdc 	.word	0x000bafdc

000b648c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b648c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6490:	4606      	mov	r6, r0
   b6492:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6494:	7800      	ldrb	r0, [r0, #0]
{
   b6496:	460c      	mov	r4, r1
    CHECK(lock());
   b6498:	f7ff ffbd 	bl	b6416 <_ZN8SPIClass4lockEv.isra.0>
   b649c:	2800      	cmp	r0, #0
   b649e:	db1b      	blt.n	b64d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b64a0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b64a2:	2214      	movs	r2, #20
   b64a4:	2100      	movs	r1, #0
   b64a6:	a809      	add	r0, sp, #36	; 0x24
   b64a8:	f002 f819 	bl	b84de <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b64ac:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b64ae:	2200      	movs	r2, #0
   b64b0:	a909      	add	r1, sp, #36	; 0x24
   b64b2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b64b4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b64b8:	f7ff fe30 	bl	b611c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b64bc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b64c0:	b113      	cbz	r3, b64c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b64c2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b64c6:	b155      	cbz	r5, b64de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b64c8:	2700      	movs	r7, #0
   b64ca:	46b9      	mov	r9, r7
   b64cc:	46b8      	mov	r8, r7
   b64ce:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b64d0:	7923      	ldrb	r3, [r4, #4]
   b64d2:	b15d      	cbz	r5, b64ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b64d4:	b1c3      	cbz	r3, b6508 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b64d6:	2000      	movs	r0, #0
}
   b64d8:	b00f      	add	sp, #60	; 0x3c
   b64da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b64de:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b64e2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b64e6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b64ea:	e7f1      	b.n	b64d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b64ec:	2b00      	cmp	r3, #0
   b64ee:	d135      	bne.n	b655c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b64f0:	68a3      	ldr	r3, [r4, #8]
   b64f2:	4543      	cmp	r3, r8
   b64f4:	d108      	bne.n	b6508 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b64f6:	f88d 9020 	strb.w	r9, [sp, #32]
   b64fa:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b64fe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6502:	89a3      	ldrh	r3, [r4, #12]
   b6504:	429a      	cmp	r2, r3
   b6506:	d0e6      	beq.n	b64d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6508:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b650a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b650c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6510:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6512:	ab04      	add	r3, sp, #16
   b6514:	f10d 020f 	add.w	r2, sp, #15
   b6518:	f7ff ffa2 	bl	b6460 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b651c:	7921      	ldrb	r1, [r4, #4]
   b651e:	b985      	cbnz	r5, b6542 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6520:	b989      	cbnz	r1, b6546 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6522:	68a3      	ldr	r3, [r4, #8]
   b6524:	4543      	cmp	r3, r8
   b6526:	d30e      	bcc.n	b6546 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6528:	f88d 9020 	strb.w	r9, [sp, #32]
   b652c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6530:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6534:	89a3      	ldrh	r3, [r4, #12]
   b6536:	429a      	cmp	r2, r3
   b6538:	d105      	bne.n	b6546 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b653a:	9b04      	ldr	r3, [sp, #16]
   b653c:	4543      	cmp	r3, r8
   b653e:	d102      	bne.n	b6546 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6540:	e7c9      	b.n	b64d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b6542:	2900      	cmp	r1, #0
   b6544:	d1f9      	bne.n	b653a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b6546:	2300      	movs	r3, #0
   b6548:	9301      	str	r3, [sp, #4]
   b654a:	7b63      	ldrb	r3, [r4, #13]
   b654c:	9300      	str	r3, [sp, #0]
   b654e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b6552:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6554:	7830      	ldrb	r0, [r6, #0]
   b6556:	f7ff fde9 	bl	b612c <hal_spi_set_settings>
   b655a:	e7bc      	b.n	b64d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b655c:	e9cd 5500 	strd	r5, r5, [sp]
   b6560:	462b      	mov	r3, r5
   b6562:	462a      	mov	r2, r5
   b6564:	2101      	movs	r1, #1
   b6566:	e7f5      	b.n	b6554 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b6568 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b6568:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b656a:	7800      	ldrb	r0, [r0, #0]
   b656c:	f7ff fdbe 	bl	b60ec <hal_spi_transfer>
}
   b6570:	b2c0      	uxtb	r0, r0
   b6572:	bd08      	pop	{r3, pc}

000b6574 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6574:	4b05      	ldr	r3, [pc, #20]	; (b658c <_GLOBAL__sub_I_System+0x18>)
   b6576:	2202      	movs	r2, #2
   b6578:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b657a:	4b05      	ldr	r3, [pc, #20]	; (b6590 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b657c:	4a05      	ldr	r2, [pc, #20]	; (b6594 <_GLOBAL__sub_I_System+0x20>)
   b657e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6580:	2000      	movs	r0, #0
   b6582:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6586:	f7ff be29 	b.w	b61dc <set_system_mode>
   b658a:	bf00      	nop
   b658c:	2003e6d8 	.word	0x2003e6d8
   b6590:	2003e6cc 	.word	0x2003e6cc
   b6594:	ffff0000 	.word	0xffff0000

000b6598 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6598:	b510      	push	{r4, lr}
   b659a:	4604      	mov	r4, r0
{
	free(buffer);
   b659c:	6800      	ldr	r0, [r0, #0]
   b659e:	f7ff fec1 	bl	b6324 <free>
}
   b65a2:	4620      	mov	r0, r4
   b65a4:	bd10      	pop	{r4, pc}

000b65a6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b65a6:	b510      	push	{r4, lr}
   b65a8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b65aa:	6800      	ldr	r0, [r0, #0]
   b65ac:	b108      	cbz	r0, b65b2 <_ZN6String10invalidateEv+0xc>
   b65ae:	f7ff feb9 	bl	b6324 <free>
	buffer = NULL;
   b65b2:	2300      	movs	r3, #0
	capacity = len = 0;
   b65b4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b65b8:	6023      	str	r3, [r4, #0]
}
   b65ba:	bd10      	pop	{r4, pc}

000b65bc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b65bc:	b538      	push	{r3, r4, r5, lr}
   b65be:	4604      	mov	r4, r0
   b65c0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b65c2:	6800      	ldr	r0, [r0, #0]
   b65c4:	3101      	adds	r1, #1
   b65c6:	f7ff feb5 	bl	b6334 <realloc>
	if (newbuffer) {
   b65ca:	b110      	cbz	r0, b65d2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b65cc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b65d0:	2001      	movs	r0, #1
	}
	return 0;
}
   b65d2:	bd38      	pop	{r3, r4, r5, pc}

000b65d4 <_ZN6String7reserveEj>:
{
   b65d4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b65d6:	6803      	ldr	r3, [r0, #0]
{
   b65d8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b65da:	b123      	cbz	r3, b65e6 <_ZN6String7reserveEj+0x12>
   b65dc:	6843      	ldr	r3, [r0, #4]
   b65de:	428b      	cmp	r3, r1
   b65e0:	d301      	bcc.n	b65e6 <_ZN6String7reserveEj+0x12>
   b65e2:	2001      	movs	r0, #1
}
   b65e4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b65e6:	4620      	mov	r0, r4
   b65e8:	f7ff ffe8 	bl	b65bc <_ZN6String12changeBufferEj>
   b65ec:	2800      	cmp	r0, #0
   b65ee:	d0f9      	beq.n	b65e4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b65f0:	68a3      	ldr	r3, [r4, #8]
   b65f2:	2b00      	cmp	r3, #0
   b65f4:	d1f5      	bne.n	b65e2 <_ZN6String7reserveEj+0xe>
   b65f6:	6822      	ldr	r2, [r4, #0]
   b65f8:	7013      	strb	r3, [r2, #0]
   b65fa:	e7f2      	b.n	b65e2 <_ZN6String7reserveEj+0xe>

000b65fc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b65fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b65fe:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6600:	4611      	mov	r1, r2
   b6602:	9201      	str	r2, [sp, #4]
{
   b6604:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6606:	f7ff ffe5 	bl	b65d4 <_ZN6String7reserveEj>
   b660a:	9a01      	ldr	r2, [sp, #4]
   b660c:	b928      	cbnz	r0, b661a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b660e:	4620      	mov	r0, r4
   b6610:	f7ff ffc9 	bl	b65a6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6614:	4620      	mov	r0, r4
   b6616:	b003      	add	sp, #12
   b6618:	bd30      	pop	{r4, r5, pc}
	len = length;
   b661a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b661c:	4629      	mov	r1, r5
   b661e:	6820      	ldr	r0, [r4, #0]
   b6620:	f001 ff4f 	bl	b84c2 <memcpy>
	buffer[len] = 0;
   b6624:	6822      	ldr	r2, [r4, #0]
   b6626:	68a3      	ldr	r3, [r4, #8]
   b6628:	2100      	movs	r1, #0
   b662a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b662c:	e7f2      	b.n	b6614 <_ZN6String4copyEPKcj+0x18>

000b662e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b662e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6630:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6632:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6636:	4604      	mov	r4, r0
	len = 0;
   b6638:	6083      	str	r3, [r0, #8]
	flags = 0;
   b663a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b663c:	b141      	cbz	r1, b6650 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b663e:	4608      	mov	r0, r1
   b6640:	9101      	str	r1, [sp, #4]
   b6642:	f001 ff8d 	bl	b8560 <strlen>
   b6646:	9901      	ldr	r1, [sp, #4]
   b6648:	4602      	mov	r2, r0
   b664a:	4620      	mov	r0, r4
   b664c:	f7ff ffd6 	bl	b65fc <_ZN6String4copyEPKcj>
}
   b6650:	4620      	mov	r0, r4
   b6652:	b002      	add	sp, #8
   b6654:	bd10      	pop	{r4, pc}

000b6656 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6656:	b513      	push	{r0, r1, r4, lr}
   b6658:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b665a:	b159      	cbz	r1, b6674 <_ZN6StringaSEPKc+0x1e>
   b665c:	4608      	mov	r0, r1
   b665e:	9101      	str	r1, [sp, #4]
   b6660:	f001 ff7e 	bl	b8560 <strlen>
   b6664:	9901      	ldr	r1, [sp, #4]
   b6666:	4602      	mov	r2, r0
   b6668:	4620      	mov	r0, r4
   b666a:	f7ff ffc7 	bl	b65fc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b666e:	4620      	mov	r0, r4
   b6670:	b002      	add	sp, #8
   b6672:	bd10      	pop	{r4, pc}
	else invalidate();
   b6674:	f7ff ff97 	bl	b65a6 <_ZN6String10invalidateEv>
   b6678:	e7f9      	b.n	b666e <_ZN6StringaSEPKc+0x18>

000b667a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b667a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b667c:	6882      	ldr	r2, [r0, #8]
   b667e:	b93a      	cbnz	r2, b6690 <_ZNK6String6equalsEPKc+0x16>
   b6680:	b121      	cbz	r1, b668c <_ZNK6String6equalsEPKc+0x12>
   b6682:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b6684:	fab0 f080 	clz	r0, r0
   b6688:	0940      	lsrs	r0, r0, #5
   b668a:	e000      	b.n	b668e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b668c:	2001      	movs	r0, #1
}
   b668e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b6690:	6800      	ldr	r0, [r0, #0]
   b6692:	b909      	cbnz	r1, b6698 <_ZNK6String6equalsEPKc+0x1e>
   b6694:	7800      	ldrb	r0, [r0, #0]
   b6696:	e7f5      	b.n	b6684 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b6698:	f001 ff58 	bl	b854c <strcmp>
   b669c:	e7f2      	b.n	b6684 <_ZNK6String6equalsEPKc+0xa>
	...

000b66a0 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   b66a0:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b66a2:	6800      	ldr	r0, [r0, #0]
   b66a4:	b140      	cbz	r0, b66b8 <_ZNK6String7toFloatEv+0x18>
   b66a6:	f001 ff09 	bl	b84bc <atof>
   b66aa:	ec51 0b10 	vmov	r0, r1, d0
   b66ae:	f001 fe91 	bl	b83d4 <__aeabi_d2f>
   b66b2:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b66b6:	bd08      	pop	{r3, pc}
	return 0;
   b66b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; b66c0 <_ZNK6String7toFloatEv+0x20>
   b66bc:	e7fb      	b.n	b66b6 <_ZNK6String7toFloatEv+0x16>
   b66be:	bf00      	nop
   b66c0:	00000000 	.word	0x00000000

000b66c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b66c4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b66c6:	6843      	ldr	r3, [r0, #4]
   b66c8:	3b01      	subs	r3, #1
    {
   b66ca:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b66cc:	6043      	str	r3, [r0, #4]
   b66ce:	b963      	cbnz	r3, b66ea <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b66d0:	6803      	ldr	r3, [r0, #0]
   b66d2:	689b      	ldr	r3, [r3, #8]
   b66d4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b66d6:	68a3      	ldr	r3, [r4, #8]
   b66d8:	3b01      	subs	r3, #1
   b66da:	60a3      	str	r3, [r4, #8]
   b66dc:	b92b      	cbnz	r3, b66ea <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b66de:	6823      	ldr	r3, [r4, #0]
   b66e0:	4620      	mov	r0, r4
   b66e2:	68db      	ldr	r3, [r3, #12]
        }
    }
   b66e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b66e8:	4718      	bx	r3
    }
   b66ea:	bd10      	pop	{r4, pc}

000b66ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b66ec:	4802      	ldr	r0, [pc, #8]	; (b66f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b66ee:	2300      	movs	r3, #0
   b66f0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b66f2:	f7ff bc0b 	b.w	b5f0c <os_mutex_recursive_create>
   b66f6:	bf00      	nop
   b66f8:	2003e6dc 	.word	0x2003e6dc

000b66fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b66fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66fe:	4606      	mov	r6, r0
   b6700:	460d      	mov	r5, r1
  size_t n = 0;
   b6702:	188f      	adds	r7, r1, r2
   b6704:	2400      	movs	r4, #0
  while (size--) {
   b6706:	42bd      	cmp	r5, r7
   b6708:	d00c      	beq.n	b6724 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b670a:	6833      	ldr	r3, [r6, #0]
   b670c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6710:	689b      	ldr	r3, [r3, #8]
   b6712:	4630      	mov	r0, r6
   b6714:	4798      	blx	r3
     if (chunk>=0)
   b6716:	1e03      	subs	r3, r0, #0
   b6718:	db01      	blt.n	b671e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b671a:	441c      	add	r4, r3
  while (size--) {
   b671c:	e7f3      	b.n	b6706 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b671e:	2c00      	cmp	r4, #0
   b6720:	bf08      	it	eq
   b6722:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6724:	4620      	mov	r0, r4
   b6726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6728 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b6728:	b513      	push	{r0, r1, r4, lr}
   b672a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b672c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b672e:	b159      	cbz	r1, b6748 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6730:	9101      	str	r1, [sp, #4]
   b6732:	f001 ff15 	bl	b8560 <strlen>
   b6736:	6823      	ldr	r3, [r4, #0]
   b6738:	9901      	ldr	r1, [sp, #4]
   b673a:	68db      	ldr	r3, [r3, #12]
   b673c:	4602      	mov	r2, r0
   b673e:	4620      	mov	r0, r4
    }
   b6740:	b002      	add	sp, #8
   b6742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6746:	4718      	bx	r3
    }
   b6748:	b002      	add	sp, #8
   b674a:	bd10      	pop	{r4, pc}

000b674c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b674c:	b508      	push	{r3, lr}
  return write(str);
   b674e:	f7ff ffeb 	bl	b6728 <_ZN5Print5writeEPKc>
}
   b6752:	bd08      	pop	{r3, pc}

000b6754 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6754:	6803      	ldr	r3, [r0, #0]
   b6756:	689b      	ldr	r3, [r3, #8]
   b6758:	4718      	bx	r3

000b675a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b675a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b675c:	210d      	movs	r1, #13
{
   b675e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6760:	f7ff fff8 	bl	b6754 <_ZN5Print5printEc>
  n += print('\n');
   b6764:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6766:	4604      	mov	r4, r0
  n += print('\n');
   b6768:	4628      	mov	r0, r5
   b676a:	f7ff fff3 	bl	b6754 <_ZN5Print5printEc>
  return n;
}
   b676e:	4420      	add	r0, r4
   b6770:	bd38      	pop	{r3, r4, r5, pc}

000b6772 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6772:	b530      	push	{r4, r5, lr}
   b6774:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6776:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6778:	2a01      	cmp	r2, #1
  *str = '\0';
   b677a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b677e:	bf98      	it	ls
   b6780:	220a      	movls	r2, #10
   b6782:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6784:	460d      	mov	r5, r1
   b6786:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b678a:	fb01 5312 	mls	r3, r1, r2, r5
   b678e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6792:	2b09      	cmp	r3, #9
   b6794:	bf94      	ite	ls
   b6796:	3330      	addls	r3, #48	; 0x30
   b6798:	3337      	addhi	r3, #55	; 0x37
   b679a:	b2db      	uxtb	r3, r3
  } while(n);
   b679c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b679e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b67a2:	d9ef      	bls.n	b6784 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b67a4:	4621      	mov	r1, r4
   b67a6:	f7ff ffbf 	bl	b6728 <_ZN5Print5writeEPKc>
}
   b67aa:	b00b      	add	sp, #44	; 0x2c
   b67ac:	bd30      	pop	{r4, r5, pc}
	...

000b67b0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b67b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b67b4:	ec55 4b10 	vmov	r4, r5, d0
   b67b8:	4606      	mov	r6, r0
   b67ba:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b67bc:	ee10 2a10 	vmov	r2, s0
   b67c0:	ee10 0a10 	vmov	r0, s0
   b67c4:	462b      	mov	r3, r5
   b67c6:	4629      	mov	r1, r5
   b67c8:	f001 fda6 	bl	b8318 <__aeabi_dcmpun>
   b67cc:	b140      	cbz	r0, b67e0 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b67ce:	4953      	ldr	r1, [pc, #332]	; (b691c <_ZN5Print10printFloatEdh+0x16c>)
   b67d0:	4630      	mov	r0, r6
   b67d2:	f7ff ffa9 	bl	b6728 <_ZN5Print5writeEPKc>
   b67d6:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b67d8:	4650      	mov	r0, sl
   b67da:	b003      	add	sp, #12
   b67dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b67e0:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b67e4:	4b4e      	ldr	r3, [pc, #312]	; (b6920 <_ZN5Print10printFloatEdh+0x170>)
   b67e6:	f04f 32ff 	mov.w	r2, #4294967295
   b67ea:	4620      	mov	r0, r4
   b67ec:	4649      	mov	r1, r9
   b67ee:	f001 fd93 	bl	b8318 <__aeabi_dcmpun>
   b67f2:	b948      	cbnz	r0, b6808 <_ZN5Print10printFloatEdh+0x58>
   b67f4:	4b4a      	ldr	r3, [pc, #296]	; (b6920 <_ZN5Print10printFloatEdh+0x170>)
   b67f6:	f04f 32ff 	mov.w	r2, #4294967295
   b67fa:	4620      	mov	r0, r4
   b67fc:	4649      	mov	r1, r9
   b67fe:	f001 fd6d 	bl	b82dc <__aeabi_dcmple>
   b6802:	b908      	cbnz	r0, b6808 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b6804:	4947      	ldr	r1, [pc, #284]	; (b6924 <_ZN5Print10printFloatEdh+0x174>)
   b6806:	e7e3      	b.n	b67d0 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b6808:	4b47      	ldr	r3, [pc, #284]	; (b6928 <_ZN5Print10printFloatEdh+0x178>)
   b680a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b680e:	4620      	mov	r0, r4
   b6810:	4629      	mov	r1, r5
   b6812:	f001 fd77 	bl	b8304 <__aeabi_dcmpgt>
   b6816:	b108      	cbz	r0, b681c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b6818:	4944      	ldr	r1, [pc, #272]	; (b692c <_ZN5Print10printFloatEdh+0x17c>)
   b681a:	e7d9      	b.n	b67d0 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b681c:	4b44      	ldr	r3, [pc, #272]	; (b6930 <_ZN5Print10printFloatEdh+0x180>)
   b681e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b6822:	4620      	mov	r0, r4
   b6824:	4629      	mov	r1, r5
   b6826:	f001 fd4f 	bl	b82c8 <__aeabi_dcmplt>
   b682a:	2800      	cmp	r0, #0
   b682c:	d1f4      	bne.n	b6818 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b682e:	2200      	movs	r2, #0
   b6830:	2300      	movs	r3, #0
   b6832:	4620      	mov	r0, r4
   b6834:	4629      	mov	r1, r5
   b6836:	f001 fd47 	bl	b82c8 <__aeabi_dcmplt>
   b683a:	b1d0      	cbz	r0, b6872 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b683c:	212d      	movs	r1, #45	; 0x2d
   b683e:	4630      	mov	r0, r6
   b6840:	f7ff ff88 	bl	b6754 <_ZN5Print5printEc>
     number = -number;
   b6844:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b6848:	4682      	mov	sl, r0
     number = -number;
   b684a:	461d      	mov	r5, r3
  double rounding = 0.5;
   b684c:	4939      	ldr	r1, [pc, #228]	; (b6934 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b684e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b693c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b6852:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b6856:	2000      	movs	r0, #0
    rounding /= 10.0;
   b6858:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b685c:	fa5f f38b 	uxtb.w	r3, fp
   b6860:	429f      	cmp	r7, r3
   b6862:	d908      	bls.n	b6876 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b6864:	4642      	mov	r2, r8
   b6866:	464b      	mov	r3, r9
   b6868:	f001 fbe6 	bl	b8038 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b686c:	f10b 0b01 	add.w	fp, fp, #1
   b6870:	e7f4      	b.n	b685c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b6872:	4682      	mov	sl, r0
   b6874:	e7ea      	b.n	b684c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b6876:	4622      	mov	r2, r4
   b6878:	462b      	mov	r3, r5
   b687a:	f001 f8fd 	bl	b7a78 <__adddf3>
   b687e:	460d      	mov	r5, r1
   b6880:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b6882:	f001 fd87 	bl	b8394 <__aeabi_d2uiz>
   b6886:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b6888:	f001 fa32 	bl	b7cf0 <__aeabi_ui2d>
   b688c:	4602      	mov	r2, r0
   b688e:	460b      	mov	r3, r1
   b6890:	4620      	mov	r0, r4
   b6892:	4629      	mov	r1, r5
   b6894:	f001 f8ee 	bl	b7a74 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6898:	220a      	movs	r2, #10
   b689a:	4604      	mov	r4, r0
   b689c:	460d      	mov	r5, r1
   b689e:	4630      	mov	r0, r6
   b68a0:	4641      	mov	r1, r8
   b68a2:	f7ff ff66 	bl	b6772 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b68a6:	4482      	add	sl, r0
  if (digits > 0) {
   b68a8:	2f00      	cmp	r7, #0
   b68aa:	d095      	beq.n	b67d8 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b68ac:	4922      	ldr	r1, [pc, #136]	; (b6938 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b68ae:	f8df 908c 	ldr.w	r9, [pc, #140]	; b693c <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b68b2:	4630      	mov	r0, r6
   b68b4:	f7ff ff38 	bl	b6728 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b68b8:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b68bc:	4482      	add	sl, r0
  while (digits-- > 0)
   b68be:	2f00      	cmp	r7, #0
   b68c0:	d08a      	beq.n	b67d8 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b68c2:	4642      	mov	r2, r8
   b68c4:	464b      	mov	r3, r9
   b68c6:	4620      	mov	r0, r4
   b68c8:	4629      	mov	r1, r5
   b68ca:	f001 fa8b 	bl	b7de4 <__aeabi_dmul>
   b68ce:	4604      	mov	r4, r0
   b68d0:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b68d2:	f001 fd37 	bl	b8344 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b68d6:	f1b0 0b00 	subs.w	fp, r0, #0
   b68da:	da1c      	bge.n	b6916 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b68dc:	212d      	movs	r1, #45	; 0x2d
   b68de:	4630      	mov	r0, r6
   b68e0:	f7ff ff38 	bl	b6754 <_ZN5Print5printEc>
            val = -n;
   b68e4:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b68e8:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b68ea:	220a      	movs	r2, #10
   b68ec:	4630      	mov	r0, r6
   b68ee:	9301      	str	r3, [sp, #4]
   b68f0:	f7ff ff3f 	bl	b6772 <_ZN5Print11printNumberEmh>
   b68f4:	9b01      	ldr	r3, [sp, #4]
   b68f6:	4418      	add	r0, r3
    n += print(toPrint);
   b68f8:	4482      	add	sl, r0
    remainder -= toPrint;
   b68fa:	4658      	mov	r0, fp
   b68fc:	f001 fa08 	bl	b7d10 <__aeabi_i2d>
   b6900:	4602      	mov	r2, r0
   b6902:	460b      	mov	r3, r1
   b6904:	4620      	mov	r0, r4
   b6906:	4629      	mov	r1, r5
   b6908:	f001 f8b4 	bl	b7a74 <__aeabi_dsub>
   b690c:	3f01      	subs	r7, #1
   b690e:	4604      	mov	r4, r0
   b6910:	460d      	mov	r5, r1
   b6912:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b6914:	e7d3      	b.n	b68be <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b6916:	4659      	mov	r1, fp
        size_t t = 0;
   b6918:	2300      	movs	r3, #0
   b691a:	e7e6      	b.n	b68ea <_ZN5Print10printFloatEdh+0x13a>
   b691c:	000bafec 	.word	0x000bafec
   b6920:	7fefffff 	.word	0x7fefffff
   b6924:	000baff0 	.word	0x000baff0
   b6928:	41efffff 	.word	0x41efffff
   b692c:	000baff4 	.word	0x000baff4
   b6930:	c1efffff 	.word	0xc1efffff
   b6934:	3fe00000 	.word	0x3fe00000
   b6938:	000baff8 	.word	0x000baff8
   b693c:	40240000 	.word	0x40240000

000b6940 <_ZN5Print7printlnEdi>:
{
   b6940:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b6942:	b2c9      	uxtb	r1, r1
{
   b6944:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b6946:	f7ff ff33 	bl	b67b0 <_ZN5Print10printFloatEdh>
   b694a:	4604      	mov	r4, r0
  n += println();
   b694c:	4628      	mov	r0, r5
   b694e:	f7ff ff04 	bl	b675a <_ZN5Print7printlnEv>
}
   b6952:	4420      	add	r0, r4
   b6954:	bd38      	pop	{r3, r4, r5, pc}

000b6956 <_ZN5Print7printlnEfi>:
{
   b6956:	b538      	push	{r3, r4, r5, lr}
   b6958:	4604      	mov	r4, r0
   b695a:	ee10 0a10 	vmov	r0, s0
   b695e:	460d      	mov	r5, r1
    return println((double)num, digits);
   b6960:	f001 f9e8 	bl	b7d34 <__aeabi_f2d>
   b6964:	ec41 0b10 	vmov	d0, r0, r1
   b6968:	4629      	mov	r1, r5
   b696a:	4620      	mov	r0, r4
}
   b696c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b6970:	f7ff bfe6 	b.w	b6940 <_ZN5Print7printlnEdi>

000b6974 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6978:	b086      	sub	sp, #24
   b697a:	af00      	add	r7, sp, #0
   b697c:	4605      	mov	r5, r0
   b697e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6980:	1d38      	adds	r0, r7, #4
   b6982:	2114      	movs	r1, #20
{
   b6984:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6986:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6988:	f7ff fcdc 	bl	b6344 <vsnprintf>

    if (n<bufsize)
   b698c:	2813      	cmp	r0, #19
   b698e:	d80e      	bhi.n	b69ae <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6990:	1d39      	adds	r1, r7, #4
   b6992:	4628      	mov	r0, r5
   b6994:	f7ff fec8 	bl	b6728 <_ZN5Print5writeEPKc>
   b6998:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b699a:	b11e      	cbz	r6, b69a4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b699c:	4628      	mov	r0, r5
   b699e:	f7ff fedc 	bl	b675a <_ZN5Print7printlnEv>
   b69a2:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b69a4:	4620      	mov	r0, r4
   b69a6:	3718      	adds	r7, #24
   b69a8:	46bd      	mov	sp, r7
   b69aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b69ae:	f100 0308 	add.w	r3, r0, #8
   b69b2:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b69b6:	46e8      	mov	r8, sp
        char bigger[n+1];
   b69b8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b69bc:	4622      	mov	r2, r4
   b69be:	1c41      	adds	r1, r0, #1
   b69c0:	683b      	ldr	r3, [r7, #0]
   b69c2:	4668      	mov	r0, sp
   b69c4:	f7ff fcbe 	bl	b6344 <vsnprintf>
  return write(str);
   b69c8:	4669      	mov	r1, sp
   b69ca:	4628      	mov	r0, r5
   b69cc:	f7ff feac 	bl	b6728 <_ZN5Print5writeEPKc>
   b69d0:	4604      	mov	r4, r0
   b69d2:	46c5      	mov	sp, r8
   b69d4:	e7e1      	b.n	b699a <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000b69d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b69d8:	4b01      	ldr	r3, [pc, #4]	; (b69e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b69da:	4a02      	ldr	r2, [pc, #8]	; (b69e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b69dc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b69de:	4770      	bx	lr
   b69e0:	2003e6e0 	.word	0x2003e6e0
   b69e4:	000baffa 	.word	0x000baffa

000b69e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b69e8:	4b02      	ldr	r3, [pc, #8]	; (b69f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b69ea:	681a      	ldr	r2, [r3, #0]
   b69ec:	4b02      	ldr	r3, [pc, #8]	; (b69f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b69ee:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b69f0:	4770      	bx	lr
   b69f2:	bf00      	nop
   b69f4:	2003e400 	.word	0x2003e400
   b69f8:	2003e6e4 	.word	0x2003e6e4

000b69fc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b69fc:	2100      	movs	r1, #0
   b69fe:	f7ff bbf5 	b.w	b61ec <system_delay_ms>
	...

000b6a04 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6a04:	b510      	push	{r4, lr}
   b6a06:	4b04      	ldr	r3, [pc, #16]	; (b6a18 <_ZN9TCPClientD1Ev+0x14>)
   b6a08:	6003      	str	r3, [r0, #0]
   b6a0a:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b6a0c:	6980      	ldr	r0, [r0, #24]
   b6a0e:	b108      	cbz	r0, b6a14 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b6a10:	f7ff fe58 	bl	b66c4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b6a14:	4620      	mov	r0, r4
   b6a16:	bd10      	pop	{r4, pc}
   b6a18:	000bb0f4 	.word	0x000bb0f4

000b6a1c <_ZN9TCPClientD0Ev>:
   b6a1c:	b510      	push	{r4, lr}
   b6a1e:	4604      	mov	r4, r0
   b6a20:	f7ff fff0 	bl	b6a04 <_ZN9TCPClientD1Ev>
   b6a24:	4620      	mov	r0, r4
   b6a26:	211c      	movs	r1, #28
   b6a28:	f7fd fb3b 	bl	b40a2 <_ZdlPvj>
   b6a2c:	4620      	mov	r0, r4
   b6a2e:	bd10      	pop	{r4, pc}

000b6a30 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6a30:	4b01      	ldr	r3, [pc, #4]	; (b6a38 <_GLOBAL__sub_I_RGB+0x8>)
   b6a32:	2200      	movs	r2, #0
   b6a34:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6a36:	4770      	bx	lr
   b6a38:	2003e6e8 	.word	0x2003e6e8

000b6a3c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6a3c:	4b01      	ldr	r3, [pc, #4]	; (b6a44 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6a3e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6a40:	4770      	bx	lr
   b6a42:	bf00      	nop
   b6a44:	2003e404 	.word	0x2003e404

000b6a48 <serialEventRun>:
{
   b6a48:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6a4a:	4b0b      	ldr	r3, [pc, #44]	; (b6a78 <serialEventRun+0x30>)
   b6a4c:	b143      	cbz	r3, b6a60 <serialEventRun+0x18>
   b6a4e:	f000 f979 	bl	b6d44 <_Z16_fetch_usbserialv>
   b6a52:	6803      	ldr	r3, [r0, #0]
   b6a54:	691b      	ldr	r3, [r3, #16]
   b6a56:	4798      	blx	r3
   b6a58:	2800      	cmp	r0, #0
   b6a5a:	dd01      	ble.n	b6a60 <serialEventRun+0x18>
        serialEvent();
   b6a5c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6a60:	4b06      	ldr	r3, [pc, #24]	; (b6a7c <serialEventRun+0x34>)
   b6a62:	b143      	cbz	r3, b6a76 <serialEventRun+0x2e>
   b6a64:	f000 fe8e 	bl	b7784 <_Z22__fetch_global_Serial1v>
   b6a68:	6803      	ldr	r3, [r0, #0]
   b6a6a:	691b      	ldr	r3, [r3, #16]
   b6a6c:	4798      	blx	r3
   b6a6e:	2800      	cmp	r0, #0
   b6a70:	dd01      	ble.n	b6a76 <serialEventRun+0x2e>
        serialEvent1();
   b6a72:	f3af 8000 	nop.w
}
   b6a76:	bd08      	pop	{r3, pc}
	...

000b6a80 <_post_loop>:
{
   b6a80:	b508      	push	{r3, lr}
	serialEventRun();
   b6a82:	f7ff ffe1 	bl	b6a48 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6a86:	f7ff fa19 	bl	b5ebc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6a8a:	4b01      	ldr	r3, [pc, #4]	; (b6a90 <_post_loop+0x10>)
   b6a8c:	6018      	str	r0, [r3, #0]
}
   b6a8e:	bd08      	pop	{r3, pc}
   b6a90:	2003e740 	.word	0x2003e740

000b6a94 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6a94:	4805      	ldr	r0, [pc, #20]	; (b6aac <_Z33system_initialize_user_backup_ramv+0x18>)
   b6a96:	4a06      	ldr	r2, [pc, #24]	; (b6ab0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6a98:	4906      	ldr	r1, [pc, #24]	; (b6ab4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6a9a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6a9c:	1a12      	subs	r2, r2, r0
   b6a9e:	f001 fd10 	bl	b84c2 <memcpy>
    __backup_sram_signature = signature;
   b6aa2:	4b05      	ldr	r3, [pc, #20]	; (b6ab8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6aa4:	4a05      	ldr	r2, [pc, #20]	; (b6abc <_Z33system_initialize_user_backup_ramv+0x28>)
   b6aa6:	601a      	str	r2, [r3, #0]
}
   b6aa8:	bd08      	pop	{r3, pc}
   b6aaa:	bf00      	nop
   b6aac:	2003f400 	.word	0x2003f400
   b6ab0:	2003f404 	.word	0x2003f404
   b6ab4:	000bb704 	.word	0x000bb704
   b6ab8:	2003f400 	.word	0x2003f400
   b6abc:	9a271c1e 	.word	0x9a271c1e

000b6ac0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6ac0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6ac2:	2300      	movs	r3, #0
   b6ac4:	9300      	str	r3, [sp, #0]
   b6ac6:	461a      	mov	r2, r3
   b6ac8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6acc:	f7ff fba8 	bl	b6220 <system_ctrl_set_result>
}
   b6ad0:	b003      	add	sp, #12
   b6ad2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6ad8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6ad8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6ada:	8843      	ldrh	r3, [r0, #2]
   b6adc:	2b0a      	cmp	r3, #10
   b6ade:	d008      	beq.n	b6af2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6ae0:	2b50      	cmp	r3, #80	; 0x50
   b6ae2:	d10b      	bne.n	b6afc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6ae4:	4b09      	ldr	r3, [pc, #36]	; (b6b0c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6ae6:	681b      	ldr	r3, [r3, #0]
   b6ae8:	b14b      	cbz	r3, b6afe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6aea:	b003      	add	sp, #12
   b6aec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6af0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6af2:	f7ff ffe5 	bl	b6ac0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6af6:	b003      	add	sp, #12
   b6af8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6afc:	2300      	movs	r3, #0
   b6afe:	9300      	str	r3, [sp, #0]
   b6b00:	461a      	mov	r2, r3
   b6b02:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6b06:	f7ff fb8b 	bl	b6220 <system_ctrl_set_result>
}
   b6b0a:	e7f4      	b.n	b6af6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6b0c:	2003e6fc 	.word	0x2003e6fc

000b6b10 <module_user_init_hook>:
{
   b6b10:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6b12:	4812      	ldr	r0, [pc, #72]	; (b6b5c <module_user_init_hook+0x4c>)
   b6b14:	2100      	movs	r1, #0
   b6b16:	f7ff fc35 	bl	b6384 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6b1a:	4b11      	ldr	r3, [pc, #68]	; (b6b60 <module_user_init_hook+0x50>)
   b6b1c:	681a      	ldr	r2, [r3, #0]
   b6b1e:	4b11      	ldr	r3, [pc, #68]	; (b6b64 <module_user_init_hook+0x54>)
   b6b20:	429a      	cmp	r2, r3
   b6b22:	4b11      	ldr	r3, [pc, #68]	; (b6b68 <module_user_init_hook+0x58>)
   b6b24:	bf0c      	ite	eq
   b6b26:	2201      	moveq	r2, #1
   b6b28:	2200      	movne	r2, #0
   b6b2a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6b2c:	d001      	beq.n	b6b32 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6b2e:	f7ff ffb1 	bl	b6a94 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6b32:	f7ff f9b3 	bl	b5e9c <HAL_RNG_GetRandomNumber>
   b6b36:	4604      	mov	r4, r0
    srand(seed);
   b6b38:	f001 fcda 	bl	b84f0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6b3c:	4b0b      	ldr	r3, [pc, #44]	; (b6b6c <module_user_init_hook+0x5c>)
   b6b3e:	b113      	cbz	r3, b6b46 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6b40:	4620      	mov	r0, r4
   b6b42:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6b46:	2100      	movs	r1, #0
   b6b48:	4808      	ldr	r0, [pc, #32]	; (b6b6c <module_user_init_hook+0x5c>)
   b6b4a:	f7ff fbdb 	bl	b6304 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6b52:	4807      	ldr	r0, [pc, #28]	; (b6b70 <module_user_init_hook+0x60>)
   b6b54:	2100      	movs	r1, #0
   b6b56:	f7ff bb59 	b.w	b620c <system_ctrl_set_app_request_handler>
   b6b5a:	bf00      	nop
   b6b5c:	000b6a3d 	.word	0x000b6a3d
   b6b60:	2003f400 	.word	0x2003f400
   b6b64:	9a271c1e 	.word	0x9a271c1e
   b6b68:	2003e6f8 	.word	0x2003e6f8
   b6b6c:	00000000 	.word	0x00000000
   b6b70:	000b6ad9 	.word	0x000b6ad9

000b6b74 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6b74:	4770      	bx	lr

000b6b76 <_ZN9IPAddressD0Ev>:
   b6b76:	b510      	push	{r4, lr}
   b6b78:	2118      	movs	r1, #24
   b6b7a:	4604      	mov	r4, r0
   b6b7c:	f7fd fa91 	bl	b40a2 <_ZdlPvj>
   b6b80:	4620      	mov	r0, r4
   b6b82:	bd10      	pop	{r4, pc}

000b6b84 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6b84:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6b86:	7d03      	ldrb	r3, [r0, #20]
   b6b88:	2b06      	cmp	r3, #6
{
   b6b8a:	b08d      	sub	sp, #52	; 0x34
   b6b8c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6b8e:	f100 0704 	add.w	r7, r0, #4
   b6b92:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6b96:	d012      	beq.n	b6bbe <_ZNK9IPAddress7printToER5Print+0x3a>
   b6b98:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b6b9c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6ba0:	220a      	movs	r2, #10
   b6ba2:	4630      	mov	r0, r6
   b6ba4:	f7ff fde5 	bl	b6772 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6ba8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6baa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6bac:	d019      	beq.n	b6be2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6bae:	2c00      	cmp	r4, #0
   b6bb0:	d0f4      	beq.n	b6b9c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6bb2:	212e      	movs	r1, #46	; 0x2e
   b6bb4:	4630      	mov	r0, r6
   b6bb6:	f7ff fdcd 	bl	b6754 <_ZN5Print5printEc>
   b6bba:	4404      	add	r4, r0
   b6bbc:	e7ee      	b.n	b6b9c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6bbe:	232f      	movs	r3, #47	; 0x2f
   b6bc0:	466a      	mov	r2, sp
   b6bc2:	4639      	mov	r1, r7
   b6bc4:	200a      	movs	r0, #10
		buf[0] = 0;
   b6bc6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6bca:	f7ff f9a7 	bl	b5f1c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6bce:	4668      	mov	r0, sp
   b6bd0:	f001 fcc6 	bl	b8560 <strlen>
   b6bd4:	6833      	ldr	r3, [r6, #0]
   b6bd6:	4602      	mov	r2, r0
   b6bd8:	68db      	ldr	r3, [r3, #12]
   b6bda:	4669      	mov	r1, sp
   b6bdc:	4630      	mov	r0, r6
   b6bde:	4798      	blx	r3
   b6be0:	4604      	mov	r4, r0
    }
    return n;
}
   b6be2:	4620      	mov	r0, r4
   b6be4:	b00d      	add	sp, #52	; 0x34
   b6be6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6be8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6be8:	b510      	push	{r4, lr}
   b6bea:	4b05      	ldr	r3, [pc, #20]	; (b6c00 <_ZN9IPAddressC1Ev+0x18>)
   b6bec:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6bee:	2211      	movs	r2, #17
   b6bf0:	f840 3b04 	str.w	r3, [r0], #4
   b6bf4:	2100      	movs	r1, #0
   b6bf6:	f001 fc72 	bl	b84de <memset>
}
   b6bfa:	4620      	mov	r0, r4
   b6bfc:	bd10      	pop	{r4, pc}
   b6bfe:	bf00      	nop
   b6c00:	000bb024 	.word	0x000bb024

000b6c04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6c04:	4603      	mov	r3, r0
   b6c06:	4a07      	ldr	r2, [pc, #28]	; (b6c24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6c08:	b510      	push	{r4, lr}
   b6c0a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6c0e:	f101 0210 	add.w	r2, r1, #16
   b6c12:	f851 4b04 	ldr.w	r4, [r1], #4
   b6c16:	f843 4b04 	str.w	r4, [r3], #4
   b6c1a:	4291      	cmp	r1, r2
   b6c1c:	d1f9      	bne.n	b6c12 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6c1e:	780a      	ldrb	r2, [r1, #0]
   b6c20:	701a      	strb	r2, [r3, #0]
}
   b6c22:	bd10      	pop	{r4, pc}
   b6c24:	000bb024 	.word	0x000bb024

000b6c28 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6c28:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6c2a:	2b04      	cmp	r3, #4
   b6c2c:	d104      	bne.n	b6c38 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6c2e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6c30:	3800      	subs	r0, #0
   b6c32:	bf18      	it	ne
   b6c34:	2001      	movne	r0, #1
   b6c36:	4770      	bx	lr
    } else if (version() == 6) {
   b6c38:	2b06      	cmp	r3, #6
   b6c3a:	d107      	bne.n	b6c4c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6c3c:	6843      	ldr	r3, [r0, #4]
   b6c3e:	b93b      	cbnz	r3, b6c50 <_ZNK9IPAddresscvbEv+0x28>
   b6c40:	6883      	ldr	r3, [r0, #8]
   b6c42:	b92b      	cbnz	r3, b6c50 <_ZNK9IPAddresscvbEv+0x28>
   b6c44:	68c3      	ldr	r3, [r0, #12]
   b6c46:	b91b      	cbnz	r3, b6c50 <_ZNK9IPAddresscvbEv+0x28>
   b6c48:	6900      	ldr	r0, [r0, #16]
   b6c4a:	e7f1      	b.n	b6c30 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6c4c:	2000      	movs	r0, #0
   b6c4e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6c50:	2001      	movs	r0, #1
}
   b6c52:	4770      	bx	lr

000b6c54 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6c54:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6c56:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6c5a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6c5e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6c62:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6c66:	2304      	movs	r3, #4
   b6c68:	6041      	str	r1, [r0, #4]
   b6c6a:	7503      	strb	r3, [r0, #20]
}
   b6c6c:	bd10      	pop	{r4, pc}
	...

000b6c70 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6c70:	b507      	push	{r0, r1, r2, lr}
   b6c72:	4b06      	ldr	r3, [pc, #24]	; (b6c8c <_ZN9IPAddressC1EPKh+0x1c>)
   b6c74:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6c76:	78cb      	ldrb	r3, [r1, #3]
   b6c78:	9300      	str	r3, [sp, #0]
   b6c7a:	788b      	ldrb	r3, [r1, #2]
   b6c7c:	784a      	ldrb	r2, [r1, #1]
   b6c7e:	7809      	ldrb	r1, [r1, #0]
   b6c80:	f7ff ffe8 	bl	b6c54 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6c84:	b003      	add	sp, #12
   b6c86:	f85d fb04 	ldr.w	pc, [sp], #4
   b6c8a:	bf00      	nop
   b6c8c:	000bb024 	.word	0x000bb024

000b6c90 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6c90:	7441      	strb	r1, [r0, #17]
}
   b6c92:	4770      	bx	lr

000b6c94 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6c94:	4770      	bx	lr

000b6c96 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6c96:	4770      	bx	lr

000b6c98 <_ZN9USBSerial4readEv>:
{
   b6c98:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6c9a:	2100      	movs	r1, #0
   b6c9c:	7c00      	ldrb	r0, [r0, #16]
   b6c9e:	f7ff fa75 	bl	b618c <HAL_USB_USART_Receive_Data>
}
   b6ca2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6ca6:	bd08      	pop	{r3, pc}

000b6ca8 <_ZN9USBSerial4peekEv>:
{
   b6ca8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6caa:	2101      	movs	r1, #1
   b6cac:	7c00      	ldrb	r0, [r0, #16]
   b6cae:	f7ff fa6d 	bl	b618c <HAL_USB_USART_Receive_Data>
}
   b6cb2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6cb6:	bd08      	pop	{r3, pc}

000b6cb8 <_ZN9USBSerial17availableForWriteEv>:
{
   b6cb8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6cba:	7c00      	ldrb	r0, [r0, #16]
   b6cbc:	f7ff fa5e 	bl	b617c <HAL_USB_USART_Available_Data_For_Write>
}
   b6cc0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6cc4:	bd08      	pop	{r3, pc}

000b6cc6 <_ZN9USBSerial9availableEv>:
{
   b6cc6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6cc8:	7c00      	ldrb	r0, [r0, #16]
   b6cca:	f7ff fa4f 	bl	b616c <HAL_USB_USART_Available_Data>
}
   b6cce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6cd2:	bd08      	pop	{r3, pc}

000b6cd4 <_ZN9USBSerial5writeEh>:
{
   b6cd4:	b513      	push	{r0, r1, r4, lr}
   b6cd6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6cd8:	7c00      	ldrb	r0, [r0, #16]
{
   b6cda:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6cdc:	f7ff fa4e 	bl	b617c <HAL_USB_USART_Available_Data_For_Write>
   b6ce0:	2800      	cmp	r0, #0
   b6ce2:	9901      	ldr	r1, [sp, #4]
   b6ce4:	dc01      	bgt.n	b6cea <_ZN9USBSerial5writeEh+0x16>
   b6ce6:	7c60      	ldrb	r0, [r4, #17]
   b6ce8:	b120      	cbz	r0, b6cf4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6cea:	7c20      	ldrb	r0, [r4, #16]
   b6cec:	f7ff fa56 	bl	b619c <HAL_USB_USART_Send_Data>
   b6cf0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6cf4:	b002      	add	sp, #8
   b6cf6:	bd10      	pop	{r4, pc}

000b6cf8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6cf8:	7c00      	ldrb	r0, [r0, #16]
   b6cfa:	f7ff ba57 	b.w	b61ac <HAL_USB_USART_Flush_Data>

000b6cfe <_ZN9USBSerialD0Ev>:
   b6cfe:	b510      	push	{r4, lr}
   b6d00:	2114      	movs	r1, #20
   b6d02:	4604      	mov	r4, r0
   b6d04:	f7fd f9cd 	bl	b40a2 <_ZdlPvj>
   b6d08:	4620      	mov	r0, r4
   b6d0a:	bd10      	pop	{r4, pc}

000b6d0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6d0c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6d12:	4604      	mov	r4, r0
   b6d14:	4608      	mov	r0, r1
   b6d16:	2100      	movs	r1, #0
   b6d18:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6d1c:	4b04      	ldr	r3, [pc, #16]	; (b6d30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6d1e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6d20:	2301      	movs	r3, #1
  _serial = serial;
   b6d22:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6d24:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6d26:	4611      	mov	r1, r2
   b6d28:	f7ff fa18 	bl	b615c <HAL_USB_USART_Init>
}
   b6d2c:	4620      	mov	r0, r4
   b6d2e:	bd10      	pop	{r4, pc}
   b6d30:	000bb038 	.word	0x000bb038

000b6d34 <_Z19acquireSerialBufferv>:
{
   b6d34:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6d36:	2214      	movs	r2, #20
{
   b6d38:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6d3a:	2100      	movs	r1, #0
   b6d3c:	f001 fbcf 	bl	b84de <memset>
}
   b6d40:	4620      	mov	r0, r4
   b6d42:	bd10      	pop	{r4, pc}

000b6d44 <_Z16_fetch_usbserialv>:
{
   b6d44:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6d46:	4c0f      	ldr	r4, [pc, #60]	; (b6d84 <_Z16_fetch_usbserialv+0x40>)
{
   b6d48:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6d4a:	a803      	add	r0, sp, #12
   b6d4c:	f7ff fff2 	bl	b6d34 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6d50:	7821      	ldrb	r1, [r4, #0]
   b6d52:	f3bf 8f5b 	dmb	ish
   b6d56:	f011 0101 	ands.w	r1, r1, #1
   b6d5a:	d10f      	bne.n	b6d7c <_Z16_fetch_usbserialv+0x38>
   b6d5c:	4620      	mov	r0, r4
   b6d5e:	9101      	str	r1, [sp, #4]
   b6d60:	f7fd f9ae 	bl	b40c0 <__cxa_guard_acquire>
   b6d64:	9901      	ldr	r1, [sp, #4]
   b6d66:	b148      	cbz	r0, b6d7c <_Z16_fetch_usbserialv+0x38>
   b6d68:	aa03      	add	r2, sp, #12
   b6d6a:	4807      	ldr	r0, [pc, #28]	; (b6d88 <_Z16_fetch_usbserialv+0x44>)
   b6d6c:	f7ff ffce 	bl	b6d0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6d70:	4620      	mov	r0, r4
   b6d72:	f7fd f9aa 	bl	b40ca <__cxa_guard_release>
   b6d76:	4805      	ldr	r0, [pc, #20]	; (b6d8c <_Z16_fetch_usbserialv+0x48>)
   b6d78:	f001 fb9a 	bl	b84b0 <atexit>
	return _usbserial;
}
   b6d7c:	4802      	ldr	r0, [pc, #8]	; (b6d88 <_Z16_fetch_usbserialv+0x44>)
   b6d7e:	b008      	add	sp, #32
   b6d80:	bd10      	pop	{r4, pc}
   b6d82:	bf00      	nop
   b6d84:	2003e700 	.word	0x2003e700
   b6d88:	2003e704 	.word	0x2003e704
   b6d8c:	000b6c95 	.word	0x000b6c95

000b6d90 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6d90:	4770      	bx	lr

000b6d92 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6d92:	7441      	strb	r1, [r0, #17]
}
   b6d94:	4770      	bx	lr

000b6d96 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6d96:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6d98:	7c00      	ldrb	r0, [r0, #16]
   b6d9a:	f7ff f907 	bl	b5fac <hal_usart_available_data_for_write>
}
   b6d9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6da2:	bd08      	pop	{r3, pc}

000b6da4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6da4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6da6:	7c00      	ldrb	r0, [r0, #16]
   b6da8:	f7ff f8d8 	bl	b5f5c <hal_usart_available>
}
   b6dac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6db0:	bd08      	pop	{r3, pc}

000b6db2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6db2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6db4:	7c00      	ldrb	r0, [r0, #16]
   b6db6:	f7ff f8e1 	bl	b5f7c <hal_usart_peek>
}
   b6dba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6dbe:	bd08      	pop	{r3, pc}

000b6dc0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6dc0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6dc2:	7c00      	ldrb	r0, [r0, #16]
   b6dc4:	f7ff f8d2 	bl	b5f6c <hal_usart_read>
}
   b6dc8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6dcc:	bd08      	pop	{r3, pc}

000b6dce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6dce:	7c00      	ldrb	r0, [r0, #16]
   b6dd0:	f7ff b8dc 	b.w	b5f8c <hal_usart_flush>

000b6dd4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6dd6:	7c45      	ldrb	r5, [r0, #17]
{
   b6dd8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6dda:	b12d      	cbz	r5, b6de8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6ddc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6dde:	b003      	add	sp, #12
   b6de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6de4:	f7ff b8b2 	b.w	b5f4c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6de8:	7c00      	ldrb	r0, [r0, #16]
   b6dea:	9101      	str	r1, [sp, #4]
   b6dec:	f7ff f8de 	bl	b5fac <hal_usart_available_data_for_write>
   b6df0:	2800      	cmp	r0, #0
   b6df2:	9901      	ldr	r1, [sp, #4]
   b6df4:	dcf2      	bgt.n	b6ddc <_ZN11USARTSerial5writeEh+0x8>
}
   b6df6:	4628      	mov	r0, r5
   b6df8:	b003      	add	sp, #12
   b6dfa:	bd30      	pop	{r4, r5, pc}

000b6dfc <_ZN11USARTSerialD0Ev>:
   b6dfc:	b510      	push	{r4, lr}
   b6dfe:	2114      	movs	r1, #20
   b6e00:	4604      	mov	r4, r0
   b6e02:	f7fd f94e 	bl	b40a2 <_ZdlPvj>
   b6e06:	4620      	mov	r0, r4
   b6e08:	bd10      	pop	{r4, pc}
	...

000b6e0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6e0c:	b510      	push	{r4, lr}
   b6e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6e12:	4604      	mov	r4, r0
   b6e14:	4608      	mov	r0, r1
   b6e16:	4611      	mov	r1, r2
   b6e18:	2200      	movs	r2, #0
   b6e1a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6e1e:	4b04      	ldr	r3, [pc, #16]	; (b6e30 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6e20:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6e22:	2301      	movs	r3, #1
  _serial = serial;
   b6e24:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6e26:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6e28:	f7ff f8c8 	bl	b5fbc <hal_usart_init_ex>
}
   b6e2c:	4620      	mov	r0, r4
   b6e2e:	bd10      	pop	{r4, pc}
   b6e30:	000bb068 	.word	0x000bb068

000b6e34 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6e34:	4770      	bx	lr

000b6e36 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6e38:	4606      	mov	r6, r0
   b6e3a:	4615      	mov	r5, r2
   b6e3c:	460c      	mov	r4, r1
   b6e3e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6e40:	42bc      	cmp	r4, r7
   b6e42:	d006      	beq.n	b6e52 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6e44:	6833      	ldr	r3, [r6, #0]
   b6e46:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6e4a:	689b      	ldr	r3, [r3, #8]
   b6e4c:	4630      	mov	r0, r6
   b6e4e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6e50:	e7f6      	b.n	b6e40 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6e52:	4628      	mov	r0, r5
   b6e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6e56 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6e56:	7c00      	ldrb	r0, [r0, #16]
   b6e58:	2200      	movs	r2, #0
   b6e5a:	f7ff b8d7 	b.w	b600c <hal_i2c_write>

000b6e5e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6e5e:	7c00      	ldrb	r0, [r0, #16]
   b6e60:	2100      	movs	r1, #0
   b6e62:	f7ff b8db 	b.w	b601c <hal_i2c_available>

000b6e66 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6e66:	7c00      	ldrb	r0, [r0, #16]
   b6e68:	2100      	movs	r1, #0
   b6e6a:	f7ff b8df 	b.w	b602c <hal_i2c_read>

000b6e6e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6e6e:	7c00      	ldrb	r0, [r0, #16]
   b6e70:	2100      	movs	r1, #0
   b6e72:	f7ff b8e3 	b.w	b603c <hal_i2c_peek>

000b6e76 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6e76:	7c00      	ldrb	r0, [r0, #16]
   b6e78:	2100      	movs	r1, #0
   b6e7a:	f7ff b8e7 	b.w	b604c <hal_i2c_flush>

000b6e7e <_ZN7TwoWireD0Ev>:
   b6e7e:	b510      	push	{r4, lr}
   b6e80:	2114      	movs	r1, #20
   b6e82:	4604      	mov	r4, r0
   b6e84:	f7fd f90d 	bl	b40a2 <_ZdlPvj>
   b6e88:	4620      	mov	r0, r4
   b6e8a:	bd10      	pop	{r4, pc}

000b6e8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6e8c:	b510      	push	{r4, lr}
   b6e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6e92:	4604      	mov	r4, r0
   b6e94:	4608      	mov	r0, r1
   b6e96:	2100      	movs	r1, #0
   b6e98:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6e9c:	4b03      	ldr	r3, [pc, #12]	; (b6eac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b6e9e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6ea0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6ea2:	4611      	mov	r1, r2
   b6ea4:	f7ff f8e2 	bl	b606c <hal_i2c_init>
}
   b6ea8:	4620      	mov	r0, r4
   b6eaa:	bd10      	pop	{r4, pc}
   b6eac:	000bb098 	.word	0x000bb098

000b6eb0 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b6eb0:	7c00      	ldrb	r0, [r0, #16]
   b6eb2:	2200      	movs	r2, #0
   b6eb4:	f7ff b88a 	b.w	b5fcc <hal_i2c_set_speed>

000b6eb8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6eb8:	2300      	movs	r3, #0
   b6eba:	7c00      	ldrb	r0, [r0, #16]
   b6ebc:	461a      	mov	r2, r3
   b6ebe:	4619      	mov	r1, r3
   b6ec0:	f7ff b88c 	b.w	b5fdc <hal_i2c_begin>

000b6ec4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6ec4:	7c00      	ldrb	r0, [r0, #16]
   b6ec6:	2200      	movs	r2, #0
   b6ec8:	f7ff b890 	b.w	b5fec <hal_i2c_begin_transmission>

000b6ecc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6ecc:	b2c9      	uxtb	r1, r1
   b6ece:	f7ff bff9 	b.w	b6ec4 <_ZN7TwoWire17beginTransmissionEh>

000b6ed2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6ed2:	7c00      	ldrb	r0, [r0, #16]
   b6ed4:	2200      	movs	r2, #0
   b6ed6:	f7ff b891 	b.w	b5ffc <hal_i2c_end_transmission>

000b6eda <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6eda:	2101      	movs	r1, #1
   b6edc:	f7ff bff9 	b.w	b6ed2 <_ZN7TwoWire15endTransmissionEh>

000b6ee0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6ee0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6ee2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6ee4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6ee8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6eea:	2201      	movs	r2, #1
   b6eec:	f04f 33ff 	mov.w	r3, #4294967295
   b6ef0:	f10d 0107 	add.w	r1, sp, #7
   b6ef4:	47a0      	blx	r4
}
   b6ef6:	b002      	add	sp, #8
   b6ef8:	bd10      	pop	{r4, pc}

000b6efa <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6efa:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6efc:	6803      	ldr	r3, [r0, #0]
   b6efe:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6f00:	f04f 33ff 	mov.w	r3, #4294967295
   b6f04:	46a4      	mov	ip, r4
}
   b6f06:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6f0a:	4760      	bx	ip

000b6f0c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6f0c:	b513      	push	{r0, r1, r4, lr}
   b6f0e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6f10:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6f12:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6f16:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6f18:	f10d 0107 	add.w	r1, sp, #7
   b6f1c:	2201      	movs	r2, #1
   b6f1e:	47a0      	blx	r4
}
   b6f20:	b002      	add	sp, #8
   b6f22:	bd10      	pop	{r4, pc}

000b6f24 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6f24:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6f26:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6f28:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6f2c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6f30:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6f32:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6f34:	d008      	beq.n	b6f48 <_ZN9TCPClient4readEv+0x24>
   b6f36:	6963      	ldr	r3, [r4, #20]
   b6f38:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6f3c:	1c51      	adds	r1, r2, #1
   b6f3e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6f42:	4413      	add	r3, r2
   b6f44:	7918      	ldrb	r0, [r3, #4]
}
   b6f46:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6f48:	6803      	ldr	r3, [r0, #0]
   b6f4a:	691b      	ldr	r3, [r3, #16]
   b6f4c:	4798      	blx	r3
   b6f4e:	2800      	cmp	r0, #0
   b6f50:	d1f1      	bne.n	b6f36 <_ZN9TCPClient4readEv+0x12>
   b6f52:	f04f 30ff 	mov.w	r0, #4294967295
   b6f56:	e7f6      	b.n	b6f46 <_ZN9TCPClient4readEv+0x22>

000b6f58 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6f58:	4770      	bx	lr

000b6f5a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6f5a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6f5c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6f5e:	43c0      	mvns	r0, r0
   b6f60:	0fc0      	lsrs	r0, r0, #31
   b6f62:	4770      	bx	lr

000b6f64 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6f64:	4770      	bx	lr
	...

000b6f68 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6f68:	4b06      	ldr	r3, [pc, #24]	; (b6f84 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6f6a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6f6c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6f6e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6f72:	d005      	beq.n	b6f80 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6f74:	4608      	mov	r0, r1
   b6f76:	f000 fc67 	bl	b7848 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6f7a:	2800      	cmp	r0, #0
   b6f7c:	bf08      	it	eq
   b6f7e:	2400      	moveq	r4, #0
      }
   b6f80:	4620      	mov	r0, r4
   b6f82:	bd10      	pop	{r4, pc}
   b6f84:	000bafe4 	.word	0x000bafe4

000b6f88 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6f88:	b510      	push	{r4, lr}
   b6f8a:	21ac      	movs	r1, #172	; 0xac
   b6f8c:	4604      	mov	r4, r0
   b6f8e:	f7fd f888 	bl	b40a2 <_ZdlPvj>
   b6f92:	4620      	mov	r0, r4
   b6f94:	bd10      	pop	{r4, pc}

000b6f96 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6f96:	21ac      	movs	r1, #172	; 0xac
   b6f98:	f7fd b883 	b.w	b40a2 <_ZdlPvj>

000b6f9c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6fa0:	f04f 0800 	mov.w	r8, #0
   b6fa4:	b086      	sub	sp, #24
   b6fa6:	461c      	mov	r4, r3
   b6fa8:	f8c0 8004 	str.w	r8, [r0, #4]
   b6fac:	4605      	mov	r5, r0
   b6fae:	460e      	mov	r6, r1
   b6fb0:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6fb2:	4641      	mov	r1, r8
   b6fb4:	2210      	movs	r2, #16
   b6fb6:	a802      	add	r0, sp, #8
   b6fb8:	f001 fa91 	bl	b84de <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6fbc:	1c63      	adds	r3, r4, #1
   b6fbe:	d009      	beq.n	b6fd4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6fc4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6fc8:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6fcc:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6fd0:	435c      	muls	r4, r3
   b6fd2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6fd4:	6968      	ldr	r0, [r5, #20]
   b6fd6:	2310      	movs	r3, #16
   b6fd8:	9300      	str	r3, [sp, #0]
   b6fda:	6800      	ldr	r0, [r0, #0]
   b6fdc:	ab02      	add	r3, sp, #8
   b6fde:	f241 0205 	movw	r2, #4101	; 0x1005
   b6fe2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6fe6:	f7ff f849 	bl	b607c <sock_setsockopt>
    if (ret < 0) {
   b6fea:	2800      	cmp	r0, #0
   b6fec:	da07      	bge.n	b6ffe <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6fee:	f7ff f9b9 	bl	b6364 <__errno>
   b6ff2:	6803      	ldr	r3, [r0, #0]
   b6ff4:	606b      	str	r3, [r5, #4]
        return 0;
   b6ff6:	2000      	movs	r0, #0
}
   b6ff8:	b006      	add	sp, #24
   b6ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6ffe:	6968      	ldr	r0, [r5, #20]
   b7000:	2300      	movs	r3, #0
   b7002:	6800      	ldr	r0, [r0, #0]
   b7004:	463a      	mov	r2, r7
   b7006:	4631      	mov	r1, r6
   b7008:	f7ff f858 	bl	b60bc <sock_send>
    if (ret < 0) {
   b700c:	1e03      	subs	r3, r0, #0
   b700e:	dbee      	blt.n	b6fee <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7010:	4618      	mov	r0, r3
   b7012:	e7f1      	b.n	b6ff8 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7014 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7014:	b530      	push	{r4, r5, lr}
   b7016:	b087      	sub	sp, #28
   b7018:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b701a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b701c:	4668      	mov	r0, sp
   b701e:	f7ff fe27 	bl	b6c70 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7024:	3404      	adds	r4, #4
   b7026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7028:	682b      	ldr	r3, [r5, #0]
   b702a:	7023      	strb	r3, [r4, #0]
    }
   b702c:	b007      	add	sp, #28
   b702e:	bd30      	pop	{r4, r5, pc}

000b7030 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7030:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7032:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7034:	4b05      	ldr	r3, [pc, #20]	; (b704c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b7036:	4604      	mov	r4, r0
   b7038:	358c      	adds	r5, #140	; 0x8c
   b703a:	f844 3b04 	str.w	r3, [r4], #4
   b703e:	4606      	mov	r6, r0
   b7040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7044:	682b      	ldr	r3, [r5, #0]
   b7046:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7048:	4630      	mov	r0, r6
   b704a:	bd70      	pop	{r4, r5, r6, pc}
   b704c:	000bb024 	.word	0x000bb024

000b7050 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7054:	4698      	mov	r8, r3
    stop();
   b7056:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7058:	b093      	sub	sp, #76	; 0x4c
   b705a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b705c:	2400      	movs	r4, #0
    stop();
   b705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7060:	4606      	mov	r6, r0
   b7062:	4617      	mov	r7, r2
    stop();
   b7064:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7066:	4628      	mov	r0, r5
   b7068:	466b      	mov	r3, sp
   b706a:	4622      	mov	r2, r4
   b706c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b706e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7070:	f7fe fee4 	bl	b5e3c <netdb_getaddrinfo>
   b7074:	4605      	mov	r5, r0
   b7076:	2800      	cmp	r0, #0
   b7078:	d163      	bne.n	b7142 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b707a:	9b00      	ldr	r3, [sp, #0]
   b707c:	2b00      	cmp	r3, #0
   b707e:	d04b      	beq.n	b7118 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7080:	695b      	ldr	r3, [r3, #20]
   b7082:	2b00      	cmp	r3, #0
   b7084:	d048      	beq.n	b7118 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b7086:	a806      	add	r0, sp, #24
   b7088:	f7ff fdae 	bl	b6be8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b708c:	9b00      	ldr	r3, [sp, #0]
   b708e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7090:	7863      	ldrb	r3, [r4, #1]
   b7092:	2b02      	cmp	r3, #2
   b7094:	d104      	bne.n	b70a0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7096:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7098:	a806      	add	r0, sp, #24
   b709a:	f7ff ffbb 	bl	b7014 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b709e:	e026      	b.n	b70ee <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b70a0:	2b0a      	cmp	r3, #10
   b70a2:	d124      	bne.n	b70ee <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b70a4:	2211      	movs	r2, #17
   b70a6:	4629      	mov	r1, r5
   b70a8:	a801      	add	r0, sp, #4
   b70aa:	f001 fa18 	bl	b84de <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b70ae:	68a3      	ldr	r3, [r4, #8]
   b70b0:	2b00      	cmp	r3, #0
   b70b2:	d038      	beq.n	b7126 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b70b4:	f104 0308 	add.w	r3, r4, #8
   b70b8:	f10d 0c04 	add.w	ip, sp, #4
   b70bc:	3418      	adds	r4, #24
   b70be:	6818      	ldr	r0, [r3, #0]
   b70c0:	6859      	ldr	r1, [r3, #4]
   b70c2:	4662      	mov	r2, ip
   b70c4:	c203      	stmia	r2!, {r0, r1}
   b70c6:	3308      	adds	r3, #8
   b70c8:	42a3      	cmp	r3, r4
   b70ca:	4694      	mov	ip, r2
   b70cc:	d1f7      	bne.n	b70be <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b70ce:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b70d0:	a901      	add	r1, sp, #4
   b70d2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b70d4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b70d8:	f7ff fd94 	bl	b6c04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b70dc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b70e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b70e4:	ac07      	add	r4, sp, #28
   b70e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b70e8:	f8dc 3000 	ldr.w	r3, [ip]
   b70ec:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b70ee:	a806      	add	r0, sp, #24
   b70f0:	f7ff fd9a 	bl	b6c28 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b70f4:	b180      	cbz	r0, b7118 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b70f6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b70f8:	ad07      	add	r5, sp, #28
   b70fa:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b70fe:	4b12      	ldr	r3, [pc, #72]	; (b7148 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7100:	930c      	str	r3, [sp, #48]	; 0x30
   b7102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7104:	ac0d      	add	r4, sp, #52	; 0x34
   b7106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7108:	682b      	ldr	r3, [r5, #0]
   b710a:	7023      	strb	r3, [r4, #0]
   b710c:	463a      	mov	r2, r7
   b710e:	4643      	mov	r3, r8
   b7110:	a90c      	add	r1, sp, #48	; 0x30
   b7112:	4630      	mov	r0, r6
   b7114:	47c8      	blx	r9
   b7116:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7118:	9800      	ldr	r0, [sp, #0]
   b711a:	f7fe fe87 	bl	b5e2c <netdb_freeaddrinfo>
}
   b711e:	4628      	mov	r0, r5
   b7120:	b013      	add	sp, #76	; 0x4c
   b7122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7126:	68e3      	ldr	r3, [r4, #12]
   b7128:	2b00      	cmp	r3, #0
   b712a:	d1c3      	bne.n	b70b4 <_ZN9TCPClient7connectEPKctm+0x64>
   b712c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7130:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7134:	f7fe fefa 	bl	b5f2c <inet_htonl>
   b7138:	4581      	cmp	r9, r0
   b713a:	d1bb      	bne.n	b70b4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b713c:	f104 0114 	add.w	r1, r4, #20
   b7140:	e7aa      	b.n	b7098 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7142:	4625      	mov	r5, r4
   b7144:	e7e8      	b.n	b7118 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7146:	bf00      	nop
   b7148:	000bb024 	.word	0x000bb024

000b714c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b714c:	b538      	push	{r3, r4, r5, lr}
   b714e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7150:	681a      	ldr	r2, [r3, #0]
   b7152:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7154:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b7156:	da10      	bge.n	b717a <_ZN9TCPClient9connectedEv+0x2e>
   b7158:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b715c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7160:	429a      	cmp	r2, r3
   b7162:	d10a      	bne.n	b717a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7164:	6803      	ldr	r3, [r0, #0]
   b7166:	691b      	ldr	r3, [r3, #16]
   b7168:	4798      	blx	r3
        if (!rv) {
   b716a:	4604      	mov	r4, r0
   b716c:	b928      	cbnz	r0, b717a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b716e:	682b      	ldr	r3, [r5, #0]
   b7170:	4628      	mov	r0, r5
   b7172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7174:	4798      	blx	r3
        rv = available();
   b7176:	4620      	mov	r0, r4
}
   b7178:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b717a:	2001      	movs	r0, #1
   b717c:	e7fc      	b.n	b7178 <_ZN9TCPClient9connectedEv+0x2c>

000b717e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b717e:	b510      	push	{r4, lr}
   b7180:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7182:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7186:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b718a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b718c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b718e:	d005      	beq.n	b719c <_ZN9TCPClient4peekEv+0x1e>
   b7190:	6963      	ldr	r3, [r4, #20]
   b7192:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7196:	4413      	add	r3, r2
   b7198:	7918      	ldrb	r0, [r3, #4]
}
   b719a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b719c:	6803      	ldr	r3, [r0, #0]
   b719e:	691b      	ldr	r3, [r3, #16]
   b71a0:	4798      	blx	r3
   b71a2:	2800      	cmp	r0, #0
   b71a4:	d1f4      	bne.n	b7190 <_ZN9TCPClient4peekEv+0x12>
   b71a6:	f04f 30ff 	mov.w	r0, #4294967295
   b71aa:	e7f6      	b.n	b719a <_ZN9TCPClient4peekEv+0x1c>

000b71ac <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b71ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b71ae:	6943      	ldr	r3, [r0, #20]
   b71b0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b71b2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b71b6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b71ba:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b71bc:	4605      	mov	r5, r0
   b71be:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b71c0:	d016      	beq.n	b71f0 <_ZN9TCPClient4readEPhj+0x44>
   b71c2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b71c4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b71c8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b71cc:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b71ce:	42bc      	cmp	r4, r7
   b71d0:	bf28      	it	cs
   b71d2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b71d4:	3304      	adds	r3, #4
   b71d6:	4622      	mov	r2, r4
   b71d8:	4419      	add	r1, r3
   b71da:	4630      	mov	r0, r6
   b71dc:	f001 f971 	bl	b84c2 <memcpy>
   b71e0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b71e2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b71e6:	4423      	add	r3, r4
   b71e8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b71ec:	4620      	mov	r0, r4
   b71ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b71f0:	6803      	ldr	r3, [r0, #0]
   b71f2:	691b      	ldr	r3, [r3, #16]
   b71f4:	4798      	blx	r3
   b71f6:	2800      	cmp	r0, #0
   b71f8:	d1e3      	bne.n	b71c2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b71fa:	f04f 34ff 	mov.w	r4, #4294967295
   b71fe:	e7f5      	b.n	b71ec <_ZN9TCPClient4readEPhj+0x40>

000b7200 <_ZN9TCPClient12flush_bufferEv>:
   b7200:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7202:	2300      	movs	r3, #0
   b7204:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7208:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b720a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b720e:	4770      	bx	lr

000b7210 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7214:	461f      	mov	r7, r3
    stop();
   b7216:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7218:	460c      	mov	r4, r1
    stop();
   b721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b721c:	b08a      	sub	sp, #40	; 0x28
   b721e:	4605      	mov	r5, r0
   b7220:	4616      	mov	r6, r2
    stop();
   b7222:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7224:	7d23      	ldrb	r3, [r4, #20]
   b7226:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b722a:	2b04      	cmp	r3, #4
   b722c:	bf0c      	ite	eq
   b722e:	2002      	moveq	r0, #2
   b7230:	200a      	movne	r0, #10
   b7232:	2206      	movs	r2, #6
   b7234:	2101      	movs	r1, #1
   b7236:	f7fe ff49 	bl	b60cc <sock_socket>
   b723a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b723e:	696b      	ldr	r3, [r5, #20]
   b7240:	681b      	ldr	r3, [r3, #0]
   b7242:	2b00      	cmp	r3, #0
   b7244:	da08      	bge.n	b7258 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7246:	682b      	ldr	r3, [r5, #0]
   b7248:	4628      	mov	r0, r5
   b724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b724c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b724e:	4798      	blx	r3
}
   b7250:	4620      	mov	r0, r4
   b7252:	b00a      	add	sp, #40	; 0x28
   b7254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7258:	4628      	mov	r0, r5
   b725a:	f7ff ffd1 	bl	b7200 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b725e:	b1b7      	cbz	r7, b728e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7260:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7262:	a903      	add	r1, sp, #12
   b7264:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7266:	9303      	str	r3, [sp, #12]
   b7268:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b726c:	f7fe fe0e 	bl	b5e8c <if_index_to_name>
   b7270:	2800      	cmp	r0, #0
   b7272:	d1e8      	bne.n	b7246 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7274:	6968      	ldr	r0, [r5, #20]
   b7276:	2306      	movs	r3, #6
   b7278:	9300      	str	r3, [sp, #0]
   b727a:	6800      	ldr	r0, [r0, #0]
   b727c:	ab03      	add	r3, sp, #12
   b727e:	f241 020b 	movw	r2, #4107	; 0x100b
   b7282:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7286:	f7fe fef9 	bl	b607c <sock_setsockopt>
   b728a:	2800      	cmp	r0, #0
   b728c:	d1db      	bne.n	b7246 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b728e:	221c      	movs	r2, #28
   b7290:	2100      	movs	r1, #0
   b7292:	a803      	add	r0, sp, #12
   b7294:	f001 f923 	bl	b84de <memset>
    if (ip.version() == 4) {
   b7298:	7d23      	ldrb	r3, [r4, #20]
   b729a:	2b04      	cmp	r3, #4
   b729c:	d11d      	bne.n	b72da <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b729e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b72a2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b72a4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b72a8:	f7fe fe48 	bl	b5f3c <inet_htons>
   b72ac:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b72b0:	6860      	ldr	r0, [r4, #4]
   b72b2:	f7fe fe3b 	bl	b5f2c <inet_htonl>
   b72b6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b72b8:	696b      	ldr	r3, [r5, #20]
   b72ba:	221c      	movs	r2, #28
   b72bc:	6818      	ldr	r0, [r3, #0]
   b72be:	a903      	add	r1, sp, #12
   b72c0:	f7fe feec 	bl	b609c <sock_connect>
   b72c4:	2800      	cmp	r0, #0
   b72c6:	d1be      	bne.n	b7246 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b72c8:	3404      	adds	r4, #4
   b72ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b72cc:	696d      	ldr	r5, [r5, #20]
   b72ce:	358c      	adds	r5, #140	; 0x8c
   b72d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b72d2:	6823      	ldr	r3, [r4, #0]
   b72d4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b72d6:	2401      	movs	r4, #1
   b72d8:	e7ba      	b.n	b7250 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b72da:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b72de:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b72e0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b72e4:	f7fe fe2a 	bl	b5f3c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b72e8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b72ea:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b72ee:	1d23      	adds	r3, r4, #4
   b72f0:	f104 0714 	add.w	r7, r4, #20
   b72f4:	6818      	ldr	r0, [r3, #0]
   b72f6:	6859      	ldr	r1, [r3, #4]
   b72f8:	4632      	mov	r2, r6
   b72fa:	c203      	stmia	r2!, {r0, r1}
   b72fc:	3308      	adds	r3, #8
   b72fe:	42bb      	cmp	r3, r7
   b7300:	4616      	mov	r6, r2
   b7302:	d1f7      	bne.n	b72f4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7304:	e7d8      	b.n	b72b8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7308 <_ZN9TCPClient9availableEv>:
{
   b7308:	b530      	push	{r4, r5, lr}
   b730a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b730c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7310:	b08b      	sub	sp, #44	; 0x2c
   b7312:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7314:	b12b      	cbz	r3, b7322 <_ZN9TCPClient9availableEv+0x1a>
   b7316:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b731a:	429a      	cmp	r2, r3
   b731c:	d101      	bne.n	b7322 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b731e:	f7ff ff6f 	bl	b7200 <_ZN9TCPClient12flush_bufferEv>
   b7322:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7324:	6808      	ldr	r0, [r1, #0]
   b7326:	2800      	cmp	r0, #0
   b7328:	db18      	blt.n	b735c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b732a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b732e:	2d7f      	cmp	r5, #127	; 0x7f
   b7330:	d814      	bhi.n	b735c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7332:	3104      	adds	r1, #4
   b7334:	2308      	movs	r3, #8
   b7336:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b733a:	4429      	add	r1, r5
   b733c:	f7fe feb6 	bl	b60ac <sock_recv>
            if (ret > 0) {
   b7340:	2800      	cmp	r0, #0
   b7342:	dd13      	ble.n	b736c <_ZN9TCPClient9availableEv+0x64>
   b7344:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7346:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b734a:	b90a      	cbnz	r2, b7350 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b734c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7350:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7352:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7356:	4410      	add	r0, r2
   b7358:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b735c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b735e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7362:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7366:	1ac0      	subs	r0, r0, r3
   b7368:	b00b      	add	sp, #44	; 0x2c
   b736a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b736c:	f7fe fffa 	bl	b6364 <__errno>
   b7370:	6803      	ldr	r3, [r0, #0]
   b7372:	2b0b      	cmp	r3, #11
   b7374:	d0f2      	beq.n	b735c <_ZN9TCPClient9availableEv+0x54>
   b7376:	f7fe fff5 	bl	b6364 <__errno>
   b737a:	6803      	ldr	r3, [r0, #0]
   b737c:	2b0b      	cmp	r3, #11
   b737e:	d0ed      	beq.n	b735c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7380:	2320      	movs	r3, #32
   b7382:	2500      	movs	r5, #0
   b7384:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7388:	f7fe ffec 	bl	b6364 <__errno>
   b738c:	6803      	ldr	r3, [r0, #0]
   b738e:	9301      	str	r3, [sp, #4]
   b7390:	4b08      	ldr	r3, [pc, #32]	; (b73b4 <_ZN9TCPClient9availableEv+0xac>)
   b7392:	4909      	ldr	r1, [pc, #36]	; (b73b8 <_ZN9TCPClient9availableEv+0xb0>)
   b7394:	9300      	str	r3, [sp, #0]
   b7396:	aa02      	add	r2, sp, #8
   b7398:	462b      	mov	r3, r5
   b739a:	2032      	movs	r0, #50	; 0x32
   b739c:	f7fe ff16 	bl	b61cc <log_message>
                    sock_close(d_->sock);
   b73a0:	6963      	ldr	r3, [r4, #20]
   b73a2:	6818      	ldr	r0, [r3, #0]
   b73a4:	f7fe fe72 	bl	b608c <sock_close>
   b73a8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b73aa:	f04f 32ff 	mov.w	r2, #4294967295
   b73ae:	601a      	str	r2, [r3, #0]
   b73b0:	e7d4      	b.n	b735c <_ZN9TCPClient9availableEv+0x54>
   b73b2:	bf00      	nop
   b73b4:	000bb0bf 	.word	0x000bb0bf
   b73b8:	000bb0b8 	.word	0x000bb0b8

000b73bc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b73bc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b73be:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b73c0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b73c2:	6818      	ldr	r0, [r3, #0]
   b73c4:	2800      	cmp	r0, #0
   b73c6:	db01      	blt.n	b73cc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b73c8:	f7fe fe60 	bl	b608c <sock_close>
   b73cc:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b73ce:	f04f 32ff 	mov.w	r2, #4294967295
   b73d2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b73d4:	6960      	ldr	r0, [r4, #20]
   b73d6:	2211      	movs	r2, #17
   b73d8:	2100      	movs	r1, #0
   b73da:	308c      	adds	r0, #140	; 0x8c
   b73dc:	f001 f87f 	bl	b84de <memset>
    flush_buffer();
   b73e0:	4620      	mov	r0, r4
}
   b73e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b73e6:	f7ff bf0b 	b.w	b7200 <_ZN9TCPClient12flush_bufferEv>

000b73ea <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b73ea:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b73ec:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b73ee:	4604      	mov	r4, r0
          total(0) {
   b73f0:	6001      	str	r1, [r0, #0]
   b73f2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b73f6:	3088      	adds	r0, #136	; 0x88
   b73f8:	f7ff fbf6 	bl	b6be8 <_ZN9IPAddressC1Ev>
}
   b73fc:	4620      	mov	r0, r4
   b73fe:	bd10      	pop	{r4, pc}

000b7400 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7400:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7402:	2300      	movs	r3, #0
   b7404:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7408:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b740c:	4a0e      	ldr	r2, [pc, #56]	; (b7448 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b740e:	6103      	str	r3, [r0, #16]
   b7410:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7412:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7414:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7416:	20ac      	movs	r0, #172	; 0xac
   b7418:	9101      	str	r1, [sp, #4]
   b741a:	f7fc fe3c 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b741e:	1e05      	subs	r5, r0, #0
   b7420:	f105 060c 	add.w	r6, r5, #12
   b7424:	d008      	beq.n	b7438 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7426:	2301      	movs	r3, #1
   b7428:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b742c:	4b07      	ldr	r3, [pc, #28]	; (b744c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b742e:	9901      	ldr	r1, [sp, #4]
   b7430:	602b      	str	r3, [r5, #0]
   b7432:	4630      	mov	r0, r6
   b7434:	f7ff ffd9 	bl	b73ea <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7438:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b743a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b743e:	f7ff fedf 	bl	b7200 <_ZN9TCPClient12flush_bufferEv>
}
   b7442:	b002      	add	sp, #8
   b7444:	bd70      	pop	{r4, r5, r6, pc}
   b7446:	bf00      	nop
   b7448:	000bb0f4 	.word	0x000bb0f4
   b744c:	000bb0d8 	.word	0x000bb0d8

000b7450 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7450:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7452:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b7456:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7458:	f7ff ffd2 	bl	b7400 <_ZN9TCPClientC1Ei>
}
   b745c:	4620      	mov	r0, r4
   b745e:	bd10      	pop	{r4, pc}

000b7460 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7460:	b510      	push	{r4, lr}
   b7462:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7464:	6800      	ldr	r0, [r0, #0]
   b7466:	2800      	cmp	r0, #0
   b7468:	db01      	blt.n	b746e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b746a:	f7fe fe0f 	bl	b608c <sock_close>
    }
}
   b746e:	4620      	mov	r0, r4
   b7470:	bd10      	pop	{r4, pc}

000b7472 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7472:	300c      	adds	r0, #12
   b7474:	f7ff bff4 	b.w	b7460 <_ZN9TCPClient4DataD1Ev>

000b7478 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7478:	2200      	movs	r2, #0
   b747a:	6840      	ldr	r0, [r0, #4]
   b747c:	4611      	mov	r1, r2
   b747e:	f7fe bef1 	b.w	b6264 <network_ready>

000b7482 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7482:	2200      	movs	r2, #0
   b7484:	6840      	ldr	r0, [r0, #4]
   b7486:	4611      	mov	r1, r2
   b7488:	f7fe bf0c 	b.w	b62a4 <network_listening>

000b748c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b748c:	2200      	movs	r2, #0
   b748e:	6840      	ldr	r0, [r0, #4]
   b7490:	4611      	mov	r1, r2
   b7492:	f7fe bf17 	b.w	b62c4 <network_get_listen_timeout>

000b7496 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7496:	6840      	ldr	r0, [r0, #4]
   b7498:	2200      	movs	r2, #0
   b749a:	f7fe bf0b 	b.w	b62b4 <network_set_listen_timeout>

000b749e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b749e:	6840      	ldr	r0, [r0, #4]
   b74a0:	2200      	movs	r2, #0
   b74a2:	f081 0101 	eor.w	r1, r1, #1
   b74a6:	f7fe bef5 	b.w	b6294 <network_listen>

000b74aa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b74aa:	2300      	movs	r3, #0
   b74ac:	6840      	ldr	r0, [r0, #4]
   b74ae:	461a      	mov	r2, r3
   b74b0:	4619      	mov	r1, r3
   b74b2:	f7fe bee7 	b.w	b6284 <network_off>

000b74b6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b74b6:	2300      	movs	r3, #0
   b74b8:	6840      	ldr	r0, [r0, #4]
   b74ba:	461a      	mov	r2, r3
   b74bc:	4619      	mov	r1, r3
   b74be:	f7fe bed9 	b.w	b6274 <network_on>

000b74c2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b74c2:	2200      	movs	r2, #0
   b74c4:	6840      	ldr	r0, [r0, #4]
   b74c6:	4611      	mov	r1, r2
   b74c8:	f7fe bebc 	b.w	b6244 <network_connecting>

000b74cc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b74cc:	6840      	ldr	r0, [r0, #4]
   b74ce:	2200      	movs	r2, #0
   b74d0:	2102      	movs	r1, #2
   b74d2:	f7fe bebf 	b.w	b6254 <network_disconnect>

000b74d6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b74d6:	2300      	movs	r3, #0
   b74d8:	6840      	ldr	r0, [r0, #4]
   b74da:	461a      	mov	r2, r3
   b74dc:	f7fe beaa 	b.w	b6234 <network_connect>

000b74e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b74e0:	4b02      	ldr	r3, [pc, #8]	; (b74ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b74e2:	2204      	movs	r2, #4
   b74e4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b74e6:	4a02      	ldr	r2, [pc, #8]	; (b74f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b74e8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b74ea:	4770      	bx	lr
   b74ec:	2003e718 	.word	0x2003e718
   b74f0:	000bb140 	.word	0x000bb140

000b74f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b74f4:	2300      	movs	r3, #0
   b74f6:	6840      	ldr	r0, [r0, #4]
   b74f8:	461a      	mov	r2, r3
   b74fa:	f7fe be9b 	b.w	b6234 <network_connect>

000b74fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b74fe:	6840      	ldr	r0, [r0, #4]
   b7500:	2200      	movs	r2, #0
   b7502:	2102      	movs	r1, #2
   b7504:	f7fe bea6 	b.w	b6254 <network_disconnect>

000b7508 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7508:	2200      	movs	r2, #0
   b750a:	6840      	ldr	r0, [r0, #4]
   b750c:	4611      	mov	r1, r2
   b750e:	f7fe be99 	b.w	b6244 <network_connecting>

000b7512 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7512:	2200      	movs	r2, #0
   b7514:	6840      	ldr	r0, [r0, #4]
   b7516:	4611      	mov	r1, r2
   b7518:	f7fe bea4 	b.w	b6264 <network_ready>

000b751c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b751c:	2300      	movs	r3, #0
   b751e:	6840      	ldr	r0, [r0, #4]
   b7520:	461a      	mov	r2, r3
   b7522:	4619      	mov	r1, r3
   b7524:	f7fe bea6 	b.w	b6274 <network_on>

000b7528 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7528:	2300      	movs	r3, #0
   b752a:	6840      	ldr	r0, [r0, #4]
   b752c:	461a      	mov	r2, r3
   b752e:	4619      	mov	r1, r3
   b7530:	f7fe bea8 	b.w	b6284 <network_off>

000b7534 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7534:	6840      	ldr	r0, [r0, #4]
   b7536:	2100      	movs	r1, #0
   b7538:	f7fe becc 	b.w	b62d4 <network_is_on>

000b753c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b753c:	6840      	ldr	r0, [r0, #4]
   b753e:	2100      	movs	r1, #0
   b7540:	f7fe bed0 	b.w	b62e4 <network_is_off>

000b7544 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7544:	6840      	ldr	r0, [r0, #4]
   b7546:	2200      	movs	r2, #0
   b7548:	f081 0101 	eor.w	r1, r1, #1
   b754c:	f7fe bea2 	b.w	b6294 <network_listen>

000b7550 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7550:	6840      	ldr	r0, [r0, #4]
   b7552:	2200      	movs	r2, #0
   b7554:	f7fe beae 	b.w	b62b4 <network_set_listen_timeout>

000b7558 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7558:	2200      	movs	r2, #0
   b755a:	6840      	ldr	r0, [r0, #4]
   b755c:	4611      	mov	r1, r2
   b755e:	f7fe beb1 	b.w	b62c4 <network_get_listen_timeout>

000b7562 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7562:	2200      	movs	r2, #0
   b7564:	6840      	ldr	r0, [r0, #4]
   b7566:	4611      	mov	r1, r2
   b7568:	f7fe be9c 	b.w	b62a4 <network_listening>

000b756c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b756c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7570:	b095      	sub	sp, #84	; 0x54
   b7572:	4614      	mov	r4, r2
   b7574:	460d      	mov	r5, r1
   b7576:	4607      	mov	r7, r0
    IPAddress addr;
   b7578:	f7ff fb36 	bl	b6be8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b757c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b757e:	221c      	movs	r2, #28
   b7580:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7582:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7584:	f000 ffab 	bl	b84de <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7588:	2340      	movs	r3, #64	; 0x40
   b758a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b758c:	4620      	mov	r0, r4
   b758e:	466b      	mov	r3, sp
   b7590:	aa0c      	add	r2, sp, #48	; 0x30
   b7592:	2100      	movs	r1, #0
   b7594:	f7fe fc52 	bl	b5e3c <netdb_getaddrinfo>
    if (!r) {
   b7598:	4604      	mov	r4, r0
   b759a:	2800      	cmp	r0, #0
   b759c:	d14b      	bne.n	b7636 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b759e:	4602      	mov	r2, r0
   b75a0:	2101      	movs	r1, #1
   b75a2:	6868      	ldr	r0, [r5, #4]
   b75a4:	f7fe fe5e 	bl	b6264 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b75a8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b75aa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b75ac:	4622      	mov	r2, r4
   b75ae:	6868      	ldr	r0, [r5, #4]
   b75b0:	f7fe fe58 	bl	b6264 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b75b4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b75b6:	4681      	mov	r9, r0
        bool ok = false;
   b75b8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b75ba:	2e00      	cmp	r6, #0
   b75bc:	d03b      	beq.n	b7636 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b75be:	2900      	cmp	r1, #0
   b75c0:	d139      	bne.n	b7636 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b75c2:	6873      	ldr	r3, [r6, #4]
   b75c4:	2b02      	cmp	r3, #2
   b75c6:	d003      	beq.n	b75d0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b75c8:	2b0a      	cmp	r3, #10
   b75ca:	d011      	beq.n	b75f0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b75cc:	69f6      	ldr	r6, [r6, #28]
   b75ce:	e7f4      	b.n	b75ba <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b75d0:	f1b8 0f00 	cmp.w	r8, #0
   b75d4:	d0fa      	beq.n	b75cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b75d6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b75d8:	a806      	add	r0, sp, #24
   b75da:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b75dc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b75de:	f7ff fb47 	bl	b6c70 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b75e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b75e4:	1d3c      	adds	r4, r7, #4
   b75e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b75e8:	682b      	ldr	r3, [r5, #0]
   b75ea:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b75ec:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b75ee:	e7ed      	b.n	b75cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b75f0:	f1b9 0f00 	cmp.w	r9, #0
   b75f4:	d0ea      	beq.n	b75cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b75f6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b75f8:	2210      	movs	r2, #16
   b75fa:	a801      	add	r0, sp, #4
   b75fc:	f000 ff6f 	bl	b84de <memset>
                    a.v = 6;
   b7600:	2306      	movs	r3, #6
   b7602:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7606:	ad01      	add	r5, sp, #4
   b7608:	f104 0308 	add.w	r3, r4, #8
   b760c:	3418      	adds	r4, #24
   b760e:	6818      	ldr	r0, [r3, #0]
   b7610:	6859      	ldr	r1, [r3, #4]
   b7612:	462a      	mov	r2, r5
   b7614:	c203      	stmia	r2!, {r0, r1}
   b7616:	3308      	adds	r3, #8
   b7618:	42a3      	cmp	r3, r4
   b761a:	4615      	mov	r5, r2
   b761c:	d1f7      	bne.n	b760e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b761e:	a901      	add	r1, sp, #4
   b7620:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7622:	ad07      	add	r5, sp, #28
   b7624:	f7ff faee 	bl	b6c04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b762a:	1d3c      	adds	r4, r7, #4
   b762c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b762e:	682b      	ldr	r3, [r5, #0]
   b7630:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7632:	4649      	mov	r1, r9
   b7634:	e7ca      	b.n	b75cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7636:	9800      	ldr	r0, [sp, #0]
   b7638:	f7fe fbf8 	bl	b5e2c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b763c:	4638      	mov	r0, r7
   b763e:	b015      	add	sp, #84	; 0x54
   b7640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7644 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7644:	4b02      	ldr	r3, [pc, #8]	; (b7650 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7646:	4a03      	ldr	r2, [pc, #12]	; (b7654 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7648:	601a      	str	r2, [r3, #0]
   b764a:	2200      	movs	r2, #0
   b764c:	605a      	str	r2, [r3, #4]

} // spark
   b764e:	4770      	bx	lr
   b7650:	2003e720 	.word	0x2003e720
   b7654:	000bb17c 	.word	0x000bb17c

000b7658 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7658:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b765a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b765c:	d902      	bls.n	b7664 <pinAvailable+0xc>
    return false;
   b765e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7660:	b002      	add	sp, #8
   b7662:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7664:	f1a0 030b 	sub.w	r3, r0, #11
   b7668:	2b02      	cmp	r3, #2
   b766a:	d81a      	bhi.n	b76a2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b766c:	4c17      	ldr	r4, [pc, #92]	; (b76cc <pinAvailable+0x74>)
   b766e:	7821      	ldrb	r1, [r4, #0]
   b7670:	f3bf 8f5b 	dmb	ish
   b7674:	f011 0101 	ands.w	r1, r1, #1
   b7678:	d10b      	bne.n	b7692 <pinAvailable+0x3a>
   b767a:	4620      	mov	r0, r4
   b767c:	9101      	str	r1, [sp, #4]
   b767e:	f7fc fd1f 	bl	b40c0 <__cxa_guard_acquire>
   b7682:	9901      	ldr	r1, [sp, #4]
   b7684:	b128      	cbz	r0, b7692 <pinAvailable+0x3a>
   b7686:	4812      	ldr	r0, [pc, #72]	; (b76d0 <pinAvailable+0x78>)
   b7688:	f7fe fec8 	bl	b641c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b768c:	4620      	mov	r0, r4
   b768e:	f7fc fd1c 	bl	b40ca <__cxa_guard_release>
   b7692:	4b0f      	ldr	r3, [pc, #60]	; (b76d0 <pinAvailable+0x78>)
   b7694:	7818      	ldrb	r0, [r3, #0]
   b7696:	f7fe fd39 	bl	b610c <hal_spi_is_enabled>
   b769a:	2800      	cmp	r0, #0
   b769c:	d1df      	bne.n	b765e <pinAvailable+0x6>
  return true; // 'pin' is available
   b769e:	2001      	movs	r0, #1
   b76a0:	e7de      	b.n	b7660 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b76a2:	2801      	cmp	r0, #1
   b76a4:	d809      	bhi.n	b76ba <pinAvailable+0x62>
   b76a6:	f000 f8a9 	bl	b77fc <_Z19__fetch_global_Wirev>
   b76aa:	2100      	movs	r1, #0
   b76ac:	7c00      	ldrb	r0, [r0, #16]
   b76ae:	f7fe fcd5 	bl	b605c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b76b2:	f080 0001 	eor.w	r0, r0, #1
   b76b6:	b2c0      	uxtb	r0, r0
   b76b8:	e7d2      	b.n	b7660 <pinAvailable+0x8>
   b76ba:	3809      	subs	r0, #9
   b76bc:	2801      	cmp	r0, #1
   b76be:	d8ee      	bhi.n	b769e <pinAvailable+0x46>
   b76c0:	f000 f860 	bl	b7784 <_Z22__fetch_global_Serial1v>
   b76c4:	7c00      	ldrb	r0, [r0, #16]
   b76c6:	f7fe fc69 	bl	b5f9c <hal_usart_is_enabled>
   b76ca:	e7f2      	b.n	b76b2 <pinAvailable+0x5a>
   b76cc:	2003e6b8 	.word	0x2003e6b8
   b76d0:	2003e6bc 	.word	0x2003e6bc

000b76d4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b76d4:	2823      	cmp	r0, #35	; 0x23
{
   b76d6:	b538      	push	{r3, r4, r5, lr}
   b76d8:	4604      	mov	r4, r0
   b76da:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b76dc:	d80a      	bhi.n	b76f4 <pinMode+0x20>
   b76de:	29ff      	cmp	r1, #255	; 0xff
   b76e0:	d008      	beq.n	b76f4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b76e2:	f7ff ffb9 	bl	b7658 <pinAvailable>
   b76e6:	b128      	cbz	r0, b76f4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b76e8:	4629      	mov	r1, r5
   b76ea:	4620      	mov	r0, r4
}
   b76ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b76f0:	f7fe bbac 	b.w	b5e4c <HAL_Pin_Mode>
}
   b76f4:	bd38      	pop	{r3, r4, r5, pc}

000b76f6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b76f6:	b538      	push	{r3, r4, r5, lr}
   b76f8:	4604      	mov	r4, r0
   b76fa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b76fc:	f7fe fbae 	bl	b5e5c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7700:	28ff      	cmp	r0, #255	; 0xff
   b7702:	d010      	beq.n	b7726 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7704:	2806      	cmp	r0, #6
   b7706:	d804      	bhi.n	b7712 <digitalWrite+0x1c>
   b7708:	234d      	movs	r3, #77	; 0x4d
   b770a:	fa23 f000 	lsr.w	r0, r3, r0
   b770e:	07c3      	lsls	r3, r0, #31
   b7710:	d409      	bmi.n	b7726 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7712:	4620      	mov	r0, r4
   b7714:	f7ff ffa0 	bl	b7658 <pinAvailable>
   b7718:	b128      	cbz	r0, b7726 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b771a:	4629      	mov	r1, r5
   b771c:	4620      	mov	r0, r4
}
   b771e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7722:	f7fe bba3 	b.w	b5e6c <HAL_GPIO_Write>
}
   b7726:	bd38      	pop	{r3, r4, r5, pc}

000b7728 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7728:	b510      	push	{r4, lr}
   b772a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b772c:	f7fe fb96 	bl	b5e5c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7730:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7732:	b2db      	uxtb	r3, r3
   b7734:	2b01      	cmp	r3, #1
   b7736:	d908      	bls.n	b774a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7738:	4620      	mov	r0, r4
   b773a:	f7ff ff8d 	bl	b7658 <pinAvailable>
   b773e:	b120      	cbz	r0, b774a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7740:	4620      	mov	r0, r4
}
   b7742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7746:	f7fe bb99 	b.w	b5e7c <HAL_GPIO_Read>
}
   b774a:	2000      	movs	r0, #0
   b774c:	bd10      	pop	{r4, pc}

000b774e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b774e:	4770      	bx	lr

000b7750 <_Z20acquireSerial1Bufferv>:
{
   b7750:	b538      	push	{r3, r4, r5, lr}
   b7752:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7754:	2514      	movs	r5, #20
   b7756:	462a      	mov	r2, r5
   b7758:	2100      	movs	r1, #0
   b775a:	f000 fec0 	bl	b84de <memset>
   b775e:	8025      	strh	r5, [r4, #0]
   b7760:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7762:	4907      	ldr	r1, [pc, #28]	; (b7780 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7764:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7766:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7768:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b776a:	f000 f86b 	bl	b7844 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b776e:	4904      	ldr	r1, [pc, #16]	; (b7780 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7770:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7772:	4628      	mov	r0, r5
   b7774:	f000 f866 	bl	b7844 <_ZnajRKSt9nothrow_t>
    };
   b7778:	60e0      	str	r0, [r4, #12]
}
   b777a:	4620      	mov	r0, r4
   b777c:	bd38      	pop	{r3, r4, r5, pc}
   b777e:	bf00      	nop
   b7780:	000bb1b0 	.word	0x000bb1b0

000b7784 <_Z22__fetch_global_Serial1v>:
{
   b7784:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7786:	4d0e      	ldr	r5, [pc, #56]	; (b77c0 <_Z22__fetch_global_Serial1v+0x3c>)
   b7788:	7829      	ldrb	r1, [r5, #0]
   b778a:	f3bf 8f5b 	dmb	ish
   b778e:	f011 0401 	ands.w	r4, r1, #1
{
   b7792:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7794:	d111      	bne.n	b77ba <_Z22__fetch_global_Serial1v+0x36>
   b7796:	4628      	mov	r0, r5
   b7798:	f7fc fc92 	bl	b40c0 <__cxa_guard_acquire>
   b779c:	b168      	cbz	r0, b77ba <_Z22__fetch_global_Serial1v+0x36>
   b779e:	a801      	add	r0, sp, #4
   b77a0:	f7ff ffd6 	bl	b7750 <_Z20acquireSerial1Bufferv>
   b77a4:	aa01      	add	r2, sp, #4
   b77a6:	4621      	mov	r1, r4
   b77a8:	4806      	ldr	r0, [pc, #24]	; (b77c4 <_Z22__fetch_global_Serial1v+0x40>)
   b77aa:	f7ff fb2f 	bl	b6e0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b77ae:	4628      	mov	r0, r5
   b77b0:	f7fc fc8b 	bl	b40ca <__cxa_guard_release>
   b77b4:	4804      	ldr	r0, [pc, #16]	; (b77c8 <_Z22__fetch_global_Serial1v+0x44>)
   b77b6:	f000 fe7b 	bl	b84b0 <atexit>
    return serial1;
}
   b77ba:	4802      	ldr	r0, [pc, #8]	; (b77c4 <_Z22__fetch_global_Serial1v+0x40>)
   b77bc:	b007      	add	sp, #28
   b77be:	bd30      	pop	{r4, r5, pc}
   b77c0:	2003e728 	.word	0x2003e728
   b77c4:	2003e72c 	.word	0x2003e72c
   b77c8:	000b774f 	.word	0x000b774f

000b77cc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b77cc:	4770      	bx	lr
	...

000b77d0 <_Z17acquireWireBufferv>:
{
   b77d0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b77d2:	2520      	movs	r5, #32
   b77d4:	2314      	movs	r3, #20
{
   b77d6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b77d8:	6003      	str	r3, [r0, #0]
   b77da:	6085      	str	r5, [r0, #8]
   b77dc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b77de:	4906      	ldr	r1, [pc, #24]	; (b77f8 <_Z17acquireWireBufferv+0x28>)
   b77e0:	4628      	mov	r0, r5
   b77e2:	f000 f82f 	bl	b7844 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b77e6:	4904      	ldr	r1, [pc, #16]	; (b77f8 <_Z17acquireWireBufferv+0x28>)
	};
   b77e8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b77ea:	4628      	mov	r0, r5
   b77ec:	f000 f82a 	bl	b7844 <_ZnajRKSt9nothrow_t>
	};
   b77f0:	60e0      	str	r0, [r4, #12]
}
   b77f2:	4620      	mov	r0, r4
   b77f4:	bd38      	pop	{r3, r4, r5, pc}
   b77f6:	bf00      	nop
   b77f8:	000bb1b0 	.word	0x000bb1b0

000b77fc <_Z19__fetch_global_Wirev>:
{
   b77fc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b77fe:	4d0e      	ldr	r5, [pc, #56]	; (b7838 <_Z19__fetch_global_Wirev+0x3c>)
   b7800:	7829      	ldrb	r1, [r5, #0]
   b7802:	f3bf 8f5b 	dmb	ish
   b7806:	f011 0401 	ands.w	r4, r1, #1
{
   b780a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b780c:	d111      	bne.n	b7832 <_Z19__fetch_global_Wirev+0x36>
   b780e:	4628      	mov	r0, r5
   b7810:	f7fc fc56 	bl	b40c0 <__cxa_guard_acquire>
   b7814:	b168      	cbz	r0, b7832 <_Z19__fetch_global_Wirev+0x36>
   b7816:	a801      	add	r0, sp, #4
   b7818:	f7ff ffda 	bl	b77d0 <_Z17acquireWireBufferv>
   b781c:	aa01      	add	r2, sp, #4
   b781e:	4621      	mov	r1, r4
   b7820:	4806      	ldr	r0, [pc, #24]	; (b783c <_Z19__fetch_global_Wirev+0x40>)
   b7822:	f7ff fb33 	bl	b6e8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7826:	4628      	mov	r0, r5
   b7828:	f7fc fc4f 	bl	b40ca <__cxa_guard_release>
   b782c:	4804      	ldr	r0, [pc, #16]	; (b7840 <_Z19__fetch_global_Wirev+0x44>)
   b782e:	f000 fe3f 	bl	b84b0 <atexit>
	return wire;
}
   b7832:	4802      	ldr	r0, [pc, #8]	; (b783c <_Z19__fetch_global_Wirev+0x40>)
   b7834:	b007      	add	sp, #28
   b7836:	bd30      	pop	{r4, r5, pc}
   b7838:	2003e744 	.word	0x2003e744
   b783c:	2003e748 	.word	0x2003e748
   b7840:	000b77cd 	.word	0x000b77cd

000b7844 <_ZnajRKSt9nothrow_t>:
   b7844:	f7fc bc29 	b.w	b409a <_Znaj>

000b7848 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7848:	4901      	ldr	r1, [pc, #4]	; (b7850 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b784a:	f000 b8f9 	b.w	b7a40 <_ZNKSt9type_infoeqERKS_>
   b784e:	bf00      	nop
   b7850:	000bb1cc 	.word	0x000bb1cc

000b7854 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7854:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7856:	2400      	movs	r4, #0
   b7858:	2310      	movs	r3, #16
   b785a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b785e:	6803      	ldr	r3, [r0, #0]
   b7860:	4615      	mov	r5, r2
   b7862:	699e      	ldr	r6, [r3, #24]
   b7864:	6812      	ldr	r2, [r2, #0]
   b7866:	466b      	mov	r3, sp
   b7868:	e9cd 4400 	strd	r4, r4, [sp]
   b786c:	47b0      	blx	r6
   b786e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7872:	f003 0306 	and.w	r3, r3, #6
   b7876:	2b06      	cmp	r3, #6
   b7878:	bf03      	ittte	eq
   b787a:	9b00      	ldreq	r3, [sp, #0]
   b787c:	602b      	streq	r3, [r5, #0]
   b787e:	2001      	moveq	r0, #1
   b7880:	4620      	movne	r0, r4
   b7882:	b004      	add	sp, #16
   b7884:	bd70      	pop	{r4, r5, r6, pc}

000b7886 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7886:	9800      	ldr	r0, [sp, #0]
   b7888:	4290      	cmp	r0, r2
   b788a:	bf14      	ite	ne
   b788c:	2001      	movne	r0, #1
   b788e:	2006      	moveq	r0, #6
   b7890:	4770      	bx	lr
	...

000b7894 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7894:	b510      	push	{r4, lr}
   b7896:	4b03      	ldr	r3, [pc, #12]	; (b78a4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7898:	6003      	str	r3, [r0, #0]
   b789a:	4604      	mov	r4, r0
   b789c:	f000 f8cd 	bl	b7a3a <_ZNSt9type_infoD1Ev>
   b78a0:	4620      	mov	r0, r4
   b78a2:	bd10      	pop	{r4, pc}
   b78a4:	000bb20c 	.word	0x000bb20c

000b78a8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b78a8:	b510      	push	{r4, lr}
   b78aa:	4604      	mov	r4, r0
   b78ac:	f7ff fff2 	bl	b7894 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b78b0:	4620      	mov	r0, r4
   b78b2:	2108      	movs	r1, #8
   b78b4:	f7fc fbf5 	bl	b40a2 <_ZdlPvj>
   b78b8:	4620      	mov	r0, r4
   b78ba:	bd10      	pop	{r4, pc}

000b78bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b78bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b78c0:	461f      	mov	r7, r3
   b78c2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b78c6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b78ca:	4598      	cmp	r8, r3
   b78cc:	4606      	mov	r6, r0
   b78ce:	4615      	mov	r5, r2
   b78d0:	d107      	bne.n	b78e2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b78d2:	9907      	ldr	r1, [sp, #28]
   b78d4:	f000 f8b4 	bl	b7a40 <_ZNKSt9type_infoeqERKS_>
   b78d8:	b118      	cbz	r0, b78e2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b78da:	7165      	strb	r5, [r4, #5]
   b78dc:	2000      	movs	r0, #0
   b78de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b78e2:	4639      	mov	r1, r7
   b78e4:	4630      	mov	r0, r6
   b78e6:	f000 f8ab 	bl	b7a40 <_ZNKSt9type_infoeqERKS_>
   b78ea:	2800      	cmp	r0, #0
   b78ec:	d0f6      	beq.n	b78dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b78ee:	2301      	movs	r3, #1
   b78f0:	f8c4 8000 	str.w	r8, [r4]
   b78f4:	7125      	strb	r5, [r4, #4]
   b78f6:	71a3      	strb	r3, [r4, #6]
   b78f8:	e7f0      	b.n	b78dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b78fa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b78fa:	b538      	push	{r3, r4, r5, lr}
   b78fc:	4615      	mov	r5, r2
   b78fe:	461c      	mov	r4, r3
   b7900:	f000 f89e 	bl	b7a40 <_ZNKSt9type_infoeqERKS_>
   b7904:	b120      	cbz	r0, b7910 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7906:	2308      	movs	r3, #8
   b7908:	60e3      	str	r3, [r4, #12]
   b790a:	2306      	movs	r3, #6
   b790c:	6025      	str	r5, [r4, #0]
   b790e:	7123      	strb	r3, [r4, #4]
   b7910:	bd38      	pop	{r3, r4, r5, pc}

000b7912 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7912:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7914:	4605      	mov	r5, r0
   b7916:	460c      	mov	r4, r1
   b7918:	9201      	str	r2, [sp, #4]
   b791a:	461e      	mov	r6, r3
   b791c:	f000 f890 	bl	b7a40 <_ZNKSt9type_infoeqERKS_>
   b7920:	b950      	cbnz	r0, b7938 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7922:	2e03      	cmp	r6, #3
   b7924:	d808      	bhi.n	b7938 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7926:	6823      	ldr	r3, [r4, #0]
   b7928:	9a01      	ldr	r2, [sp, #4]
   b792a:	695b      	ldr	r3, [r3, #20]
   b792c:	4629      	mov	r1, r5
   b792e:	4620      	mov	r0, r4
   b7930:	b002      	add	sp, #8
   b7932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7936:	4718      	bx	r3
   b7938:	b002      	add	sp, #8
   b793a:	bd70      	pop	{r4, r5, r6, pc}

000b793c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b793c:	b510      	push	{r4, lr}
   b793e:	4b03      	ldr	r3, [pc, #12]	; (b794c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7940:	6003      	str	r3, [r0, #0]
   b7942:	4604      	mov	r4, r0
   b7944:	f7ff ffa6 	bl	b7894 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7948:	4620      	mov	r0, r4
   b794a:	bd10      	pop	{r4, pc}
   b794c:	000bb26c 	.word	0x000bb26c

000b7950 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7950:	b510      	push	{r4, lr}
   b7952:	4604      	mov	r4, r0
   b7954:	f7ff fff2 	bl	b793c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7958:	4620      	mov	r0, r4
   b795a:	210c      	movs	r1, #12
   b795c:	f7fc fba1 	bl	b40a2 <_ZdlPvj>
   b7960:	4620      	mov	r0, r4
   b7962:	bd10      	pop	{r4, pc}

000b7964 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7966:	9f08      	ldr	r7, [sp, #32]
   b7968:	4297      	cmp	r7, r2
   b796a:	4605      	mov	r5, r0
   b796c:	460e      	mov	r6, r1
   b796e:	4614      	mov	r4, r2
   b7970:	d00a      	beq.n	b7988 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7972:	68a8      	ldr	r0, [r5, #8]
   b7974:	6802      	ldr	r2, [r0, #0]
   b7976:	9708      	str	r7, [sp, #32]
   b7978:	6a15      	ldr	r5, [r2, #32]
   b797a:	4631      	mov	r1, r6
   b797c:	4622      	mov	r2, r4
   b797e:	46ac      	mov	ip, r5
   b7980:	b003      	add	sp, #12
   b7982:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7986:	4760      	bx	ip
   b7988:	4619      	mov	r1, r3
   b798a:	9301      	str	r3, [sp, #4]
   b798c:	f000 f858 	bl	b7a40 <_ZNKSt9type_infoeqERKS_>
   b7990:	9b01      	ldr	r3, [sp, #4]
   b7992:	2800      	cmp	r0, #0
   b7994:	d0ed      	beq.n	b7972 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7996:	2006      	movs	r0, #6
   b7998:	b003      	add	sp, #12
   b799a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b799c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b799c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b79a0:	460d      	mov	r5, r1
   b79a2:	4619      	mov	r1, r3
   b79a4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b79a8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b79ac:	4681      	mov	r9, r0
   b79ae:	4617      	mov	r7, r2
   b79b0:	4698      	mov	r8, r3
   b79b2:	f000 f845 	bl	b7a40 <_ZNKSt9type_infoeqERKS_>
   b79b6:	b190      	cbz	r0, b79de <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b79b8:	2d00      	cmp	r5, #0
   b79ba:	6034      	str	r4, [r6, #0]
   b79bc:	7137      	strb	r7, [r6, #4]
   b79be:	db09      	blt.n	b79d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b79c0:	1961      	adds	r1, r4, r5
   b79c2:	458a      	cmp	sl, r1
   b79c4:	bf0c      	ite	eq
   b79c6:	2106      	moveq	r1, #6
   b79c8:	2101      	movne	r1, #1
   b79ca:	71b1      	strb	r1, [r6, #6]
   b79cc:	2000      	movs	r0, #0
   b79ce:	b001      	add	sp, #4
   b79d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b79d4:	3502      	adds	r5, #2
   b79d6:	d1f9      	bne.n	b79cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b79d8:	2301      	movs	r3, #1
   b79da:	71b3      	strb	r3, [r6, #6]
   b79dc:	e7f6      	b.n	b79cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b79de:	4554      	cmp	r4, sl
   b79e0:	d106      	bne.n	b79f0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b79e2:	4659      	mov	r1, fp
   b79e4:	4648      	mov	r0, r9
   b79e6:	f000 f82b 	bl	b7a40 <_ZNKSt9type_infoeqERKS_>
   b79ea:	b108      	cbz	r0, b79f0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b79ec:	7177      	strb	r7, [r6, #5]
   b79ee:	e7ed      	b.n	b79cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b79f0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b79f4:	6803      	ldr	r3, [r0, #0]
   b79f6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b79fa:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b79fe:	69dc      	ldr	r4, [r3, #28]
   b7a00:	463a      	mov	r2, r7
   b7a02:	4643      	mov	r3, r8
   b7a04:	4629      	mov	r1, r5
   b7a06:	46a4      	mov	ip, r4
   b7a08:	b001      	add	sp, #4
   b7a0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7a0e:	4760      	bx	ip

000b7a10 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a14:	4607      	mov	r7, r0
   b7a16:	460c      	mov	r4, r1
   b7a18:	4615      	mov	r5, r2
   b7a1a:	461e      	mov	r6, r3
   b7a1c:	f7ff ff6d 	bl	b78fa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7a20:	b948      	cbnz	r0, b7a36 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7a22:	68b8      	ldr	r0, [r7, #8]
   b7a24:	6803      	ldr	r3, [r0, #0]
   b7a26:	699f      	ldr	r7, [r3, #24]
   b7a28:	462a      	mov	r2, r5
   b7a2a:	4633      	mov	r3, r6
   b7a2c:	4621      	mov	r1, r4
   b7a2e:	46bc      	mov	ip, r7
   b7a30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7a34:	4760      	bx	ip
   b7a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7a3a <_ZNSt9type_infoD1Ev>:
   b7a3a:	4770      	bx	lr

000b7a3c <_ZNKSt9type_info14__is_pointer_pEv>:
   b7a3c:	2000      	movs	r0, #0
   b7a3e:	4770      	bx	lr

000b7a40 <_ZNKSt9type_infoeqERKS_>:
   b7a40:	4281      	cmp	r1, r0
   b7a42:	b508      	push	{r3, lr}
   b7a44:	d00e      	beq.n	b7a64 <_ZNKSt9type_infoeqERKS_+0x24>
   b7a46:	6840      	ldr	r0, [r0, #4]
   b7a48:	7803      	ldrb	r3, [r0, #0]
   b7a4a:	2b2a      	cmp	r3, #42	; 0x2a
   b7a4c:	d00c      	beq.n	b7a68 <_ZNKSt9type_infoeqERKS_+0x28>
   b7a4e:	6849      	ldr	r1, [r1, #4]
   b7a50:	780b      	ldrb	r3, [r1, #0]
   b7a52:	2b2a      	cmp	r3, #42	; 0x2a
   b7a54:	bf08      	it	eq
   b7a56:	3101      	addeq	r1, #1
   b7a58:	f000 fd78 	bl	b854c <strcmp>
   b7a5c:	fab0 f080 	clz	r0, r0
   b7a60:	0940      	lsrs	r0, r0, #5
   b7a62:	bd08      	pop	{r3, pc}
   b7a64:	2001      	movs	r0, #1
   b7a66:	e7fc      	b.n	b7a62 <_ZNKSt9type_infoeqERKS_+0x22>
   b7a68:	2000      	movs	r0, #0
   b7a6a:	e7fa      	b.n	b7a62 <_ZNKSt9type_infoeqERKS_+0x22>

000b7a6c <__aeabi_drsub>:
   b7a6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7a70:	e002      	b.n	b7a78 <__adddf3>
   b7a72:	bf00      	nop

000b7a74 <__aeabi_dsub>:
   b7a74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7a78 <__adddf3>:
   b7a78:	b530      	push	{r4, r5, lr}
   b7a7a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7a7e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7a82:	ea94 0f05 	teq	r4, r5
   b7a86:	bf08      	it	eq
   b7a88:	ea90 0f02 	teqeq	r0, r2
   b7a8c:	bf1f      	itttt	ne
   b7a8e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7a92:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7a96:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7a9a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7a9e:	f000 80e2 	beq.w	b7c66 <__adddf3+0x1ee>
   b7aa2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7aa6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7aaa:	bfb8      	it	lt
   b7aac:	426d      	neglt	r5, r5
   b7aae:	dd0c      	ble.n	b7aca <__adddf3+0x52>
   b7ab0:	442c      	add	r4, r5
   b7ab2:	ea80 0202 	eor.w	r2, r0, r2
   b7ab6:	ea81 0303 	eor.w	r3, r1, r3
   b7aba:	ea82 0000 	eor.w	r0, r2, r0
   b7abe:	ea83 0101 	eor.w	r1, r3, r1
   b7ac2:	ea80 0202 	eor.w	r2, r0, r2
   b7ac6:	ea81 0303 	eor.w	r3, r1, r3
   b7aca:	2d36      	cmp	r5, #54	; 0x36
   b7acc:	bf88      	it	hi
   b7ace:	bd30      	pophi	{r4, r5, pc}
   b7ad0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7ad4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7ad8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7adc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7ae0:	d002      	beq.n	b7ae8 <__adddf3+0x70>
   b7ae2:	4240      	negs	r0, r0
   b7ae4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7ae8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7aec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7af0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7af4:	d002      	beq.n	b7afc <__adddf3+0x84>
   b7af6:	4252      	negs	r2, r2
   b7af8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7afc:	ea94 0f05 	teq	r4, r5
   b7b00:	f000 80a7 	beq.w	b7c52 <__adddf3+0x1da>
   b7b04:	f1a4 0401 	sub.w	r4, r4, #1
   b7b08:	f1d5 0e20 	rsbs	lr, r5, #32
   b7b0c:	db0d      	blt.n	b7b2a <__adddf3+0xb2>
   b7b0e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7b12:	fa22 f205 	lsr.w	r2, r2, r5
   b7b16:	1880      	adds	r0, r0, r2
   b7b18:	f141 0100 	adc.w	r1, r1, #0
   b7b1c:	fa03 f20e 	lsl.w	r2, r3, lr
   b7b20:	1880      	adds	r0, r0, r2
   b7b22:	fa43 f305 	asr.w	r3, r3, r5
   b7b26:	4159      	adcs	r1, r3
   b7b28:	e00e      	b.n	b7b48 <__adddf3+0xd0>
   b7b2a:	f1a5 0520 	sub.w	r5, r5, #32
   b7b2e:	f10e 0e20 	add.w	lr, lr, #32
   b7b32:	2a01      	cmp	r2, #1
   b7b34:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7b38:	bf28      	it	cs
   b7b3a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b7b3e:	fa43 f305 	asr.w	r3, r3, r5
   b7b42:	18c0      	adds	r0, r0, r3
   b7b44:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7b48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7b4c:	d507      	bpl.n	b7b5e <__adddf3+0xe6>
   b7b4e:	f04f 0e00 	mov.w	lr, #0
   b7b52:	f1dc 0c00 	rsbs	ip, ip, #0
   b7b56:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7b5a:	eb6e 0101 	sbc.w	r1, lr, r1
   b7b5e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7b62:	d31b      	bcc.n	b7b9c <__adddf3+0x124>
   b7b64:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7b68:	d30c      	bcc.n	b7b84 <__adddf3+0x10c>
   b7b6a:	0849      	lsrs	r1, r1, #1
   b7b6c:	ea5f 0030 	movs.w	r0, r0, rrx
   b7b70:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7b74:	f104 0401 	add.w	r4, r4, #1
   b7b78:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7b7c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7b80:	f080 809a 	bcs.w	b7cb8 <__adddf3+0x240>
   b7b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7b88:	bf08      	it	eq
   b7b8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7b8e:	f150 0000 	adcs.w	r0, r0, #0
   b7b92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7b96:	ea41 0105 	orr.w	r1, r1, r5
   b7b9a:	bd30      	pop	{r4, r5, pc}
   b7b9c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7ba0:	4140      	adcs	r0, r0
   b7ba2:	eb41 0101 	adc.w	r1, r1, r1
   b7ba6:	3c01      	subs	r4, #1
   b7ba8:	bf28      	it	cs
   b7baa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7bae:	d2e9      	bcs.n	b7b84 <__adddf3+0x10c>
   b7bb0:	f091 0f00 	teq	r1, #0
   b7bb4:	bf04      	itt	eq
   b7bb6:	4601      	moveq	r1, r0
   b7bb8:	2000      	moveq	r0, #0
   b7bba:	fab1 f381 	clz	r3, r1
   b7bbe:	bf08      	it	eq
   b7bc0:	3320      	addeq	r3, #32
   b7bc2:	f1a3 030b 	sub.w	r3, r3, #11
   b7bc6:	f1b3 0220 	subs.w	r2, r3, #32
   b7bca:	da0c      	bge.n	b7be6 <__adddf3+0x16e>
   b7bcc:	320c      	adds	r2, #12
   b7bce:	dd08      	ble.n	b7be2 <__adddf3+0x16a>
   b7bd0:	f102 0c14 	add.w	ip, r2, #20
   b7bd4:	f1c2 020c 	rsb	r2, r2, #12
   b7bd8:	fa01 f00c 	lsl.w	r0, r1, ip
   b7bdc:	fa21 f102 	lsr.w	r1, r1, r2
   b7be0:	e00c      	b.n	b7bfc <__adddf3+0x184>
   b7be2:	f102 0214 	add.w	r2, r2, #20
   b7be6:	bfd8      	it	le
   b7be8:	f1c2 0c20 	rsble	ip, r2, #32
   b7bec:	fa01 f102 	lsl.w	r1, r1, r2
   b7bf0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7bf4:	bfdc      	itt	le
   b7bf6:	ea41 010c 	orrle.w	r1, r1, ip
   b7bfa:	4090      	lslle	r0, r2
   b7bfc:	1ae4      	subs	r4, r4, r3
   b7bfe:	bfa2      	ittt	ge
   b7c00:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7c04:	4329      	orrge	r1, r5
   b7c06:	bd30      	popge	{r4, r5, pc}
   b7c08:	ea6f 0404 	mvn.w	r4, r4
   b7c0c:	3c1f      	subs	r4, #31
   b7c0e:	da1c      	bge.n	b7c4a <__adddf3+0x1d2>
   b7c10:	340c      	adds	r4, #12
   b7c12:	dc0e      	bgt.n	b7c32 <__adddf3+0x1ba>
   b7c14:	f104 0414 	add.w	r4, r4, #20
   b7c18:	f1c4 0220 	rsb	r2, r4, #32
   b7c1c:	fa20 f004 	lsr.w	r0, r0, r4
   b7c20:	fa01 f302 	lsl.w	r3, r1, r2
   b7c24:	ea40 0003 	orr.w	r0, r0, r3
   b7c28:	fa21 f304 	lsr.w	r3, r1, r4
   b7c2c:	ea45 0103 	orr.w	r1, r5, r3
   b7c30:	bd30      	pop	{r4, r5, pc}
   b7c32:	f1c4 040c 	rsb	r4, r4, #12
   b7c36:	f1c4 0220 	rsb	r2, r4, #32
   b7c3a:	fa20 f002 	lsr.w	r0, r0, r2
   b7c3e:	fa01 f304 	lsl.w	r3, r1, r4
   b7c42:	ea40 0003 	orr.w	r0, r0, r3
   b7c46:	4629      	mov	r1, r5
   b7c48:	bd30      	pop	{r4, r5, pc}
   b7c4a:	fa21 f004 	lsr.w	r0, r1, r4
   b7c4e:	4629      	mov	r1, r5
   b7c50:	bd30      	pop	{r4, r5, pc}
   b7c52:	f094 0f00 	teq	r4, #0
   b7c56:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7c5a:	bf06      	itte	eq
   b7c5c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7c60:	3401      	addeq	r4, #1
   b7c62:	3d01      	subne	r5, #1
   b7c64:	e74e      	b.n	b7b04 <__adddf3+0x8c>
   b7c66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7c6a:	bf18      	it	ne
   b7c6c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7c70:	d029      	beq.n	b7cc6 <__adddf3+0x24e>
   b7c72:	ea94 0f05 	teq	r4, r5
   b7c76:	bf08      	it	eq
   b7c78:	ea90 0f02 	teqeq	r0, r2
   b7c7c:	d005      	beq.n	b7c8a <__adddf3+0x212>
   b7c7e:	ea54 0c00 	orrs.w	ip, r4, r0
   b7c82:	bf04      	itt	eq
   b7c84:	4619      	moveq	r1, r3
   b7c86:	4610      	moveq	r0, r2
   b7c88:	bd30      	pop	{r4, r5, pc}
   b7c8a:	ea91 0f03 	teq	r1, r3
   b7c8e:	bf1e      	ittt	ne
   b7c90:	2100      	movne	r1, #0
   b7c92:	2000      	movne	r0, #0
   b7c94:	bd30      	popne	{r4, r5, pc}
   b7c96:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7c9a:	d105      	bne.n	b7ca8 <__adddf3+0x230>
   b7c9c:	0040      	lsls	r0, r0, #1
   b7c9e:	4149      	adcs	r1, r1
   b7ca0:	bf28      	it	cs
   b7ca2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7ca6:	bd30      	pop	{r4, r5, pc}
   b7ca8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7cac:	bf3c      	itt	cc
   b7cae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7cb2:	bd30      	popcc	{r4, r5, pc}
   b7cb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7cb8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7cbc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7cc0:	f04f 0000 	mov.w	r0, #0
   b7cc4:	bd30      	pop	{r4, r5, pc}
   b7cc6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7cca:	bf1a      	itte	ne
   b7ccc:	4619      	movne	r1, r3
   b7cce:	4610      	movne	r0, r2
   b7cd0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7cd4:	bf1c      	itt	ne
   b7cd6:	460b      	movne	r3, r1
   b7cd8:	4602      	movne	r2, r0
   b7cda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7cde:	bf06      	itte	eq
   b7ce0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7ce4:	ea91 0f03 	teqeq	r1, r3
   b7ce8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7cec:	bd30      	pop	{r4, r5, pc}
   b7cee:	bf00      	nop

000b7cf0 <__aeabi_ui2d>:
   b7cf0:	f090 0f00 	teq	r0, #0
   b7cf4:	bf04      	itt	eq
   b7cf6:	2100      	moveq	r1, #0
   b7cf8:	4770      	bxeq	lr
   b7cfa:	b530      	push	{r4, r5, lr}
   b7cfc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7d00:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7d04:	f04f 0500 	mov.w	r5, #0
   b7d08:	f04f 0100 	mov.w	r1, #0
   b7d0c:	e750      	b.n	b7bb0 <__adddf3+0x138>
   b7d0e:	bf00      	nop

000b7d10 <__aeabi_i2d>:
   b7d10:	f090 0f00 	teq	r0, #0
   b7d14:	bf04      	itt	eq
   b7d16:	2100      	moveq	r1, #0
   b7d18:	4770      	bxeq	lr
   b7d1a:	b530      	push	{r4, r5, lr}
   b7d1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7d20:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7d24:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7d28:	bf48      	it	mi
   b7d2a:	4240      	negmi	r0, r0
   b7d2c:	f04f 0100 	mov.w	r1, #0
   b7d30:	e73e      	b.n	b7bb0 <__adddf3+0x138>
   b7d32:	bf00      	nop

000b7d34 <__aeabi_f2d>:
   b7d34:	0042      	lsls	r2, r0, #1
   b7d36:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b7d3a:	ea4f 0131 	mov.w	r1, r1, rrx
   b7d3e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7d42:	bf1f      	itttt	ne
   b7d44:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7d48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7d4c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7d50:	4770      	bxne	lr
   b7d52:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7d56:	bf08      	it	eq
   b7d58:	4770      	bxeq	lr
   b7d5a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7d5e:	bf04      	itt	eq
   b7d60:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7d64:	4770      	bxeq	lr
   b7d66:	b530      	push	{r4, r5, lr}
   b7d68:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7d6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7d70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7d74:	e71c      	b.n	b7bb0 <__adddf3+0x138>
   b7d76:	bf00      	nop

000b7d78 <__aeabi_ul2d>:
   b7d78:	ea50 0201 	orrs.w	r2, r0, r1
   b7d7c:	bf08      	it	eq
   b7d7e:	4770      	bxeq	lr
   b7d80:	b530      	push	{r4, r5, lr}
   b7d82:	f04f 0500 	mov.w	r5, #0
   b7d86:	e00a      	b.n	b7d9e <__aeabi_l2d+0x16>

000b7d88 <__aeabi_l2d>:
   b7d88:	ea50 0201 	orrs.w	r2, r0, r1
   b7d8c:	bf08      	it	eq
   b7d8e:	4770      	bxeq	lr
   b7d90:	b530      	push	{r4, r5, lr}
   b7d92:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7d96:	d502      	bpl.n	b7d9e <__aeabi_l2d+0x16>
   b7d98:	4240      	negs	r0, r0
   b7d9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7d9e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7da2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7da6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7daa:	f43f aed8 	beq.w	b7b5e <__adddf3+0xe6>
   b7dae:	f04f 0203 	mov.w	r2, #3
   b7db2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7db6:	bf18      	it	ne
   b7db8:	3203      	addne	r2, #3
   b7dba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7dbe:	bf18      	it	ne
   b7dc0:	3203      	addne	r2, #3
   b7dc2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7dc6:	f1c2 0320 	rsb	r3, r2, #32
   b7dca:	fa00 fc03 	lsl.w	ip, r0, r3
   b7dce:	fa20 f002 	lsr.w	r0, r0, r2
   b7dd2:	fa01 fe03 	lsl.w	lr, r1, r3
   b7dd6:	ea40 000e 	orr.w	r0, r0, lr
   b7dda:	fa21 f102 	lsr.w	r1, r1, r2
   b7dde:	4414      	add	r4, r2
   b7de0:	e6bd      	b.n	b7b5e <__adddf3+0xe6>
   b7de2:	bf00      	nop

000b7de4 <__aeabi_dmul>:
   b7de4:	b570      	push	{r4, r5, r6, lr}
   b7de6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7dea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7dee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7df2:	bf1d      	ittte	ne
   b7df4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7df8:	ea94 0f0c 	teqne	r4, ip
   b7dfc:	ea95 0f0c 	teqne	r5, ip
   b7e00:	f000 f8de 	bleq	b7fc0 <__aeabi_dmul+0x1dc>
   b7e04:	442c      	add	r4, r5
   b7e06:	ea81 0603 	eor.w	r6, r1, r3
   b7e0a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7e0e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7e12:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7e16:	bf18      	it	ne
   b7e18:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b7e1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7e20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7e24:	d038      	beq.n	b7e98 <__aeabi_dmul+0xb4>
   b7e26:	fba0 ce02 	umull	ip, lr, r0, r2
   b7e2a:	f04f 0500 	mov.w	r5, #0
   b7e2e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7e32:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7e36:	fbe0 e503 	umlal	lr, r5, r0, r3
   b7e3a:	f04f 0600 	mov.w	r6, #0
   b7e3e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7e42:	f09c 0f00 	teq	ip, #0
   b7e46:	bf18      	it	ne
   b7e48:	f04e 0e01 	orrne.w	lr, lr, #1
   b7e4c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7e50:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7e54:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7e58:	d204      	bcs.n	b7e64 <__aeabi_dmul+0x80>
   b7e5a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7e5e:	416d      	adcs	r5, r5
   b7e60:	eb46 0606 	adc.w	r6, r6, r6
   b7e64:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7e68:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7e6c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7e70:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7e74:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7e78:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7e7c:	bf88      	it	hi
   b7e7e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7e82:	d81e      	bhi.n	b7ec2 <__aeabi_dmul+0xde>
   b7e84:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7e88:	bf08      	it	eq
   b7e8a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7e8e:	f150 0000 	adcs.w	r0, r0, #0
   b7e92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7e96:	bd70      	pop	{r4, r5, r6, pc}
   b7e98:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7e9c:	ea46 0101 	orr.w	r1, r6, r1
   b7ea0:	ea40 0002 	orr.w	r0, r0, r2
   b7ea4:	ea81 0103 	eor.w	r1, r1, r3
   b7ea8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7eac:	bfc2      	ittt	gt
   b7eae:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7eb2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7eb6:	bd70      	popgt	{r4, r5, r6, pc}
   b7eb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7ebc:	f04f 0e00 	mov.w	lr, #0
   b7ec0:	3c01      	subs	r4, #1
   b7ec2:	f300 80ab 	bgt.w	b801c <__aeabi_dmul+0x238>
   b7ec6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b7eca:	bfde      	ittt	le
   b7ecc:	2000      	movle	r0, #0
   b7ece:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7ed2:	bd70      	pople	{r4, r5, r6, pc}
   b7ed4:	f1c4 0400 	rsb	r4, r4, #0
   b7ed8:	3c20      	subs	r4, #32
   b7eda:	da35      	bge.n	b7f48 <__aeabi_dmul+0x164>
   b7edc:	340c      	adds	r4, #12
   b7ede:	dc1b      	bgt.n	b7f18 <__aeabi_dmul+0x134>
   b7ee0:	f104 0414 	add.w	r4, r4, #20
   b7ee4:	f1c4 0520 	rsb	r5, r4, #32
   b7ee8:	fa00 f305 	lsl.w	r3, r0, r5
   b7eec:	fa20 f004 	lsr.w	r0, r0, r4
   b7ef0:	fa01 f205 	lsl.w	r2, r1, r5
   b7ef4:	ea40 0002 	orr.w	r0, r0, r2
   b7ef8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b7efc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7f00:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7f04:	fa21 f604 	lsr.w	r6, r1, r4
   b7f08:	eb42 0106 	adc.w	r1, r2, r6
   b7f0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7f10:	bf08      	it	eq
   b7f12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7f16:	bd70      	pop	{r4, r5, r6, pc}
   b7f18:	f1c4 040c 	rsb	r4, r4, #12
   b7f1c:	f1c4 0520 	rsb	r5, r4, #32
   b7f20:	fa00 f304 	lsl.w	r3, r0, r4
   b7f24:	fa20 f005 	lsr.w	r0, r0, r5
   b7f28:	fa01 f204 	lsl.w	r2, r1, r4
   b7f2c:	ea40 0002 	orr.w	r0, r0, r2
   b7f30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7f34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7f38:	f141 0100 	adc.w	r1, r1, #0
   b7f3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7f40:	bf08      	it	eq
   b7f42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7f46:	bd70      	pop	{r4, r5, r6, pc}
   b7f48:	f1c4 0520 	rsb	r5, r4, #32
   b7f4c:	fa00 f205 	lsl.w	r2, r0, r5
   b7f50:	ea4e 0e02 	orr.w	lr, lr, r2
   b7f54:	fa20 f304 	lsr.w	r3, r0, r4
   b7f58:	fa01 f205 	lsl.w	r2, r1, r5
   b7f5c:	ea43 0302 	orr.w	r3, r3, r2
   b7f60:	fa21 f004 	lsr.w	r0, r1, r4
   b7f64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7f68:	fa21 f204 	lsr.w	r2, r1, r4
   b7f6c:	ea20 0002 	bic.w	r0, r0, r2
   b7f70:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7f74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7f78:	bf08      	it	eq
   b7f7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7f7e:	bd70      	pop	{r4, r5, r6, pc}
   b7f80:	f094 0f00 	teq	r4, #0
   b7f84:	d10f      	bne.n	b7fa6 <__aeabi_dmul+0x1c2>
   b7f86:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7f8a:	0040      	lsls	r0, r0, #1
   b7f8c:	eb41 0101 	adc.w	r1, r1, r1
   b7f90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7f94:	bf08      	it	eq
   b7f96:	3c01      	subeq	r4, #1
   b7f98:	d0f7      	beq.n	b7f8a <__aeabi_dmul+0x1a6>
   b7f9a:	ea41 0106 	orr.w	r1, r1, r6
   b7f9e:	f095 0f00 	teq	r5, #0
   b7fa2:	bf18      	it	ne
   b7fa4:	4770      	bxne	lr
   b7fa6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b7faa:	0052      	lsls	r2, r2, #1
   b7fac:	eb43 0303 	adc.w	r3, r3, r3
   b7fb0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7fb4:	bf08      	it	eq
   b7fb6:	3d01      	subeq	r5, #1
   b7fb8:	d0f7      	beq.n	b7faa <__aeabi_dmul+0x1c6>
   b7fba:	ea43 0306 	orr.w	r3, r3, r6
   b7fbe:	4770      	bx	lr
   b7fc0:	ea94 0f0c 	teq	r4, ip
   b7fc4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7fc8:	bf18      	it	ne
   b7fca:	ea95 0f0c 	teqne	r5, ip
   b7fce:	d00c      	beq.n	b7fea <__aeabi_dmul+0x206>
   b7fd0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7fd4:	bf18      	it	ne
   b7fd6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7fda:	d1d1      	bne.n	b7f80 <__aeabi_dmul+0x19c>
   b7fdc:	ea81 0103 	eor.w	r1, r1, r3
   b7fe0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7fe4:	f04f 0000 	mov.w	r0, #0
   b7fe8:	bd70      	pop	{r4, r5, r6, pc}
   b7fea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7fee:	bf06      	itte	eq
   b7ff0:	4610      	moveq	r0, r2
   b7ff2:	4619      	moveq	r1, r3
   b7ff4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7ff8:	d019      	beq.n	b802e <__aeabi_dmul+0x24a>
   b7ffa:	ea94 0f0c 	teq	r4, ip
   b7ffe:	d102      	bne.n	b8006 <__aeabi_dmul+0x222>
   b8000:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b8004:	d113      	bne.n	b802e <__aeabi_dmul+0x24a>
   b8006:	ea95 0f0c 	teq	r5, ip
   b800a:	d105      	bne.n	b8018 <__aeabi_dmul+0x234>
   b800c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8010:	bf1c      	itt	ne
   b8012:	4610      	movne	r0, r2
   b8014:	4619      	movne	r1, r3
   b8016:	d10a      	bne.n	b802e <__aeabi_dmul+0x24a>
   b8018:	ea81 0103 	eor.w	r1, r1, r3
   b801c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8020:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8024:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8028:	f04f 0000 	mov.w	r0, #0
   b802c:	bd70      	pop	{r4, r5, r6, pc}
   b802e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8032:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b8036:	bd70      	pop	{r4, r5, r6, pc}

000b8038 <__aeabi_ddiv>:
   b8038:	b570      	push	{r4, r5, r6, lr}
   b803a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b803e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8042:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8046:	bf1d      	ittte	ne
   b8048:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b804c:	ea94 0f0c 	teqne	r4, ip
   b8050:	ea95 0f0c 	teqne	r5, ip
   b8054:	f000 f8a7 	bleq	b81a6 <__aeabi_ddiv+0x16e>
   b8058:	eba4 0405 	sub.w	r4, r4, r5
   b805c:	ea81 0e03 	eor.w	lr, r1, r3
   b8060:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8064:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8068:	f000 8088 	beq.w	b817c <__aeabi_ddiv+0x144>
   b806c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8070:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b8074:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b8078:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b807c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b8080:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b8084:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b8088:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b808c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b8090:	429d      	cmp	r5, r3
   b8092:	bf08      	it	eq
   b8094:	4296      	cmpeq	r6, r2
   b8096:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b809a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b809e:	d202      	bcs.n	b80a6 <__aeabi_ddiv+0x6e>
   b80a0:	085b      	lsrs	r3, r3, #1
   b80a2:	ea4f 0232 	mov.w	r2, r2, rrx
   b80a6:	1ab6      	subs	r6, r6, r2
   b80a8:	eb65 0503 	sbc.w	r5, r5, r3
   b80ac:	085b      	lsrs	r3, r3, #1
   b80ae:	ea4f 0232 	mov.w	r2, r2, rrx
   b80b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b80b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b80ba:	ebb6 0e02 	subs.w	lr, r6, r2
   b80be:	eb75 0e03 	sbcs.w	lr, r5, r3
   b80c2:	bf22      	ittt	cs
   b80c4:	1ab6      	subcs	r6, r6, r2
   b80c6:	4675      	movcs	r5, lr
   b80c8:	ea40 000c 	orrcs.w	r0, r0, ip
   b80cc:	085b      	lsrs	r3, r3, #1
   b80ce:	ea4f 0232 	mov.w	r2, r2, rrx
   b80d2:	ebb6 0e02 	subs.w	lr, r6, r2
   b80d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b80da:	bf22      	ittt	cs
   b80dc:	1ab6      	subcs	r6, r6, r2
   b80de:	4675      	movcs	r5, lr
   b80e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b80e4:	085b      	lsrs	r3, r3, #1
   b80e6:	ea4f 0232 	mov.w	r2, r2, rrx
   b80ea:	ebb6 0e02 	subs.w	lr, r6, r2
   b80ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   b80f2:	bf22      	ittt	cs
   b80f4:	1ab6      	subcs	r6, r6, r2
   b80f6:	4675      	movcs	r5, lr
   b80f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b80fc:	085b      	lsrs	r3, r3, #1
   b80fe:	ea4f 0232 	mov.w	r2, r2, rrx
   b8102:	ebb6 0e02 	subs.w	lr, r6, r2
   b8106:	eb75 0e03 	sbcs.w	lr, r5, r3
   b810a:	bf22      	ittt	cs
   b810c:	1ab6      	subcs	r6, r6, r2
   b810e:	4675      	movcs	r5, lr
   b8110:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b8114:	ea55 0e06 	orrs.w	lr, r5, r6
   b8118:	d018      	beq.n	b814c <__aeabi_ddiv+0x114>
   b811a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b811e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b8122:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b8126:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b812a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b812e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b8132:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b8136:	d1c0      	bne.n	b80ba <__aeabi_ddiv+0x82>
   b8138:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b813c:	d10b      	bne.n	b8156 <__aeabi_ddiv+0x11e>
   b813e:	ea41 0100 	orr.w	r1, r1, r0
   b8142:	f04f 0000 	mov.w	r0, #0
   b8146:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b814a:	e7b6      	b.n	b80ba <__aeabi_ddiv+0x82>
   b814c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8150:	bf04      	itt	eq
   b8152:	4301      	orreq	r1, r0
   b8154:	2000      	moveq	r0, #0
   b8156:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b815a:	bf88      	it	hi
   b815c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8160:	f63f aeaf 	bhi.w	b7ec2 <__aeabi_dmul+0xde>
   b8164:	ebb5 0c03 	subs.w	ip, r5, r3
   b8168:	bf04      	itt	eq
   b816a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b816e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8172:	f150 0000 	adcs.w	r0, r0, #0
   b8176:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b817a:	bd70      	pop	{r4, r5, r6, pc}
   b817c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8180:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8184:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b8188:	bfc2      	ittt	gt
   b818a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b818e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8192:	bd70      	popgt	{r4, r5, r6, pc}
   b8194:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8198:	f04f 0e00 	mov.w	lr, #0
   b819c:	3c01      	subs	r4, #1
   b819e:	e690      	b.n	b7ec2 <__aeabi_dmul+0xde>
   b81a0:	ea45 0e06 	orr.w	lr, r5, r6
   b81a4:	e68d      	b.n	b7ec2 <__aeabi_dmul+0xde>
   b81a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b81aa:	ea94 0f0c 	teq	r4, ip
   b81ae:	bf08      	it	eq
   b81b0:	ea95 0f0c 	teqeq	r5, ip
   b81b4:	f43f af3b 	beq.w	b802e <__aeabi_dmul+0x24a>
   b81b8:	ea94 0f0c 	teq	r4, ip
   b81bc:	d10a      	bne.n	b81d4 <__aeabi_ddiv+0x19c>
   b81be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b81c2:	f47f af34 	bne.w	b802e <__aeabi_dmul+0x24a>
   b81c6:	ea95 0f0c 	teq	r5, ip
   b81ca:	f47f af25 	bne.w	b8018 <__aeabi_dmul+0x234>
   b81ce:	4610      	mov	r0, r2
   b81d0:	4619      	mov	r1, r3
   b81d2:	e72c      	b.n	b802e <__aeabi_dmul+0x24a>
   b81d4:	ea95 0f0c 	teq	r5, ip
   b81d8:	d106      	bne.n	b81e8 <__aeabi_ddiv+0x1b0>
   b81da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b81de:	f43f aefd 	beq.w	b7fdc <__aeabi_dmul+0x1f8>
   b81e2:	4610      	mov	r0, r2
   b81e4:	4619      	mov	r1, r3
   b81e6:	e722      	b.n	b802e <__aeabi_dmul+0x24a>
   b81e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b81ec:	bf18      	it	ne
   b81ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b81f2:	f47f aec5 	bne.w	b7f80 <__aeabi_dmul+0x19c>
   b81f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b81fa:	f47f af0d 	bne.w	b8018 <__aeabi_dmul+0x234>
   b81fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b8202:	f47f aeeb 	bne.w	b7fdc <__aeabi_dmul+0x1f8>
   b8206:	e712      	b.n	b802e <__aeabi_dmul+0x24a>

000b8208 <__gedf2>:
   b8208:	f04f 3cff 	mov.w	ip, #4294967295
   b820c:	e006      	b.n	b821c <__cmpdf2+0x4>
   b820e:	bf00      	nop

000b8210 <__ledf2>:
   b8210:	f04f 0c01 	mov.w	ip, #1
   b8214:	e002      	b.n	b821c <__cmpdf2+0x4>
   b8216:	bf00      	nop

000b8218 <__cmpdf2>:
   b8218:	f04f 0c01 	mov.w	ip, #1
   b821c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b8220:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8224:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8228:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b822c:	bf18      	it	ne
   b822e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b8232:	d01b      	beq.n	b826c <__cmpdf2+0x54>
   b8234:	b001      	add	sp, #4
   b8236:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b823a:	bf0c      	ite	eq
   b823c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b8240:	ea91 0f03 	teqne	r1, r3
   b8244:	bf02      	ittt	eq
   b8246:	ea90 0f02 	teqeq	r0, r2
   b824a:	2000      	moveq	r0, #0
   b824c:	4770      	bxeq	lr
   b824e:	f110 0f00 	cmn.w	r0, #0
   b8252:	ea91 0f03 	teq	r1, r3
   b8256:	bf58      	it	pl
   b8258:	4299      	cmppl	r1, r3
   b825a:	bf08      	it	eq
   b825c:	4290      	cmpeq	r0, r2
   b825e:	bf2c      	ite	cs
   b8260:	17d8      	asrcs	r0, r3, #31
   b8262:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b8266:	f040 0001 	orr.w	r0, r0, #1
   b826a:	4770      	bx	lr
   b826c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8270:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8274:	d102      	bne.n	b827c <__cmpdf2+0x64>
   b8276:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b827a:	d107      	bne.n	b828c <__cmpdf2+0x74>
   b827c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8280:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8284:	d1d6      	bne.n	b8234 <__cmpdf2+0x1c>
   b8286:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b828a:	d0d3      	beq.n	b8234 <__cmpdf2+0x1c>
   b828c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b8290:	4770      	bx	lr
   b8292:	bf00      	nop

000b8294 <__aeabi_cdrcmple>:
   b8294:	4684      	mov	ip, r0
   b8296:	4610      	mov	r0, r2
   b8298:	4662      	mov	r2, ip
   b829a:	468c      	mov	ip, r1
   b829c:	4619      	mov	r1, r3
   b829e:	4663      	mov	r3, ip
   b82a0:	e000      	b.n	b82a4 <__aeabi_cdcmpeq>
   b82a2:	bf00      	nop

000b82a4 <__aeabi_cdcmpeq>:
   b82a4:	b501      	push	{r0, lr}
   b82a6:	f7ff ffb7 	bl	b8218 <__cmpdf2>
   b82aa:	2800      	cmp	r0, #0
   b82ac:	bf48      	it	mi
   b82ae:	f110 0f00 	cmnmi.w	r0, #0
   b82b2:	bd01      	pop	{r0, pc}

000b82b4 <__aeabi_dcmpeq>:
   b82b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b82b8:	f7ff fff4 	bl	b82a4 <__aeabi_cdcmpeq>
   b82bc:	bf0c      	ite	eq
   b82be:	2001      	moveq	r0, #1
   b82c0:	2000      	movne	r0, #0
   b82c2:	f85d fb08 	ldr.w	pc, [sp], #8
   b82c6:	bf00      	nop

000b82c8 <__aeabi_dcmplt>:
   b82c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b82cc:	f7ff ffea 	bl	b82a4 <__aeabi_cdcmpeq>
   b82d0:	bf34      	ite	cc
   b82d2:	2001      	movcc	r0, #1
   b82d4:	2000      	movcs	r0, #0
   b82d6:	f85d fb08 	ldr.w	pc, [sp], #8
   b82da:	bf00      	nop

000b82dc <__aeabi_dcmple>:
   b82dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b82e0:	f7ff ffe0 	bl	b82a4 <__aeabi_cdcmpeq>
   b82e4:	bf94      	ite	ls
   b82e6:	2001      	movls	r0, #1
   b82e8:	2000      	movhi	r0, #0
   b82ea:	f85d fb08 	ldr.w	pc, [sp], #8
   b82ee:	bf00      	nop

000b82f0 <__aeabi_dcmpge>:
   b82f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b82f4:	f7ff ffce 	bl	b8294 <__aeabi_cdrcmple>
   b82f8:	bf94      	ite	ls
   b82fa:	2001      	movls	r0, #1
   b82fc:	2000      	movhi	r0, #0
   b82fe:	f85d fb08 	ldr.w	pc, [sp], #8
   b8302:	bf00      	nop

000b8304 <__aeabi_dcmpgt>:
   b8304:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8308:	f7ff ffc4 	bl	b8294 <__aeabi_cdrcmple>
   b830c:	bf34      	ite	cc
   b830e:	2001      	movcc	r0, #1
   b8310:	2000      	movcs	r0, #0
   b8312:	f85d fb08 	ldr.w	pc, [sp], #8
   b8316:	bf00      	nop

000b8318 <__aeabi_dcmpun>:
   b8318:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b831c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8320:	d102      	bne.n	b8328 <__aeabi_dcmpun+0x10>
   b8322:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b8326:	d10a      	bne.n	b833e <__aeabi_dcmpun+0x26>
   b8328:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b832c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8330:	d102      	bne.n	b8338 <__aeabi_dcmpun+0x20>
   b8332:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8336:	d102      	bne.n	b833e <__aeabi_dcmpun+0x26>
   b8338:	f04f 0000 	mov.w	r0, #0
   b833c:	4770      	bx	lr
   b833e:	f04f 0001 	mov.w	r0, #1
   b8342:	4770      	bx	lr

000b8344 <__aeabi_d2iz>:
   b8344:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8348:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b834c:	d215      	bcs.n	b837a <__aeabi_d2iz+0x36>
   b834e:	d511      	bpl.n	b8374 <__aeabi_d2iz+0x30>
   b8350:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8354:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8358:	d912      	bls.n	b8380 <__aeabi_d2iz+0x3c>
   b835a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b835e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8362:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8366:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b836a:	fa23 f002 	lsr.w	r0, r3, r2
   b836e:	bf18      	it	ne
   b8370:	4240      	negne	r0, r0
   b8372:	4770      	bx	lr
   b8374:	f04f 0000 	mov.w	r0, #0
   b8378:	4770      	bx	lr
   b837a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b837e:	d105      	bne.n	b838c <__aeabi_d2iz+0x48>
   b8380:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b8384:	bf08      	it	eq
   b8386:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b838a:	4770      	bx	lr
   b838c:	f04f 0000 	mov.w	r0, #0
   b8390:	4770      	bx	lr
   b8392:	bf00      	nop

000b8394 <__aeabi_d2uiz>:
   b8394:	004a      	lsls	r2, r1, #1
   b8396:	d211      	bcs.n	b83bc <__aeabi_d2uiz+0x28>
   b8398:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b839c:	d211      	bcs.n	b83c2 <__aeabi_d2uiz+0x2e>
   b839e:	d50d      	bpl.n	b83bc <__aeabi_d2uiz+0x28>
   b83a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b83a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b83a8:	d40e      	bmi.n	b83c8 <__aeabi_d2uiz+0x34>
   b83aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b83ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b83b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b83b6:	fa23 f002 	lsr.w	r0, r3, r2
   b83ba:	4770      	bx	lr
   b83bc:	f04f 0000 	mov.w	r0, #0
   b83c0:	4770      	bx	lr
   b83c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b83c6:	d102      	bne.n	b83ce <__aeabi_d2uiz+0x3a>
   b83c8:	f04f 30ff 	mov.w	r0, #4294967295
   b83cc:	4770      	bx	lr
   b83ce:	f04f 0000 	mov.w	r0, #0
   b83d2:	4770      	bx	lr

000b83d4 <__aeabi_d2f>:
   b83d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b83d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b83dc:	bf24      	itt	cs
   b83de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b83e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b83e6:	d90d      	bls.n	b8404 <__aeabi_d2f+0x30>
   b83e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b83ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b83f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b83f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b83f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b83fc:	bf08      	it	eq
   b83fe:	f020 0001 	biceq.w	r0, r0, #1
   b8402:	4770      	bx	lr
   b8404:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b8408:	d121      	bne.n	b844e <__aeabi_d2f+0x7a>
   b840a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b840e:	bfbc      	itt	lt
   b8410:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b8414:	4770      	bxlt	lr
   b8416:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b841a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b841e:	f1c2 0218 	rsb	r2, r2, #24
   b8422:	f1c2 0c20 	rsb	ip, r2, #32
   b8426:	fa10 f30c 	lsls.w	r3, r0, ip
   b842a:	fa20 f002 	lsr.w	r0, r0, r2
   b842e:	bf18      	it	ne
   b8430:	f040 0001 	orrne.w	r0, r0, #1
   b8434:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8438:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b843c:	fa03 fc0c 	lsl.w	ip, r3, ip
   b8440:	ea40 000c 	orr.w	r0, r0, ip
   b8444:	fa23 f302 	lsr.w	r3, r3, r2
   b8448:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b844c:	e7cc      	b.n	b83e8 <__aeabi_d2f+0x14>
   b844e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b8452:	d107      	bne.n	b8464 <__aeabi_d2f+0x90>
   b8454:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b8458:	bf1e      	ittt	ne
   b845a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b845e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b8462:	4770      	bxne	lr
   b8464:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b8468:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b846c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b8470:	4770      	bx	lr
   b8472:	bf00      	nop

000b8474 <__aeabi_d2ulz>:
   b8474:	b5d0      	push	{r4, r6, r7, lr}
   b8476:	4b0c      	ldr	r3, [pc, #48]	; (b84a8 <__aeabi_d2ulz+0x34>)
   b8478:	2200      	movs	r2, #0
   b847a:	4606      	mov	r6, r0
   b847c:	460f      	mov	r7, r1
   b847e:	f7ff fcb1 	bl	b7de4 <__aeabi_dmul>
   b8482:	f7ff ff87 	bl	b8394 <__aeabi_d2uiz>
   b8486:	4604      	mov	r4, r0
   b8488:	f7ff fc32 	bl	b7cf0 <__aeabi_ui2d>
   b848c:	4b07      	ldr	r3, [pc, #28]	; (b84ac <__aeabi_d2ulz+0x38>)
   b848e:	2200      	movs	r2, #0
   b8490:	f7ff fca8 	bl	b7de4 <__aeabi_dmul>
   b8494:	4602      	mov	r2, r0
   b8496:	460b      	mov	r3, r1
   b8498:	4630      	mov	r0, r6
   b849a:	4639      	mov	r1, r7
   b849c:	f7ff faea 	bl	b7a74 <__aeabi_dsub>
   b84a0:	f7ff ff78 	bl	b8394 <__aeabi_d2uiz>
   b84a4:	4621      	mov	r1, r4
   b84a6:	bdd0      	pop	{r4, r6, r7, pc}
   b84a8:	3df00000 	.word	0x3df00000
   b84ac:	41f00000 	.word	0x41f00000

000b84b0 <atexit>:
   b84b0:	2300      	movs	r3, #0
   b84b2:	4601      	mov	r1, r0
   b84b4:	461a      	mov	r2, r3
   b84b6:	4618      	mov	r0, r3
   b84b8:	f000 be9c 	b.w	b91f4 <__register_exitproc>

000b84bc <atof>:
   b84bc:	2100      	movs	r1, #0
   b84be:	f000 be8d 	b.w	b91dc <strtod>

000b84c2 <memcpy>:
   b84c2:	440a      	add	r2, r1
   b84c4:	4291      	cmp	r1, r2
   b84c6:	f100 33ff 	add.w	r3, r0, #4294967295
   b84ca:	d100      	bne.n	b84ce <memcpy+0xc>
   b84cc:	4770      	bx	lr
   b84ce:	b510      	push	{r4, lr}
   b84d0:	f811 4b01 	ldrb.w	r4, [r1], #1
   b84d4:	f803 4f01 	strb.w	r4, [r3, #1]!
   b84d8:	4291      	cmp	r1, r2
   b84da:	d1f9      	bne.n	b84d0 <memcpy+0xe>
   b84dc:	bd10      	pop	{r4, pc}

000b84de <memset>:
   b84de:	4402      	add	r2, r0
   b84e0:	4603      	mov	r3, r0
   b84e2:	4293      	cmp	r3, r2
   b84e4:	d100      	bne.n	b84e8 <memset+0xa>
   b84e6:	4770      	bx	lr
   b84e8:	f803 1b01 	strb.w	r1, [r3], #1
   b84ec:	e7f9      	b.n	b84e2 <memset+0x4>
	...

000b84f0 <srand>:
   b84f0:	b538      	push	{r3, r4, r5, lr}
   b84f2:	4b10      	ldr	r3, [pc, #64]	; (b8534 <srand+0x44>)
   b84f4:	681d      	ldr	r5, [r3, #0]
   b84f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b84f8:	4604      	mov	r4, r0
   b84fa:	b9b3      	cbnz	r3, b852a <srand+0x3a>
   b84fc:	2018      	movs	r0, #24
   b84fe:	f7fd ff09 	bl	b6314 <malloc>
   b8502:	4602      	mov	r2, r0
   b8504:	63a8      	str	r0, [r5, #56]	; 0x38
   b8506:	b920      	cbnz	r0, b8512 <srand+0x22>
   b8508:	4b0b      	ldr	r3, [pc, #44]	; (b8538 <srand+0x48>)
   b850a:	480c      	ldr	r0, [pc, #48]	; (b853c <srand+0x4c>)
   b850c:	2142      	movs	r1, #66	; 0x42
   b850e:	f7fd ff31 	bl	b6374 <__assert_func>
   b8512:	490b      	ldr	r1, [pc, #44]	; (b8540 <srand+0x50>)
   b8514:	4b0b      	ldr	r3, [pc, #44]	; (b8544 <srand+0x54>)
   b8516:	e9c0 1300 	strd	r1, r3, [r0]
   b851a:	4b0b      	ldr	r3, [pc, #44]	; (b8548 <srand+0x58>)
   b851c:	6083      	str	r3, [r0, #8]
   b851e:	230b      	movs	r3, #11
   b8520:	8183      	strh	r3, [r0, #12]
   b8522:	2100      	movs	r1, #0
   b8524:	2001      	movs	r0, #1
   b8526:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b852a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b852c:	2200      	movs	r2, #0
   b852e:	611c      	str	r4, [r3, #16]
   b8530:	615a      	str	r2, [r3, #20]
   b8532:	bd38      	pop	{r3, r4, r5, pc}
   b8534:	2003e404 	.word	0x2003e404
   b8538:	000bb2a5 	.word	0x000bb2a5
   b853c:	000bb2bc 	.word	0x000bb2bc
   b8540:	abcd330e 	.word	0xabcd330e
   b8544:	e66d1234 	.word	0xe66d1234
   b8548:	0005deec 	.word	0x0005deec

000b854c <strcmp>:
   b854c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8550:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8554:	2a01      	cmp	r2, #1
   b8556:	bf28      	it	cs
   b8558:	429a      	cmpcs	r2, r3
   b855a:	d0f7      	beq.n	b854c <strcmp>
   b855c:	1ad0      	subs	r0, r2, r3
   b855e:	4770      	bx	lr

000b8560 <strlen>:
   b8560:	4603      	mov	r3, r0
   b8562:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8566:	2a00      	cmp	r2, #0
   b8568:	d1fb      	bne.n	b8562 <strlen+0x2>
   b856a:	1a18      	subs	r0, r3, r0
   b856c:	3801      	subs	r0, #1
   b856e:	4770      	bx	lr

000b8570 <strncmp>:
   b8570:	b510      	push	{r4, lr}
   b8572:	b17a      	cbz	r2, b8594 <strncmp+0x24>
   b8574:	4603      	mov	r3, r0
   b8576:	3901      	subs	r1, #1
   b8578:	1884      	adds	r4, r0, r2
   b857a:	f813 0b01 	ldrb.w	r0, [r3], #1
   b857e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8582:	4290      	cmp	r0, r2
   b8584:	d101      	bne.n	b858a <strncmp+0x1a>
   b8586:	42a3      	cmp	r3, r4
   b8588:	d101      	bne.n	b858e <strncmp+0x1e>
   b858a:	1a80      	subs	r0, r0, r2
   b858c:	bd10      	pop	{r4, pc}
   b858e:	2800      	cmp	r0, #0
   b8590:	d1f3      	bne.n	b857a <strncmp+0xa>
   b8592:	e7fa      	b.n	b858a <strncmp+0x1a>
   b8594:	4610      	mov	r0, r2
   b8596:	e7f9      	b.n	b858c <strncmp+0x1c>

000b8598 <sulp>:
   b8598:	b570      	push	{r4, r5, r6, lr}
   b859a:	4604      	mov	r4, r0
   b859c:	460d      	mov	r5, r1
   b859e:	ec45 4b10 	vmov	d0, r4, r5
   b85a2:	4616      	mov	r6, r2
   b85a4:	f001 fd80 	bl	ba0a8 <__ulp>
   b85a8:	ec51 0b10 	vmov	r0, r1, d0
   b85ac:	b17e      	cbz	r6, b85ce <sulp+0x36>
   b85ae:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b85b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b85b6:	2b00      	cmp	r3, #0
   b85b8:	dd09      	ble.n	b85ce <sulp+0x36>
   b85ba:	051b      	lsls	r3, r3, #20
   b85bc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b85c0:	2400      	movs	r4, #0
   b85c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b85c6:	4622      	mov	r2, r4
   b85c8:	462b      	mov	r3, r5
   b85ca:	f7ff fc0b 	bl	b7de4 <__aeabi_dmul>
   b85ce:	bd70      	pop	{r4, r5, r6, pc}

000b85d0 <_strtod_l>:
   b85d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b85d4:	ed2d 8b02 	vpush	{d8}
   b85d8:	b09d      	sub	sp, #116	; 0x74
   b85da:	461f      	mov	r7, r3
   b85dc:	2300      	movs	r3, #0
   b85de:	9318      	str	r3, [sp, #96]	; 0x60
   b85e0:	4ba2      	ldr	r3, [pc, #648]	; (b886c <_strtod_l+0x29c>)
   b85e2:	9213      	str	r2, [sp, #76]	; 0x4c
   b85e4:	681b      	ldr	r3, [r3, #0]
   b85e6:	9305      	str	r3, [sp, #20]
   b85e8:	4604      	mov	r4, r0
   b85ea:	4618      	mov	r0, r3
   b85ec:	4688      	mov	r8, r1
   b85ee:	f7ff ffb7 	bl	b8560 <strlen>
   b85f2:	f04f 0a00 	mov.w	sl, #0
   b85f6:	4605      	mov	r5, r0
   b85f8:	f04f 0b00 	mov.w	fp, #0
   b85fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8600:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8602:	781a      	ldrb	r2, [r3, #0]
   b8604:	2a2b      	cmp	r2, #43	; 0x2b
   b8606:	d04e      	beq.n	b86a6 <_strtod_l+0xd6>
   b8608:	d83b      	bhi.n	b8682 <_strtod_l+0xb2>
   b860a:	2a0d      	cmp	r2, #13
   b860c:	d834      	bhi.n	b8678 <_strtod_l+0xa8>
   b860e:	2a08      	cmp	r2, #8
   b8610:	d834      	bhi.n	b867c <_strtod_l+0xac>
   b8612:	2a00      	cmp	r2, #0
   b8614:	d03e      	beq.n	b8694 <_strtod_l+0xc4>
   b8616:	2300      	movs	r3, #0
   b8618:	930a      	str	r3, [sp, #40]	; 0x28
   b861a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b861c:	7833      	ldrb	r3, [r6, #0]
   b861e:	2b30      	cmp	r3, #48	; 0x30
   b8620:	f040 80b0 	bne.w	b8784 <_strtod_l+0x1b4>
   b8624:	7873      	ldrb	r3, [r6, #1]
   b8626:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b862a:	2b58      	cmp	r3, #88	; 0x58
   b862c:	d168      	bne.n	b8700 <_strtod_l+0x130>
   b862e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8630:	9301      	str	r3, [sp, #4]
   b8632:	ab18      	add	r3, sp, #96	; 0x60
   b8634:	9702      	str	r7, [sp, #8]
   b8636:	9300      	str	r3, [sp, #0]
   b8638:	4a8d      	ldr	r2, [pc, #564]	; (b8870 <_strtod_l+0x2a0>)
   b863a:	ab19      	add	r3, sp, #100	; 0x64
   b863c:	a917      	add	r1, sp, #92	; 0x5c
   b863e:	4620      	mov	r0, r4
   b8640:	f000 fea2 	bl	b9388 <__gethex>
   b8644:	f010 0707 	ands.w	r7, r0, #7
   b8648:	4605      	mov	r5, r0
   b864a:	d005      	beq.n	b8658 <_strtod_l+0x88>
   b864c:	2f06      	cmp	r7, #6
   b864e:	d12c      	bne.n	b86aa <_strtod_l+0xda>
   b8650:	3601      	adds	r6, #1
   b8652:	2300      	movs	r3, #0
   b8654:	9617      	str	r6, [sp, #92]	; 0x5c
   b8656:	930a      	str	r3, [sp, #40]	; 0x28
   b8658:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b865a:	2b00      	cmp	r3, #0
   b865c:	f040 8590 	bne.w	b9180 <_strtod_l+0xbb0>
   b8660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8662:	b1eb      	cbz	r3, b86a0 <_strtod_l+0xd0>
   b8664:	4652      	mov	r2, sl
   b8666:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b866a:	ec43 2b10 	vmov	d0, r2, r3
   b866e:	b01d      	add	sp, #116	; 0x74
   b8670:	ecbd 8b02 	vpop	{d8}
   b8674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8678:	2a20      	cmp	r2, #32
   b867a:	d1cc      	bne.n	b8616 <_strtod_l+0x46>
   b867c:	3301      	adds	r3, #1
   b867e:	9317      	str	r3, [sp, #92]	; 0x5c
   b8680:	e7be      	b.n	b8600 <_strtod_l+0x30>
   b8682:	2a2d      	cmp	r2, #45	; 0x2d
   b8684:	d1c7      	bne.n	b8616 <_strtod_l+0x46>
   b8686:	2201      	movs	r2, #1
   b8688:	920a      	str	r2, [sp, #40]	; 0x28
   b868a:	1c5a      	adds	r2, r3, #1
   b868c:	9217      	str	r2, [sp, #92]	; 0x5c
   b868e:	785b      	ldrb	r3, [r3, #1]
   b8690:	2b00      	cmp	r3, #0
   b8692:	d1c2      	bne.n	b861a <_strtod_l+0x4a>
   b8694:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b8696:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b869a:	2b00      	cmp	r3, #0
   b869c:	f040 856e 	bne.w	b917c <_strtod_l+0xbac>
   b86a0:	4652      	mov	r2, sl
   b86a2:	465b      	mov	r3, fp
   b86a4:	e7e1      	b.n	b866a <_strtod_l+0x9a>
   b86a6:	2200      	movs	r2, #0
   b86a8:	e7ee      	b.n	b8688 <_strtod_l+0xb8>
   b86aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b86ac:	b13a      	cbz	r2, b86be <_strtod_l+0xee>
   b86ae:	2135      	movs	r1, #53	; 0x35
   b86b0:	a81a      	add	r0, sp, #104	; 0x68
   b86b2:	f001 fe04 	bl	ba2be <__copybits>
   b86b6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b86b8:	4620      	mov	r0, r4
   b86ba:	f001 f9c3 	bl	b9a44 <_Bfree>
   b86be:	3f01      	subs	r7, #1
   b86c0:	2f04      	cmp	r7, #4
   b86c2:	d806      	bhi.n	b86d2 <_strtod_l+0x102>
   b86c4:	e8df f007 	tbb	[pc, r7]
   b86c8:	1714030a 	.word	0x1714030a
   b86cc:	0a          	.byte	0x0a
   b86cd:	00          	.byte	0x00
   b86ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b86d2:	0728      	lsls	r0, r5, #28
   b86d4:	d5c0      	bpl.n	b8658 <_strtod_l+0x88>
   b86d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b86da:	e7bd      	b.n	b8658 <_strtod_l+0x88>
   b86dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b86e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b86e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b86e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b86ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b86ee:	e7f0      	b.n	b86d2 <_strtod_l+0x102>
   b86f0:	f8df b180 	ldr.w	fp, [pc, #384]	; b8874 <_strtod_l+0x2a4>
   b86f4:	e7ed      	b.n	b86d2 <_strtod_l+0x102>
   b86f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b86fa:	f04f 3aff 	mov.w	sl, #4294967295
   b86fe:	e7e8      	b.n	b86d2 <_strtod_l+0x102>
   b8700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8702:	1c5a      	adds	r2, r3, #1
   b8704:	9217      	str	r2, [sp, #92]	; 0x5c
   b8706:	785b      	ldrb	r3, [r3, #1]
   b8708:	2b30      	cmp	r3, #48	; 0x30
   b870a:	d0f9      	beq.n	b8700 <_strtod_l+0x130>
   b870c:	2b00      	cmp	r3, #0
   b870e:	d0a3      	beq.n	b8658 <_strtod_l+0x88>
   b8710:	2301      	movs	r3, #1
   b8712:	f04f 0900 	mov.w	r9, #0
   b8716:	9304      	str	r3, [sp, #16]
   b8718:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b871a:	9308      	str	r3, [sp, #32]
   b871c:	f8cd 901c 	str.w	r9, [sp, #28]
   b8720:	464f      	mov	r7, r9
   b8722:	220a      	movs	r2, #10
   b8724:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b8726:	7806      	ldrb	r6, [r0, #0]
   b8728:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b872c:	b2d9      	uxtb	r1, r3
   b872e:	2909      	cmp	r1, #9
   b8730:	d92a      	bls.n	b8788 <_strtod_l+0x1b8>
   b8732:	9905      	ldr	r1, [sp, #20]
   b8734:	462a      	mov	r2, r5
   b8736:	f7ff ff1b 	bl	b8570 <strncmp>
   b873a:	b398      	cbz	r0, b87a4 <_strtod_l+0x1d4>
   b873c:	2000      	movs	r0, #0
   b873e:	4632      	mov	r2, r6
   b8740:	463d      	mov	r5, r7
   b8742:	9005      	str	r0, [sp, #20]
   b8744:	4603      	mov	r3, r0
   b8746:	2a65      	cmp	r2, #101	; 0x65
   b8748:	d001      	beq.n	b874e <_strtod_l+0x17e>
   b874a:	2a45      	cmp	r2, #69	; 0x45
   b874c:	d118      	bne.n	b8780 <_strtod_l+0x1b0>
   b874e:	b91d      	cbnz	r5, b8758 <_strtod_l+0x188>
   b8750:	9a04      	ldr	r2, [sp, #16]
   b8752:	4302      	orrs	r2, r0
   b8754:	d09e      	beq.n	b8694 <_strtod_l+0xc4>
   b8756:	2500      	movs	r5, #0
   b8758:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b875c:	f108 0201 	add.w	r2, r8, #1
   b8760:	9217      	str	r2, [sp, #92]	; 0x5c
   b8762:	f898 2001 	ldrb.w	r2, [r8, #1]
   b8766:	2a2b      	cmp	r2, #43	; 0x2b
   b8768:	d075      	beq.n	b8856 <_strtod_l+0x286>
   b876a:	2a2d      	cmp	r2, #45	; 0x2d
   b876c:	d07b      	beq.n	b8866 <_strtod_l+0x296>
   b876e:	f04f 0c00 	mov.w	ip, #0
   b8772:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b8776:	2909      	cmp	r1, #9
   b8778:	f240 8082 	bls.w	b8880 <_strtod_l+0x2b0>
   b877c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8780:	2600      	movs	r6, #0
   b8782:	e09d      	b.n	b88c0 <_strtod_l+0x2f0>
   b8784:	2300      	movs	r3, #0
   b8786:	e7c4      	b.n	b8712 <_strtod_l+0x142>
   b8788:	2f08      	cmp	r7, #8
   b878a:	bfd8      	it	le
   b878c:	9907      	ldrle	r1, [sp, #28]
   b878e:	f100 0001 	add.w	r0, r0, #1
   b8792:	bfda      	itte	le
   b8794:	fb02 3301 	mlale	r3, r2, r1, r3
   b8798:	9307      	strle	r3, [sp, #28]
   b879a:	fb02 3909 	mlagt	r9, r2, r9, r3
   b879e:	3701      	adds	r7, #1
   b87a0:	9017      	str	r0, [sp, #92]	; 0x5c
   b87a2:	e7bf      	b.n	b8724 <_strtod_l+0x154>
   b87a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b87a6:	195a      	adds	r2, r3, r5
   b87a8:	9217      	str	r2, [sp, #92]	; 0x5c
   b87aa:	5d5a      	ldrb	r2, [r3, r5]
   b87ac:	2f00      	cmp	r7, #0
   b87ae:	d037      	beq.n	b8820 <_strtod_l+0x250>
   b87b0:	9005      	str	r0, [sp, #20]
   b87b2:	463d      	mov	r5, r7
   b87b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b87b8:	2b09      	cmp	r3, #9
   b87ba:	d912      	bls.n	b87e2 <_strtod_l+0x212>
   b87bc:	2301      	movs	r3, #1
   b87be:	e7c2      	b.n	b8746 <_strtod_l+0x176>
   b87c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b87c2:	1c5a      	adds	r2, r3, #1
   b87c4:	9217      	str	r2, [sp, #92]	; 0x5c
   b87c6:	785a      	ldrb	r2, [r3, #1]
   b87c8:	3001      	adds	r0, #1
   b87ca:	2a30      	cmp	r2, #48	; 0x30
   b87cc:	d0f8      	beq.n	b87c0 <_strtod_l+0x1f0>
   b87ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b87d2:	2b08      	cmp	r3, #8
   b87d4:	f200 84d9 	bhi.w	b918a <_strtod_l+0xbba>
   b87d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b87da:	9005      	str	r0, [sp, #20]
   b87dc:	2000      	movs	r0, #0
   b87de:	9308      	str	r3, [sp, #32]
   b87e0:	4605      	mov	r5, r0
   b87e2:	3a30      	subs	r2, #48	; 0x30
   b87e4:	f100 0301 	add.w	r3, r0, #1
   b87e8:	d014      	beq.n	b8814 <_strtod_l+0x244>
   b87ea:	9905      	ldr	r1, [sp, #20]
   b87ec:	4419      	add	r1, r3
   b87ee:	9105      	str	r1, [sp, #20]
   b87f0:	462b      	mov	r3, r5
   b87f2:	eb00 0e05 	add.w	lr, r0, r5
   b87f6:	210a      	movs	r1, #10
   b87f8:	4573      	cmp	r3, lr
   b87fa:	d113      	bne.n	b8824 <_strtod_l+0x254>
   b87fc:	182b      	adds	r3, r5, r0
   b87fe:	2b08      	cmp	r3, #8
   b8800:	f105 0501 	add.w	r5, r5, #1
   b8804:	4405      	add	r5, r0
   b8806:	dc1c      	bgt.n	b8842 <_strtod_l+0x272>
   b8808:	9907      	ldr	r1, [sp, #28]
   b880a:	230a      	movs	r3, #10
   b880c:	fb03 2301 	mla	r3, r3, r1, r2
   b8810:	9307      	str	r3, [sp, #28]
   b8812:	2300      	movs	r3, #0
   b8814:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8816:	1c51      	adds	r1, r2, #1
   b8818:	9117      	str	r1, [sp, #92]	; 0x5c
   b881a:	7852      	ldrb	r2, [r2, #1]
   b881c:	4618      	mov	r0, r3
   b881e:	e7c9      	b.n	b87b4 <_strtod_l+0x1e4>
   b8820:	4638      	mov	r0, r7
   b8822:	e7d2      	b.n	b87ca <_strtod_l+0x1fa>
   b8824:	2b08      	cmp	r3, #8
   b8826:	dc04      	bgt.n	b8832 <_strtod_l+0x262>
   b8828:	9e07      	ldr	r6, [sp, #28]
   b882a:	434e      	muls	r6, r1
   b882c:	9607      	str	r6, [sp, #28]
   b882e:	3301      	adds	r3, #1
   b8830:	e7e2      	b.n	b87f8 <_strtod_l+0x228>
   b8832:	f103 0c01 	add.w	ip, r3, #1
   b8836:	f1bc 0f10 	cmp.w	ip, #16
   b883a:	bfd8      	it	le
   b883c:	fb01 f909 	mulle.w	r9, r1, r9
   b8840:	e7f5      	b.n	b882e <_strtod_l+0x25e>
   b8842:	2d10      	cmp	r5, #16
   b8844:	bfdc      	itt	le
   b8846:	230a      	movle	r3, #10
   b8848:	fb03 2909 	mlale	r9, r3, r9, r2
   b884c:	e7e1      	b.n	b8812 <_strtod_l+0x242>
   b884e:	2300      	movs	r3, #0
   b8850:	9305      	str	r3, [sp, #20]
   b8852:	2301      	movs	r3, #1
   b8854:	e77c      	b.n	b8750 <_strtod_l+0x180>
   b8856:	f04f 0c00 	mov.w	ip, #0
   b885a:	f108 0202 	add.w	r2, r8, #2
   b885e:	9217      	str	r2, [sp, #92]	; 0x5c
   b8860:	f898 2002 	ldrb.w	r2, [r8, #2]
   b8864:	e785      	b.n	b8772 <_strtod_l+0x1a2>
   b8866:	f04f 0c01 	mov.w	ip, #1
   b886a:	e7f6      	b.n	b885a <_strtod_l+0x28a>
   b886c:	000bb528 	.word	0x000bb528
   b8870:	000bb340 	.word	0x000bb340
   b8874:	7ff00000 	.word	0x7ff00000
   b8878:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b887a:	1c51      	adds	r1, r2, #1
   b887c:	9117      	str	r1, [sp, #92]	; 0x5c
   b887e:	7852      	ldrb	r2, [r2, #1]
   b8880:	2a30      	cmp	r2, #48	; 0x30
   b8882:	d0f9      	beq.n	b8878 <_strtod_l+0x2a8>
   b8884:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b8888:	2908      	cmp	r1, #8
   b888a:	f63f af79 	bhi.w	b8780 <_strtod_l+0x1b0>
   b888e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b8892:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8894:	9206      	str	r2, [sp, #24]
   b8896:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8898:	1c51      	adds	r1, r2, #1
   b889a:	9117      	str	r1, [sp, #92]	; 0x5c
   b889c:	7852      	ldrb	r2, [r2, #1]
   b889e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b88a2:	2e09      	cmp	r6, #9
   b88a4:	d937      	bls.n	b8916 <_strtod_l+0x346>
   b88a6:	9e06      	ldr	r6, [sp, #24]
   b88a8:	1b89      	subs	r1, r1, r6
   b88aa:	2908      	cmp	r1, #8
   b88ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b88b0:	dc02      	bgt.n	b88b8 <_strtod_l+0x2e8>
   b88b2:	4576      	cmp	r6, lr
   b88b4:	bfa8      	it	ge
   b88b6:	4676      	movge	r6, lr
   b88b8:	f1bc 0f00 	cmp.w	ip, #0
   b88bc:	d000      	beq.n	b88c0 <_strtod_l+0x2f0>
   b88be:	4276      	negs	r6, r6
   b88c0:	2d00      	cmp	r5, #0
   b88c2:	d14d      	bne.n	b8960 <_strtod_l+0x390>
   b88c4:	9904      	ldr	r1, [sp, #16]
   b88c6:	4301      	orrs	r1, r0
   b88c8:	f47f aec6 	bne.w	b8658 <_strtod_l+0x88>
   b88cc:	2b00      	cmp	r3, #0
   b88ce:	f47f aee1 	bne.w	b8694 <_strtod_l+0xc4>
   b88d2:	2a69      	cmp	r2, #105	; 0x69
   b88d4:	d027      	beq.n	b8926 <_strtod_l+0x356>
   b88d6:	dc24      	bgt.n	b8922 <_strtod_l+0x352>
   b88d8:	2a49      	cmp	r2, #73	; 0x49
   b88da:	d024      	beq.n	b8926 <_strtod_l+0x356>
   b88dc:	2a4e      	cmp	r2, #78	; 0x4e
   b88de:	f47f aed9 	bne.w	b8694 <_strtod_l+0xc4>
   b88e2:	499f      	ldr	r1, [pc, #636]	; (b8b60 <_strtod_l+0x590>)
   b88e4:	a817      	add	r0, sp, #92	; 0x5c
   b88e6:	f000 ffa7 	bl	b9838 <__match>
   b88ea:	2800      	cmp	r0, #0
   b88ec:	f43f aed2 	beq.w	b8694 <_strtod_l+0xc4>
   b88f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b88f2:	781b      	ldrb	r3, [r3, #0]
   b88f4:	2b28      	cmp	r3, #40	; 0x28
   b88f6:	d12d      	bne.n	b8954 <_strtod_l+0x384>
   b88f8:	499a      	ldr	r1, [pc, #616]	; (b8b64 <_strtod_l+0x594>)
   b88fa:	aa1a      	add	r2, sp, #104	; 0x68
   b88fc:	a817      	add	r0, sp, #92	; 0x5c
   b88fe:	f000 ffaf 	bl	b9860 <__hexnan>
   b8902:	2805      	cmp	r0, #5
   b8904:	d126      	bne.n	b8954 <_strtod_l+0x384>
   b8906:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b8908:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b890c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b8910:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b8914:	e6a0      	b.n	b8658 <_strtod_l+0x88>
   b8916:	210a      	movs	r1, #10
   b8918:	fb01 2e0e 	mla	lr, r1, lr, r2
   b891c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b8920:	e7b9      	b.n	b8896 <_strtod_l+0x2c6>
   b8922:	2a6e      	cmp	r2, #110	; 0x6e
   b8924:	e7db      	b.n	b88de <_strtod_l+0x30e>
   b8926:	4990      	ldr	r1, [pc, #576]	; (b8b68 <_strtod_l+0x598>)
   b8928:	a817      	add	r0, sp, #92	; 0x5c
   b892a:	f000 ff85 	bl	b9838 <__match>
   b892e:	2800      	cmp	r0, #0
   b8930:	f43f aeb0 	beq.w	b8694 <_strtod_l+0xc4>
   b8934:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8936:	498d      	ldr	r1, [pc, #564]	; (b8b6c <_strtod_l+0x59c>)
   b8938:	3b01      	subs	r3, #1
   b893a:	a817      	add	r0, sp, #92	; 0x5c
   b893c:	9317      	str	r3, [sp, #92]	; 0x5c
   b893e:	f000 ff7b 	bl	b9838 <__match>
   b8942:	b910      	cbnz	r0, b894a <_strtod_l+0x37a>
   b8944:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8946:	3301      	adds	r3, #1
   b8948:	9317      	str	r3, [sp, #92]	; 0x5c
   b894a:	f8df b230 	ldr.w	fp, [pc, #560]	; b8b7c <_strtod_l+0x5ac>
   b894e:	f04f 0a00 	mov.w	sl, #0
   b8952:	e681      	b.n	b8658 <_strtod_l+0x88>
   b8954:	4886      	ldr	r0, [pc, #536]	; (b8b70 <_strtod_l+0x5a0>)
   b8956:	f001 fd07 	bl	ba368 <nan>
   b895a:	ec5b ab10 	vmov	sl, fp, d0
   b895e:	e67b      	b.n	b8658 <_strtod_l+0x88>
   b8960:	9b05      	ldr	r3, [sp, #20]
   b8962:	9807      	ldr	r0, [sp, #28]
   b8964:	1af3      	subs	r3, r6, r3
   b8966:	2f00      	cmp	r7, #0
   b8968:	bf08      	it	eq
   b896a:	462f      	moveq	r7, r5
   b896c:	2d10      	cmp	r5, #16
   b896e:	9306      	str	r3, [sp, #24]
   b8970:	46a8      	mov	r8, r5
   b8972:	bfa8      	it	ge
   b8974:	f04f 0810 	movge.w	r8, #16
   b8978:	f7ff f9ba 	bl	b7cf0 <__aeabi_ui2d>
   b897c:	2d09      	cmp	r5, #9
   b897e:	4682      	mov	sl, r0
   b8980:	468b      	mov	fp, r1
   b8982:	dd13      	ble.n	b89ac <_strtod_l+0x3dc>
   b8984:	4b7b      	ldr	r3, [pc, #492]	; (b8b74 <_strtod_l+0x5a4>)
   b8986:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b898a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b898e:	f7ff fa29 	bl	b7de4 <__aeabi_dmul>
   b8992:	4682      	mov	sl, r0
   b8994:	4648      	mov	r0, r9
   b8996:	468b      	mov	fp, r1
   b8998:	f7ff f9aa 	bl	b7cf0 <__aeabi_ui2d>
   b899c:	4602      	mov	r2, r0
   b899e:	460b      	mov	r3, r1
   b89a0:	4650      	mov	r0, sl
   b89a2:	4659      	mov	r1, fp
   b89a4:	f7ff f868 	bl	b7a78 <__adddf3>
   b89a8:	4682      	mov	sl, r0
   b89aa:	468b      	mov	fp, r1
   b89ac:	2d0f      	cmp	r5, #15
   b89ae:	dc38      	bgt.n	b8a22 <_strtod_l+0x452>
   b89b0:	9b06      	ldr	r3, [sp, #24]
   b89b2:	2b00      	cmp	r3, #0
   b89b4:	f43f ae50 	beq.w	b8658 <_strtod_l+0x88>
   b89b8:	dd24      	ble.n	b8a04 <_strtod_l+0x434>
   b89ba:	2b16      	cmp	r3, #22
   b89bc:	dc0b      	bgt.n	b89d6 <_strtod_l+0x406>
   b89be:	496d      	ldr	r1, [pc, #436]	; (b8b74 <_strtod_l+0x5a4>)
   b89c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b89c4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b89c8:	4652      	mov	r2, sl
   b89ca:	465b      	mov	r3, fp
   b89cc:	f7ff fa0a 	bl	b7de4 <__aeabi_dmul>
   b89d0:	4682      	mov	sl, r0
   b89d2:	468b      	mov	fp, r1
   b89d4:	e640      	b.n	b8658 <_strtod_l+0x88>
   b89d6:	9a06      	ldr	r2, [sp, #24]
   b89d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b89dc:	4293      	cmp	r3, r2
   b89de:	db20      	blt.n	b8a22 <_strtod_l+0x452>
   b89e0:	4c64      	ldr	r4, [pc, #400]	; (b8b74 <_strtod_l+0x5a4>)
   b89e2:	f1c5 050f 	rsb	r5, r5, #15
   b89e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b89ea:	4652      	mov	r2, sl
   b89ec:	465b      	mov	r3, fp
   b89ee:	e9d1 0100 	ldrd	r0, r1, [r1]
   b89f2:	f7ff f9f7 	bl	b7de4 <__aeabi_dmul>
   b89f6:	9b06      	ldr	r3, [sp, #24]
   b89f8:	1b5d      	subs	r5, r3, r5
   b89fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b89fe:	e9d4 2300 	ldrd	r2, r3, [r4]
   b8a02:	e7e3      	b.n	b89cc <_strtod_l+0x3fc>
   b8a04:	9b06      	ldr	r3, [sp, #24]
   b8a06:	3316      	adds	r3, #22
   b8a08:	db0b      	blt.n	b8a22 <_strtod_l+0x452>
   b8a0a:	9b05      	ldr	r3, [sp, #20]
   b8a0c:	1b9e      	subs	r6, r3, r6
   b8a0e:	4b59      	ldr	r3, [pc, #356]	; (b8b74 <_strtod_l+0x5a4>)
   b8a10:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b8a14:	e9d6 2300 	ldrd	r2, r3, [r6]
   b8a18:	4650      	mov	r0, sl
   b8a1a:	4659      	mov	r1, fp
   b8a1c:	f7ff fb0c 	bl	b8038 <__aeabi_ddiv>
   b8a20:	e7d6      	b.n	b89d0 <_strtod_l+0x400>
   b8a22:	9b06      	ldr	r3, [sp, #24]
   b8a24:	eba5 0808 	sub.w	r8, r5, r8
   b8a28:	4498      	add	r8, r3
   b8a2a:	f1b8 0f00 	cmp.w	r8, #0
   b8a2e:	dd74      	ble.n	b8b1a <_strtod_l+0x54a>
   b8a30:	f018 030f 	ands.w	r3, r8, #15
   b8a34:	d00a      	beq.n	b8a4c <_strtod_l+0x47c>
   b8a36:	494f      	ldr	r1, [pc, #316]	; (b8b74 <_strtod_l+0x5a4>)
   b8a38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b8a3c:	4652      	mov	r2, sl
   b8a3e:	465b      	mov	r3, fp
   b8a40:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8a44:	f7ff f9ce 	bl	b7de4 <__aeabi_dmul>
   b8a48:	4682      	mov	sl, r0
   b8a4a:	468b      	mov	fp, r1
   b8a4c:	f038 080f 	bics.w	r8, r8, #15
   b8a50:	d04f      	beq.n	b8af2 <_strtod_l+0x522>
   b8a52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b8a56:	dd22      	ble.n	b8a9e <_strtod_l+0x4ce>
   b8a58:	2500      	movs	r5, #0
   b8a5a:	462e      	mov	r6, r5
   b8a5c:	9507      	str	r5, [sp, #28]
   b8a5e:	9505      	str	r5, [sp, #20]
   b8a60:	2322      	movs	r3, #34	; 0x22
   b8a62:	f8df b118 	ldr.w	fp, [pc, #280]	; b8b7c <_strtod_l+0x5ac>
   b8a66:	6023      	str	r3, [r4, #0]
   b8a68:	f04f 0a00 	mov.w	sl, #0
   b8a6c:	9b07      	ldr	r3, [sp, #28]
   b8a6e:	2b00      	cmp	r3, #0
   b8a70:	f43f adf2 	beq.w	b8658 <_strtod_l+0x88>
   b8a74:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8a76:	4620      	mov	r0, r4
   b8a78:	f000 ffe4 	bl	b9a44 <_Bfree>
   b8a7c:	9905      	ldr	r1, [sp, #20]
   b8a7e:	4620      	mov	r0, r4
   b8a80:	f000 ffe0 	bl	b9a44 <_Bfree>
   b8a84:	4631      	mov	r1, r6
   b8a86:	4620      	mov	r0, r4
   b8a88:	f000 ffdc 	bl	b9a44 <_Bfree>
   b8a8c:	9907      	ldr	r1, [sp, #28]
   b8a8e:	4620      	mov	r0, r4
   b8a90:	f000 ffd8 	bl	b9a44 <_Bfree>
   b8a94:	4629      	mov	r1, r5
   b8a96:	4620      	mov	r0, r4
   b8a98:	f000 ffd4 	bl	b9a44 <_Bfree>
   b8a9c:	e5dc      	b.n	b8658 <_strtod_l+0x88>
   b8a9e:	4b36      	ldr	r3, [pc, #216]	; (b8b78 <_strtod_l+0x5a8>)
   b8aa0:	9304      	str	r3, [sp, #16]
   b8aa2:	2300      	movs	r3, #0
   b8aa4:	ea4f 1828 	mov.w	r8, r8, asr #4
   b8aa8:	4650      	mov	r0, sl
   b8aaa:	4659      	mov	r1, fp
   b8aac:	4699      	mov	r9, r3
   b8aae:	f1b8 0f01 	cmp.w	r8, #1
   b8ab2:	dc21      	bgt.n	b8af8 <_strtod_l+0x528>
   b8ab4:	b10b      	cbz	r3, b8aba <_strtod_l+0x4ea>
   b8ab6:	4682      	mov	sl, r0
   b8ab8:	468b      	mov	fp, r1
   b8aba:	4b2f      	ldr	r3, [pc, #188]	; (b8b78 <_strtod_l+0x5a8>)
   b8abc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b8ac0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b8ac4:	4652      	mov	r2, sl
   b8ac6:	465b      	mov	r3, fp
   b8ac8:	e9d9 0100 	ldrd	r0, r1, [r9]
   b8acc:	f7ff f98a 	bl	b7de4 <__aeabi_dmul>
   b8ad0:	4b2a      	ldr	r3, [pc, #168]	; (b8b7c <_strtod_l+0x5ac>)
   b8ad2:	460a      	mov	r2, r1
   b8ad4:	400b      	ands	r3, r1
   b8ad6:	492a      	ldr	r1, [pc, #168]	; (b8b80 <_strtod_l+0x5b0>)
   b8ad8:	428b      	cmp	r3, r1
   b8ada:	4682      	mov	sl, r0
   b8adc:	d8bc      	bhi.n	b8a58 <_strtod_l+0x488>
   b8ade:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b8ae2:	428b      	cmp	r3, r1
   b8ae4:	bf86      	itte	hi
   b8ae6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b8b84 <_strtod_l+0x5b4>
   b8aea:	f04f 3aff 	movhi.w	sl, #4294967295
   b8aee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b8af2:	2300      	movs	r3, #0
   b8af4:	9304      	str	r3, [sp, #16]
   b8af6:	e084      	b.n	b8c02 <_strtod_l+0x632>
   b8af8:	f018 0f01 	tst.w	r8, #1
   b8afc:	d005      	beq.n	b8b0a <_strtod_l+0x53a>
   b8afe:	9b04      	ldr	r3, [sp, #16]
   b8b00:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8b04:	f7ff f96e 	bl	b7de4 <__aeabi_dmul>
   b8b08:	2301      	movs	r3, #1
   b8b0a:	9a04      	ldr	r2, [sp, #16]
   b8b0c:	3208      	adds	r2, #8
   b8b0e:	f109 0901 	add.w	r9, r9, #1
   b8b12:	ea4f 0868 	mov.w	r8, r8, asr #1
   b8b16:	9204      	str	r2, [sp, #16]
   b8b18:	e7c9      	b.n	b8aae <_strtod_l+0x4de>
   b8b1a:	d0ea      	beq.n	b8af2 <_strtod_l+0x522>
   b8b1c:	f1c8 0800 	rsb	r8, r8, #0
   b8b20:	f018 020f 	ands.w	r2, r8, #15
   b8b24:	d00a      	beq.n	b8b3c <_strtod_l+0x56c>
   b8b26:	4b13      	ldr	r3, [pc, #76]	; (b8b74 <_strtod_l+0x5a4>)
   b8b28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b8b2c:	4650      	mov	r0, sl
   b8b2e:	4659      	mov	r1, fp
   b8b30:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8b34:	f7ff fa80 	bl	b8038 <__aeabi_ddiv>
   b8b38:	4682      	mov	sl, r0
   b8b3a:	468b      	mov	fp, r1
   b8b3c:	ea5f 1828 	movs.w	r8, r8, asr #4
   b8b40:	d0d7      	beq.n	b8af2 <_strtod_l+0x522>
   b8b42:	f1b8 0f1f 	cmp.w	r8, #31
   b8b46:	dd1f      	ble.n	b8b88 <_strtod_l+0x5b8>
   b8b48:	2500      	movs	r5, #0
   b8b4a:	462e      	mov	r6, r5
   b8b4c:	9507      	str	r5, [sp, #28]
   b8b4e:	9505      	str	r5, [sp, #20]
   b8b50:	2322      	movs	r3, #34	; 0x22
   b8b52:	f04f 0a00 	mov.w	sl, #0
   b8b56:	f04f 0b00 	mov.w	fp, #0
   b8b5a:	6023      	str	r3, [r4, #0]
   b8b5c:	e786      	b.n	b8a6c <_strtod_l+0x49c>
   b8b5e:	bf00      	nop
   b8b60:	000bafed 	.word	0x000bafed
   b8b64:	000bb354 	.word	0x000bb354
   b8b68:	000baff1 	.word	0x000baff1
   b8b6c:	000bb339 	.word	0x000bb339
   b8b70:	000ba44a 	.word	0x000ba44a
   b8b74:	000bb5e8 	.word	0x000bb5e8
   b8b78:	000bb5c0 	.word	0x000bb5c0
   b8b7c:	7ff00000 	.word	0x7ff00000
   b8b80:	7ca00000 	.word	0x7ca00000
   b8b84:	7fefffff 	.word	0x7fefffff
   b8b88:	f018 0310 	ands.w	r3, r8, #16
   b8b8c:	bf18      	it	ne
   b8b8e:	236a      	movne	r3, #106	; 0x6a
   b8b90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b8f40 <_strtod_l+0x970>
   b8b94:	9304      	str	r3, [sp, #16]
   b8b96:	4650      	mov	r0, sl
   b8b98:	4659      	mov	r1, fp
   b8b9a:	2300      	movs	r3, #0
   b8b9c:	f018 0f01 	tst.w	r8, #1
   b8ba0:	d004      	beq.n	b8bac <_strtod_l+0x5dc>
   b8ba2:	e9d9 2300 	ldrd	r2, r3, [r9]
   b8ba6:	f7ff f91d 	bl	b7de4 <__aeabi_dmul>
   b8baa:	2301      	movs	r3, #1
   b8bac:	ea5f 0868 	movs.w	r8, r8, asr #1
   b8bb0:	f109 0908 	add.w	r9, r9, #8
   b8bb4:	d1f2      	bne.n	b8b9c <_strtod_l+0x5cc>
   b8bb6:	b10b      	cbz	r3, b8bbc <_strtod_l+0x5ec>
   b8bb8:	4682      	mov	sl, r0
   b8bba:	468b      	mov	fp, r1
   b8bbc:	9b04      	ldr	r3, [sp, #16]
   b8bbe:	b1c3      	cbz	r3, b8bf2 <_strtod_l+0x622>
   b8bc0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b8bc4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b8bc8:	2b00      	cmp	r3, #0
   b8bca:	4659      	mov	r1, fp
   b8bcc:	dd11      	ble.n	b8bf2 <_strtod_l+0x622>
   b8bce:	2b1f      	cmp	r3, #31
   b8bd0:	f340 8124 	ble.w	b8e1c <_strtod_l+0x84c>
   b8bd4:	2b34      	cmp	r3, #52	; 0x34
   b8bd6:	bfde      	ittt	le
   b8bd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b8bdc:	f04f 33ff 	movle.w	r3, #4294967295
   b8be0:	fa03 f202 	lslle.w	r2, r3, r2
   b8be4:	f04f 0a00 	mov.w	sl, #0
   b8be8:	bfcc      	ite	gt
   b8bea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b8bee:	ea02 0b01 	andle.w	fp, r2, r1
   b8bf2:	2200      	movs	r2, #0
   b8bf4:	2300      	movs	r3, #0
   b8bf6:	4650      	mov	r0, sl
   b8bf8:	4659      	mov	r1, fp
   b8bfa:	f7ff fb5b 	bl	b82b4 <__aeabi_dcmpeq>
   b8bfe:	2800      	cmp	r0, #0
   b8c00:	d1a2      	bne.n	b8b48 <_strtod_l+0x578>
   b8c02:	9b07      	ldr	r3, [sp, #28]
   b8c04:	9300      	str	r3, [sp, #0]
   b8c06:	9908      	ldr	r1, [sp, #32]
   b8c08:	462b      	mov	r3, r5
   b8c0a:	463a      	mov	r2, r7
   b8c0c:	4620      	mov	r0, r4
   b8c0e:	f000 ff81 	bl	b9b14 <__s2b>
   b8c12:	9007      	str	r0, [sp, #28]
   b8c14:	2800      	cmp	r0, #0
   b8c16:	f43f af1f 	beq.w	b8a58 <_strtod_l+0x488>
   b8c1a:	9b05      	ldr	r3, [sp, #20]
   b8c1c:	1b9e      	subs	r6, r3, r6
   b8c1e:	9b06      	ldr	r3, [sp, #24]
   b8c20:	2b00      	cmp	r3, #0
   b8c22:	bfb4      	ite	lt
   b8c24:	4633      	movlt	r3, r6
   b8c26:	2300      	movge	r3, #0
   b8c28:	930c      	str	r3, [sp, #48]	; 0x30
   b8c2a:	9b06      	ldr	r3, [sp, #24]
   b8c2c:	2500      	movs	r5, #0
   b8c2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b8c32:	9312      	str	r3, [sp, #72]	; 0x48
   b8c34:	462e      	mov	r6, r5
   b8c36:	9b07      	ldr	r3, [sp, #28]
   b8c38:	4620      	mov	r0, r4
   b8c3a:	6859      	ldr	r1, [r3, #4]
   b8c3c:	f000 fec2 	bl	b99c4 <_Balloc>
   b8c40:	9005      	str	r0, [sp, #20]
   b8c42:	2800      	cmp	r0, #0
   b8c44:	f43f af0c 	beq.w	b8a60 <_strtod_l+0x490>
   b8c48:	9b07      	ldr	r3, [sp, #28]
   b8c4a:	691a      	ldr	r2, [r3, #16]
   b8c4c:	3202      	adds	r2, #2
   b8c4e:	f103 010c 	add.w	r1, r3, #12
   b8c52:	0092      	lsls	r2, r2, #2
   b8c54:	300c      	adds	r0, #12
   b8c56:	f7ff fc34 	bl	b84c2 <memcpy>
   b8c5a:	ec4b ab10 	vmov	d0, sl, fp
   b8c5e:	aa1a      	add	r2, sp, #104	; 0x68
   b8c60:	a919      	add	r1, sp, #100	; 0x64
   b8c62:	4620      	mov	r0, r4
   b8c64:	f001 fa9c 	bl	ba1a0 <__d2b>
   b8c68:	ec4b ab18 	vmov	d8, sl, fp
   b8c6c:	9018      	str	r0, [sp, #96]	; 0x60
   b8c6e:	2800      	cmp	r0, #0
   b8c70:	f43f aef6 	beq.w	b8a60 <_strtod_l+0x490>
   b8c74:	2101      	movs	r1, #1
   b8c76:	4620      	mov	r0, r4
   b8c78:	f000 ffe6 	bl	b9c48 <__i2b>
   b8c7c:	4606      	mov	r6, r0
   b8c7e:	2800      	cmp	r0, #0
   b8c80:	f43f aeee 	beq.w	b8a60 <_strtod_l+0x490>
   b8c84:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b8c86:	9904      	ldr	r1, [sp, #16]
   b8c88:	2b00      	cmp	r3, #0
   b8c8a:	bfab      	itete	ge
   b8c8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b8c8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b8c90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b8c92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b8c96:	bfac      	ite	ge
   b8c98:	eb03 0902 	addge.w	r9, r3, r2
   b8c9c:	1ad7      	sublt	r7, r2, r3
   b8c9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b8ca0:	eba3 0801 	sub.w	r8, r3, r1
   b8ca4:	4490      	add	r8, r2
   b8ca6:	4ba1      	ldr	r3, [pc, #644]	; (b8f2c <_strtod_l+0x95c>)
   b8ca8:	f108 38ff 	add.w	r8, r8, #4294967295
   b8cac:	4598      	cmp	r8, r3
   b8cae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b8cb2:	f280 80c7 	bge.w	b8e44 <_strtod_l+0x874>
   b8cb6:	eba3 0308 	sub.w	r3, r3, r8
   b8cba:	2b1f      	cmp	r3, #31
   b8cbc:	eba2 0203 	sub.w	r2, r2, r3
   b8cc0:	f04f 0101 	mov.w	r1, #1
   b8cc4:	f300 80b1 	bgt.w	b8e2a <_strtod_l+0x85a>
   b8cc8:	fa01 f303 	lsl.w	r3, r1, r3
   b8ccc:	930d      	str	r3, [sp, #52]	; 0x34
   b8cce:	2300      	movs	r3, #0
   b8cd0:	9308      	str	r3, [sp, #32]
   b8cd2:	eb09 0802 	add.w	r8, r9, r2
   b8cd6:	9b04      	ldr	r3, [sp, #16]
   b8cd8:	45c1      	cmp	r9, r8
   b8cda:	4417      	add	r7, r2
   b8cdc:	441f      	add	r7, r3
   b8cde:	464b      	mov	r3, r9
   b8ce0:	bfa8      	it	ge
   b8ce2:	4643      	movge	r3, r8
   b8ce4:	42bb      	cmp	r3, r7
   b8ce6:	bfa8      	it	ge
   b8ce8:	463b      	movge	r3, r7
   b8cea:	2b00      	cmp	r3, #0
   b8cec:	bfc2      	ittt	gt
   b8cee:	eba8 0803 	subgt.w	r8, r8, r3
   b8cf2:	1aff      	subgt	r7, r7, r3
   b8cf4:	eba9 0903 	subgt.w	r9, r9, r3
   b8cf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8cfa:	2b00      	cmp	r3, #0
   b8cfc:	dd17      	ble.n	b8d2e <_strtod_l+0x75e>
   b8cfe:	4631      	mov	r1, r6
   b8d00:	461a      	mov	r2, r3
   b8d02:	4620      	mov	r0, r4
   b8d04:	f001 f860 	bl	b9dc8 <__pow5mult>
   b8d08:	4606      	mov	r6, r0
   b8d0a:	2800      	cmp	r0, #0
   b8d0c:	f43f aea8 	beq.w	b8a60 <_strtod_l+0x490>
   b8d10:	4601      	mov	r1, r0
   b8d12:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8d14:	4620      	mov	r0, r4
   b8d16:	f000 ffad 	bl	b9c74 <__multiply>
   b8d1a:	900b      	str	r0, [sp, #44]	; 0x2c
   b8d1c:	2800      	cmp	r0, #0
   b8d1e:	f43f ae9f 	beq.w	b8a60 <_strtod_l+0x490>
   b8d22:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8d24:	4620      	mov	r0, r4
   b8d26:	f000 fe8d 	bl	b9a44 <_Bfree>
   b8d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8d2c:	9318      	str	r3, [sp, #96]	; 0x60
   b8d2e:	f1b8 0f00 	cmp.w	r8, #0
   b8d32:	f300 808c 	bgt.w	b8e4e <_strtod_l+0x87e>
   b8d36:	9b06      	ldr	r3, [sp, #24]
   b8d38:	2b00      	cmp	r3, #0
   b8d3a:	dd08      	ble.n	b8d4e <_strtod_l+0x77e>
   b8d3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b8d3e:	9905      	ldr	r1, [sp, #20]
   b8d40:	4620      	mov	r0, r4
   b8d42:	f001 f841 	bl	b9dc8 <__pow5mult>
   b8d46:	9005      	str	r0, [sp, #20]
   b8d48:	2800      	cmp	r0, #0
   b8d4a:	f43f ae89 	beq.w	b8a60 <_strtod_l+0x490>
   b8d4e:	2f00      	cmp	r7, #0
   b8d50:	dd08      	ble.n	b8d64 <_strtod_l+0x794>
   b8d52:	9905      	ldr	r1, [sp, #20]
   b8d54:	463a      	mov	r2, r7
   b8d56:	4620      	mov	r0, r4
   b8d58:	f001 f890 	bl	b9e7c <__lshift>
   b8d5c:	9005      	str	r0, [sp, #20]
   b8d5e:	2800      	cmp	r0, #0
   b8d60:	f43f ae7e 	beq.w	b8a60 <_strtod_l+0x490>
   b8d64:	f1b9 0f00 	cmp.w	r9, #0
   b8d68:	dd08      	ble.n	b8d7c <_strtod_l+0x7ac>
   b8d6a:	4631      	mov	r1, r6
   b8d6c:	464a      	mov	r2, r9
   b8d6e:	4620      	mov	r0, r4
   b8d70:	f001 f884 	bl	b9e7c <__lshift>
   b8d74:	4606      	mov	r6, r0
   b8d76:	2800      	cmp	r0, #0
   b8d78:	f43f ae72 	beq.w	b8a60 <_strtod_l+0x490>
   b8d7c:	9a05      	ldr	r2, [sp, #20]
   b8d7e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8d80:	4620      	mov	r0, r4
   b8d82:	f001 f907 	bl	b9f94 <__mdiff>
   b8d86:	4605      	mov	r5, r0
   b8d88:	2800      	cmp	r0, #0
   b8d8a:	f43f ae69 	beq.w	b8a60 <_strtod_l+0x490>
   b8d8e:	68c3      	ldr	r3, [r0, #12]
   b8d90:	930b      	str	r3, [sp, #44]	; 0x2c
   b8d92:	2300      	movs	r3, #0
   b8d94:	60c3      	str	r3, [r0, #12]
   b8d96:	4631      	mov	r1, r6
   b8d98:	f001 f8e0 	bl	b9f5c <__mcmp>
   b8d9c:	2800      	cmp	r0, #0
   b8d9e:	da60      	bge.n	b8e62 <_strtod_l+0x892>
   b8da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8da2:	ea53 030a 	orrs.w	r3, r3, sl
   b8da6:	f040 8082 	bne.w	b8eae <_strtod_l+0x8de>
   b8daa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8dae:	2b00      	cmp	r3, #0
   b8db0:	d17d      	bne.n	b8eae <_strtod_l+0x8de>
   b8db2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b8db6:	0d1b      	lsrs	r3, r3, #20
   b8db8:	051b      	lsls	r3, r3, #20
   b8dba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b8dbe:	d976      	bls.n	b8eae <_strtod_l+0x8de>
   b8dc0:	696b      	ldr	r3, [r5, #20]
   b8dc2:	b913      	cbnz	r3, b8dca <_strtod_l+0x7fa>
   b8dc4:	692b      	ldr	r3, [r5, #16]
   b8dc6:	2b01      	cmp	r3, #1
   b8dc8:	dd71      	ble.n	b8eae <_strtod_l+0x8de>
   b8dca:	4629      	mov	r1, r5
   b8dcc:	2201      	movs	r2, #1
   b8dce:	4620      	mov	r0, r4
   b8dd0:	f001 f854 	bl	b9e7c <__lshift>
   b8dd4:	4631      	mov	r1, r6
   b8dd6:	4605      	mov	r5, r0
   b8dd8:	f001 f8c0 	bl	b9f5c <__mcmp>
   b8ddc:	2800      	cmp	r0, #0
   b8dde:	dd66      	ble.n	b8eae <_strtod_l+0x8de>
   b8de0:	9904      	ldr	r1, [sp, #16]
   b8de2:	4a53      	ldr	r2, [pc, #332]	; (b8f30 <_strtod_l+0x960>)
   b8de4:	465b      	mov	r3, fp
   b8de6:	2900      	cmp	r1, #0
   b8de8:	f000 8081 	beq.w	b8eee <_strtod_l+0x91e>
   b8dec:	ea02 010b 	and.w	r1, r2, fp
   b8df0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b8df4:	dc7b      	bgt.n	b8eee <_strtod_l+0x91e>
   b8df6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b8dfa:	f77f aea9 	ble.w	b8b50 <_strtod_l+0x580>
   b8dfe:	4b4d      	ldr	r3, [pc, #308]	; (b8f34 <_strtod_l+0x964>)
   b8e00:	4650      	mov	r0, sl
   b8e02:	4659      	mov	r1, fp
   b8e04:	2200      	movs	r2, #0
   b8e06:	f7fe ffed 	bl	b7de4 <__aeabi_dmul>
   b8e0a:	460b      	mov	r3, r1
   b8e0c:	4303      	orrs	r3, r0
   b8e0e:	bf08      	it	eq
   b8e10:	2322      	moveq	r3, #34	; 0x22
   b8e12:	4682      	mov	sl, r0
   b8e14:	468b      	mov	fp, r1
   b8e16:	bf08      	it	eq
   b8e18:	6023      	streq	r3, [r4, #0]
   b8e1a:	e62b      	b.n	b8a74 <_strtod_l+0x4a4>
   b8e1c:	f04f 32ff 	mov.w	r2, #4294967295
   b8e20:	fa02 f303 	lsl.w	r3, r2, r3
   b8e24:	ea03 0a0a 	and.w	sl, r3, sl
   b8e28:	e6e3      	b.n	b8bf2 <_strtod_l+0x622>
   b8e2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b8e2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b8e32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b8e36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b8e3a:	fa01 f308 	lsl.w	r3, r1, r8
   b8e3e:	9308      	str	r3, [sp, #32]
   b8e40:	910d      	str	r1, [sp, #52]	; 0x34
   b8e42:	e746      	b.n	b8cd2 <_strtod_l+0x702>
   b8e44:	2300      	movs	r3, #0
   b8e46:	9308      	str	r3, [sp, #32]
   b8e48:	2301      	movs	r3, #1
   b8e4a:	930d      	str	r3, [sp, #52]	; 0x34
   b8e4c:	e741      	b.n	b8cd2 <_strtod_l+0x702>
   b8e4e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8e50:	4642      	mov	r2, r8
   b8e52:	4620      	mov	r0, r4
   b8e54:	f001 f812 	bl	b9e7c <__lshift>
   b8e58:	9018      	str	r0, [sp, #96]	; 0x60
   b8e5a:	2800      	cmp	r0, #0
   b8e5c:	f47f af6b 	bne.w	b8d36 <_strtod_l+0x766>
   b8e60:	e5fe      	b.n	b8a60 <_strtod_l+0x490>
   b8e62:	465f      	mov	r7, fp
   b8e64:	d16e      	bne.n	b8f44 <_strtod_l+0x974>
   b8e66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8e68:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8e6c:	b342      	cbz	r2, b8ec0 <_strtod_l+0x8f0>
   b8e6e:	4a32      	ldr	r2, [pc, #200]	; (b8f38 <_strtod_l+0x968>)
   b8e70:	4293      	cmp	r3, r2
   b8e72:	d128      	bne.n	b8ec6 <_strtod_l+0x8f6>
   b8e74:	9b04      	ldr	r3, [sp, #16]
   b8e76:	4651      	mov	r1, sl
   b8e78:	b1eb      	cbz	r3, b8eb6 <_strtod_l+0x8e6>
   b8e7a:	4b2d      	ldr	r3, [pc, #180]	; (b8f30 <_strtod_l+0x960>)
   b8e7c:	403b      	ands	r3, r7
   b8e7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b8e82:	f04f 32ff 	mov.w	r2, #4294967295
   b8e86:	d819      	bhi.n	b8ebc <_strtod_l+0x8ec>
   b8e88:	0d1b      	lsrs	r3, r3, #20
   b8e8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b8e8e:	fa02 f303 	lsl.w	r3, r2, r3
   b8e92:	4299      	cmp	r1, r3
   b8e94:	d117      	bne.n	b8ec6 <_strtod_l+0x8f6>
   b8e96:	4b29      	ldr	r3, [pc, #164]	; (b8f3c <_strtod_l+0x96c>)
   b8e98:	429f      	cmp	r7, r3
   b8e9a:	d102      	bne.n	b8ea2 <_strtod_l+0x8d2>
   b8e9c:	3101      	adds	r1, #1
   b8e9e:	f43f addf 	beq.w	b8a60 <_strtod_l+0x490>
   b8ea2:	4b23      	ldr	r3, [pc, #140]	; (b8f30 <_strtod_l+0x960>)
   b8ea4:	403b      	ands	r3, r7
   b8ea6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b8eaa:	f04f 0a00 	mov.w	sl, #0
   b8eae:	9b04      	ldr	r3, [sp, #16]
   b8eb0:	2b00      	cmp	r3, #0
   b8eb2:	d1a4      	bne.n	b8dfe <_strtod_l+0x82e>
   b8eb4:	e5de      	b.n	b8a74 <_strtod_l+0x4a4>
   b8eb6:	f04f 33ff 	mov.w	r3, #4294967295
   b8eba:	e7ea      	b.n	b8e92 <_strtod_l+0x8c2>
   b8ebc:	4613      	mov	r3, r2
   b8ebe:	e7e8      	b.n	b8e92 <_strtod_l+0x8c2>
   b8ec0:	ea53 030a 	orrs.w	r3, r3, sl
   b8ec4:	d08c      	beq.n	b8de0 <_strtod_l+0x810>
   b8ec6:	9b08      	ldr	r3, [sp, #32]
   b8ec8:	b1db      	cbz	r3, b8f02 <_strtod_l+0x932>
   b8eca:	423b      	tst	r3, r7
   b8ecc:	d0ef      	beq.n	b8eae <_strtod_l+0x8de>
   b8ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8ed0:	9a04      	ldr	r2, [sp, #16]
   b8ed2:	4650      	mov	r0, sl
   b8ed4:	4659      	mov	r1, fp
   b8ed6:	b1c3      	cbz	r3, b8f0a <_strtod_l+0x93a>
   b8ed8:	f7ff fb5e 	bl	b8598 <sulp>
   b8edc:	4602      	mov	r2, r0
   b8ede:	460b      	mov	r3, r1
   b8ee0:	ec51 0b18 	vmov	r0, r1, d8
   b8ee4:	f7fe fdc8 	bl	b7a78 <__adddf3>
   b8ee8:	4682      	mov	sl, r0
   b8eea:	468b      	mov	fp, r1
   b8eec:	e7df      	b.n	b8eae <_strtod_l+0x8de>
   b8eee:	4013      	ands	r3, r2
   b8ef0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b8ef4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b8ef8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b8efc:	f04f 3aff 	mov.w	sl, #4294967295
   b8f00:	e7d5      	b.n	b8eae <_strtod_l+0x8de>
   b8f02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8f04:	ea13 0f0a 	tst.w	r3, sl
   b8f08:	e7e0      	b.n	b8ecc <_strtod_l+0x8fc>
   b8f0a:	f7ff fb45 	bl	b8598 <sulp>
   b8f0e:	4602      	mov	r2, r0
   b8f10:	460b      	mov	r3, r1
   b8f12:	ec51 0b18 	vmov	r0, r1, d8
   b8f16:	f7fe fdad 	bl	b7a74 <__aeabi_dsub>
   b8f1a:	2200      	movs	r2, #0
   b8f1c:	2300      	movs	r3, #0
   b8f1e:	4682      	mov	sl, r0
   b8f20:	468b      	mov	fp, r1
   b8f22:	f7ff f9c7 	bl	b82b4 <__aeabi_dcmpeq>
   b8f26:	2800      	cmp	r0, #0
   b8f28:	d0c1      	beq.n	b8eae <_strtod_l+0x8de>
   b8f2a:	e611      	b.n	b8b50 <_strtod_l+0x580>
   b8f2c:	fffffc02 	.word	0xfffffc02
   b8f30:	7ff00000 	.word	0x7ff00000
   b8f34:	39500000 	.word	0x39500000
   b8f38:	000fffff 	.word	0x000fffff
   b8f3c:	7fefffff 	.word	0x7fefffff
   b8f40:	000bb368 	.word	0x000bb368
   b8f44:	4631      	mov	r1, r6
   b8f46:	4628      	mov	r0, r5
   b8f48:	f001 f986 	bl	ba258 <__ratio>
   b8f4c:	ec59 8b10 	vmov	r8, r9, d0
   b8f50:	ee10 0a10 	vmov	r0, s0
   b8f54:	2200      	movs	r2, #0
   b8f56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b8f5a:	4649      	mov	r1, r9
   b8f5c:	f7ff f9be 	bl	b82dc <__aeabi_dcmple>
   b8f60:	2800      	cmp	r0, #0
   b8f62:	d07a      	beq.n	b905a <_strtod_l+0xa8a>
   b8f64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8f66:	2b00      	cmp	r3, #0
   b8f68:	d04a      	beq.n	b9000 <_strtod_l+0xa30>
   b8f6a:	4b95      	ldr	r3, [pc, #596]	; (b91c0 <_strtod_l+0xbf0>)
   b8f6c:	2200      	movs	r2, #0
   b8f6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8f72:	f8df 924c 	ldr.w	r9, [pc, #588]	; b91c0 <_strtod_l+0xbf0>
   b8f76:	f04f 0800 	mov.w	r8, #0
   b8f7a:	4b92      	ldr	r3, [pc, #584]	; (b91c4 <_strtod_l+0xbf4>)
   b8f7c:	403b      	ands	r3, r7
   b8f7e:	930d      	str	r3, [sp, #52]	; 0x34
   b8f80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8f82:	4b91      	ldr	r3, [pc, #580]	; (b91c8 <_strtod_l+0xbf8>)
   b8f84:	429a      	cmp	r2, r3
   b8f86:	f040 80b0 	bne.w	b90ea <_strtod_l+0xb1a>
   b8f8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8f8e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b8f92:	ec4b ab10 	vmov	d0, sl, fp
   b8f96:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b8f9a:	f001 f885 	bl	ba0a8 <__ulp>
   b8f9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8fa2:	ec53 2b10 	vmov	r2, r3, d0
   b8fa6:	f7fe ff1d 	bl	b7de4 <__aeabi_dmul>
   b8faa:	4652      	mov	r2, sl
   b8fac:	465b      	mov	r3, fp
   b8fae:	f7fe fd63 	bl	b7a78 <__adddf3>
   b8fb2:	460b      	mov	r3, r1
   b8fb4:	4983      	ldr	r1, [pc, #524]	; (b91c4 <_strtod_l+0xbf4>)
   b8fb6:	4a85      	ldr	r2, [pc, #532]	; (b91cc <_strtod_l+0xbfc>)
   b8fb8:	4019      	ands	r1, r3
   b8fba:	4291      	cmp	r1, r2
   b8fbc:	4682      	mov	sl, r0
   b8fbe:	d960      	bls.n	b9082 <_strtod_l+0xab2>
   b8fc0:	ee18 3a90 	vmov	r3, s17
   b8fc4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b8fc8:	4293      	cmp	r3, r2
   b8fca:	d104      	bne.n	b8fd6 <_strtod_l+0xa06>
   b8fcc:	ee18 3a10 	vmov	r3, s16
   b8fd0:	3301      	adds	r3, #1
   b8fd2:	f43f ad45 	beq.w	b8a60 <_strtod_l+0x490>
   b8fd6:	f8df b200 	ldr.w	fp, [pc, #512]	; b91d8 <_strtod_l+0xc08>
   b8fda:	f04f 3aff 	mov.w	sl, #4294967295
   b8fde:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8fe0:	4620      	mov	r0, r4
   b8fe2:	f000 fd2f 	bl	b9a44 <_Bfree>
   b8fe6:	9905      	ldr	r1, [sp, #20]
   b8fe8:	4620      	mov	r0, r4
   b8fea:	f000 fd2b 	bl	b9a44 <_Bfree>
   b8fee:	4631      	mov	r1, r6
   b8ff0:	4620      	mov	r0, r4
   b8ff2:	f000 fd27 	bl	b9a44 <_Bfree>
   b8ff6:	4629      	mov	r1, r5
   b8ff8:	4620      	mov	r0, r4
   b8ffa:	f000 fd23 	bl	b9a44 <_Bfree>
   b8ffe:	e61a      	b.n	b8c36 <_strtod_l+0x666>
   b9000:	f1ba 0f00 	cmp.w	sl, #0
   b9004:	d11b      	bne.n	b903e <_strtod_l+0xa6e>
   b9006:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b900a:	b9f3      	cbnz	r3, b904a <_strtod_l+0xa7a>
   b900c:	4b6c      	ldr	r3, [pc, #432]	; (b91c0 <_strtod_l+0xbf0>)
   b900e:	2200      	movs	r2, #0
   b9010:	4640      	mov	r0, r8
   b9012:	4649      	mov	r1, r9
   b9014:	f7ff f958 	bl	b82c8 <__aeabi_dcmplt>
   b9018:	b9d0      	cbnz	r0, b9050 <_strtod_l+0xa80>
   b901a:	4640      	mov	r0, r8
   b901c:	4649      	mov	r1, r9
   b901e:	4b6c      	ldr	r3, [pc, #432]	; (b91d0 <_strtod_l+0xc00>)
   b9020:	2200      	movs	r2, #0
   b9022:	f7fe fedf 	bl	b7de4 <__aeabi_dmul>
   b9026:	4680      	mov	r8, r0
   b9028:	4689      	mov	r9, r1
   b902a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b902e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b9032:	9315      	str	r3, [sp, #84]	; 0x54
   b9034:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b9038:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b903c:	e79d      	b.n	b8f7a <_strtod_l+0x9aa>
   b903e:	f1ba 0f01 	cmp.w	sl, #1
   b9042:	d102      	bne.n	b904a <_strtod_l+0xa7a>
   b9044:	2f00      	cmp	r7, #0
   b9046:	f43f ad83 	beq.w	b8b50 <_strtod_l+0x580>
   b904a:	4b62      	ldr	r3, [pc, #392]	; (b91d4 <_strtod_l+0xc04>)
   b904c:	2200      	movs	r2, #0
   b904e:	e78e      	b.n	b8f6e <_strtod_l+0x99e>
   b9050:	f8df 917c 	ldr.w	r9, [pc, #380]	; b91d0 <_strtod_l+0xc00>
   b9054:	f04f 0800 	mov.w	r8, #0
   b9058:	e7e7      	b.n	b902a <_strtod_l+0xa5a>
   b905a:	4b5d      	ldr	r3, [pc, #372]	; (b91d0 <_strtod_l+0xc00>)
   b905c:	4640      	mov	r0, r8
   b905e:	4649      	mov	r1, r9
   b9060:	2200      	movs	r2, #0
   b9062:	f7fe febf 	bl	b7de4 <__aeabi_dmul>
   b9066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9068:	4680      	mov	r8, r0
   b906a:	4689      	mov	r9, r1
   b906c:	b933      	cbnz	r3, b907c <_strtod_l+0xaac>
   b906e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9072:	900e      	str	r0, [sp, #56]	; 0x38
   b9074:	930f      	str	r3, [sp, #60]	; 0x3c
   b9076:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b907a:	e7dd      	b.n	b9038 <_strtod_l+0xa68>
   b907c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b9080:	e7f9      	b.n	b9076 <_strtod_l+0xaa6>
   b9082:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b9086:	9b04      	ldr	r3, [sp, #16]
   b9088:	2b00      	cmp	r3, #0
   b908a:	d1a8      	bne.n	b8fde <_strtod_l+0xa0e>
   b908c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9090:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9092:	0d1b      	lsrs	r3, r3, #20
   b9094:	051b      	lsls	r3, r3, #20
   b9096:	429a      	cmp	r2, r3
   b9098:	d1a1      	bne.n	b8fde <_strtod_l+0xa0e>
   b909a:	4640      	mov	r0, r8
   b909c:	4649      	mov	r1, r9
   b909e:	f001 f979 	bl	ba394 <__aeabi_d2lz>
   b90a2:	f7fe fe71 	bl	b7d88 <__aeabi_l2d>
   b90a6:	4602      	mov	r2, r0
   b90a8:	460b      	mov	r3, r1
   b90aa:	4640      	mov	r0, r8
   b90ac:	4649      	mov	r1, r9
   b90ae:	f7fe fce1 	bl	b7a74 <__aeabi_dsub>
   b90b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b90b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b90b8:	ea43 030a 	orr.w	r3, r3, sl
   b90bc:	4313      	orrs	r3, r2
   b90be:	4680      	mov	r8, r0
   b90c0:	4689      	mov	r9, r1
   b90c2:	d055      	beq.n	b9170 <_strtod_l+0xba0>
   b90c4:	a336      	add	r3, pc, #216	; (adr r3, b91a0 <_strtod_l+0xbd0>)
   b90c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b90ca:	f7ff f8fd 	bl	b82c8 <__aeabi_dcmplt>
   b90ce:	2800      	cmp	r0, #0
   b90d0:	f47f acd0 	bne.w	b8a74 <_strtod_l+0x4a4>
   b90d4:	a334      	add	r3, pc, #208	; (adr r3, b91a8 <_strtod_l+0xbd8>)
   b90d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b90da:	4640      	mov	r0, r8
   b90dc:	4649      	mov	r1, r9
   b90de:	f7ff f911 	bl	b8304 <__aeabi_dcmpgt>
   b90e2:	2800      	cmp	r0, #0
   b90e4:	f43f af7b 	beq.w	b8fde <_strtod_l+0xa0e>
   b90e8:	e4c4      	b.n	b8a74 <_strtod_l+0x4a4>
   b90ea:	9b04      	ldr	r3, [sp, #16]
   b90ec:	b333      	cbz	r3, b913c <_strtod_l+0xb6c>
   b90ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b90f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b90f4:	d822      	bhi.n	b913c <_strtod_l+0xb6c>
   b90f6:	a32e      	add	r3, pc, #184	; (adr r3, b91b0 <_strtod_l+0xbe0>)
   b90f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b90fc:	4640      	mov	r0, r8
   b90fe:	4649      	mov	r1, r9
   b9100:	f7ff f8ec 	bl	b82dc <__aeabi_dcmple>
   b9104:	b1a0      	cbz	r0, b9130 <_strtod_l+0xb60>
   b9106:	4649      	mov	r1, r9
   b9108:	4640      	mov	r0, r8
   b910a:	f7ff f943 	bl	b8394 <__aeabi_d2uiz>
   b910e:	2801      	cmp	r0, #1
   b9110:	bf38      	it	cc
   b9112:	2001      	movcc	r0, #1
   b9114:	f7fe fdec 	bl	b7cf0 <__aeabi_ui2d>
   b9118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b911a:	4680      	mov	r8, r0
   b911c:	4689      	mov	r9, r1
   b911e:	bb23      	cbnz	r3, b916a <_strtod_l+0xb9a>
   b9120:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9124:	9010      	str	r0, [sp, #64]	; 0x40
   b9126:	9311      	str	r3, [sp, #68]	; 0x44
   b9128:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b912c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9130:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b9132:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9134:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b9138:	1a9b      	subs	r3, r3, r2
   b913a:	9309      	str	r3, [sp, #36]	; 0x24
   b913c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9140:	eeb0 0a48 	vmov.f32	s0, s16
   b9144:	eef0 0a68 	vmov.f32	s1, s17
   b9148:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b914c:	f000 ffac 	bl	ba0a8 <__ulp>
   b9150:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9154:	ec53 2b10 	vmov	r2, r3, d0
   b9158:	f7fe fe44 	bl	b7de4 <__aeabi_dmul>
   b915c:	ec53 2b18 	vmov	r2, r3, d8
   b9160:	f7fe fc8a 	bl	b7a78 <__adddf3>
   b9164:	4682      	mov	sl, r0
   b9166:	468b      	mov	fp, r1
   b9168:	e78d      	b.n	b9086 <_strtod_l+0xab6>
   b916a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b916e:	e7db      	b.n	b9128 <_strtod_l+0xb58>
   b9170:	a311      	add	r3, pc, #68	; (adr r3, b91b8 <_strtod_l+0xbe8>)
   b9172:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9176:	f7ff f8a7 	bl	b82c8 <__aeabi_dcmplt>
   b917a:	e7b2      	b.n	b90e2 <_strtod_l+0xb12>
   b917c:	2300      	movs	r3, #0
   b917e:	930a      	str	r3, [sp, #40]	; 0x28
   b9180:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b9182:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9184:	6013      	str	r3, [r2, #0]
   b9186:	f7ff ba6b 	b.w	b8660 <_strtod_l+0x90>
   b918a:	2a65      	cmp	r2, #101	; 0x65
   b918c:	f43f ab5f 	beq.w	b884e <_strtod_l+0x27e>
   b9190:	2a45      	cmp	r2, #69	; 0x45
   b9192:	f43f ab5c 	beq.w	b884e <_strtod_l+0x27e>
   b9196:	2301      	movs	r3, #1
   b9198:	f7ff bb94 	b.w	b88c4 <_strtod_l+0x2f4>
   b919c:	f3af 8000 	nop.w
   b91a0:	94a03595 	.word	0x94a03595
   b91a4:	3fdfffff 	.word	0x3fdfffff
   b91a8:	35afe535 	.word	0x35afe535
   b91ac:	3fe00000 	.word	0x3fe00000
   b91b0:	ffc00000 	.word	0xffc00000
   b91b4:	41dfffff 	.word	0x41dfffff
   b91b8:	94a03595 	.word	0x94a03595
   b91bc:	3fcfffff 	.word	0x3fcfffff
   b91c0:	3ff00000 	.word	0x3ff00000
   b91c4:	7ff00000 	.word	0x7ff00000
   b91c8:	7fe00000 	.word	0x7fe00000
   b91cc:	7c9fffff 	.word	0x7c9fffff
   b91d0:	3fe00000 	.word	0x3fe00000
   b91d4:	bff00000 	.word	0xbff00000
   b91d8:	7fefffff 	.word	0x7fefffff

000b91dc <strtod>:
   b91dc:	460a      	mov	r2, r1
   b91de:	4601      	mov	r1, r0
   b91e0:	4802      	ldr	r0, [pc, #8]	; (b91ec <strtod+0x10>)
   b91e2:	4b03      	ldr	r3, [pc, #12]	; (b91f0 <strtod+0x14>)
   b91e4:	6800      	ldr	r0, [r0, #0]
   b91e6:	f7ff b9f3 	b.w	b85d0 <_strtod_l>
   b91ea:	bf00      	nop
   b91ec:	2003e404 	.word	0x2003e404
   b91f0:	2003e470 	.word	0x2003e470

000b91f4 <__register_exitproc>:
   b91f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b91f8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b92b4 <__register_exitproc+0xc0>
   b91fc:	4606      	mov	r6, r0
   b91fe:	f8d8 0000 	ldr.w	r0, [r8]
   b9202:	461f      	mov	r7, r3
   b9204:	460d      	mov	r5, r1
   b9206:	4691      	mov	r9, r2
   b9208:	f000 fbc6 	bl	b9998 <__retarget_lock_acquire_recursive>
   b920c:	4b25      	ldr	r3, [pc, #148]	; (b92a4 <__register_exitproc+0xb0>)
   b920e:	681c      	ldr	r4, [r3, #0]
   b9210:	b934      	cbnz	r4, b9220 <__register_exitproc+0x2c>
   b9212:	4c25      	ldr	r4, [pc, #148]	; (b92a8 <__register_exitproc+0xb4>)
   b9214:	601c      	str	r4, [r3, #0]
   b9216:	4b25      	ldr	r3, [pc, #148]	; (b92ac <__register_exitproc+0xb8>)
   b9218:	b113      	cbz	r3, b9220 <__register_exitproc+0x2c>
   b921a:	681b      	ldr	r3, [r3, #0]
   b921c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9220:	6863      	ldr	r3, [r4, #4]
   b9222:	2b1f      	cmp	r3, #31
   b9224:	dd07      	ble.n	b9236 <__register_exitproc+0x42>
   b9226:	f8d8 0000 	ldr.w	r0, [r8]
   b922a:	f000 fbb7 	bl	b999c <__retarget_lock_release_recursive>
   b922e:	f04f 30ff 	mov.w	r0, #4294967295
   b9232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9236:	b34e      	cbz	r6, b928c <__register_exitproc+0x98>
   b9238:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b923c:	b988      	cbnz	r0, b9262 <__register_exitproc+0x6e>
   b923e:	4b1c      	ldr	r3, [pc, #112]	; (b92b0 <__register_exitproc+0xbc>)
   b9240:	b923      	cbnz	r3, b924c <__register_exitproc+0x58>
   b9242:	f8d8 0000 	ldr.w	r0, [r8]
   b9246:	f000 fba8 	bl	b999a <__retarget_lock_release>
   b924a:	e7f0      	b.n	b922e <__register_exitproc+0x3a>
   b924c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9250:	f7fd f860 	bl	b6314 <malloc>
   b9254:	2800      	cmp	r0, #0
   b9256:	d0f4      	beq.n	b9242 <__register_exitproc+0x4e>
   b9258:	2300      	movs	r3, #0
   b925a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b925e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9262:	6863      	ldr	r3, [r4, #4]
   b9264:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9268:	2201      	movs	r2, #1
   b926a:	409a      	lsls	r2, r3
   b926c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9270:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9274:	4313      	orrs	r3, r2
   b9276:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b927a:	2e02      	cmp	r6, #2
   b927c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9280:	bf02      	ittt	eq
   b9282:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9286:	4313      	orreq	r3, r2
   b9288:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b928c:	6863      	ldr	r3, [r4, #4]
   b928e:	f8d8 0000 	ldr.w	r0, [r8]
   b9292:	1c5a      	adds	r2, r3, #1
   b9294:	3302      	adds	r3, #2
   b9296:	6062      	str	r2, [r4, #4]
   b9298:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b929c:	f000 fb7e 	bl	b999c <__retarget_lock_release_recursive>
   b92a0:	2000      	movs	r0, #0
   b92a2:	e7c6      	b.n	b9232 <__register_exitproc+0x3e>
   b92a4:	2003e7e8 	.word	0x2003e7e8
   b92a8:	2003e75c 	.word	0x2003e75c
   b92ac:	00000000 	.word	0x00000000
   b92b0:	000b6315 	.word	0x000b6315
   b92b4:	2003e468 	.word	0x2003e468

000b92b8 <rshift>:
   b92b8:	6903      	ldr	r3, [r0, #16]
   b92ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b92be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b92c2:	ea4f 1261 	mov.w	r2, r1, asr #5
   b92c6:	f100 0414 	add.w	r4, r0, #20
   b92ca:	dd45      	ble.n	b9358 <rshift+0xa0>
   b92cc:	f011 011f 	ands.w	r1, r1, #31
   b92d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b92d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b92d8:	d10c      	bne.n	b92f4 <rshift+0x3c>
   b92da:	f100 0710 	add.w	r7, r0, #16
   b92de:	4629      	mov	r1, r5
   b92e0:	42b1      	cmp	r1, r6
   b92e2:	d334      	bcc.n	b934e <rshift+0x96>
   b92e4:	1a9b      	subs	r3, r3, r2
   b92e6:	009b      	lsls	r3, r3, #2
   b92e8:	1eea      	subs	r2, r5, #3
   b92ea:	4296      	cmp	r6, r2
   b92ec:	bf38      	it	cc
   b92ee:	2300      	movcc	r3, #0
   b92f0:	4423      	add	r3, r4
   b92f2:	e015      	b.n	b9320 <rshift+0x68>
   b92f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b92f8:	f1c1 0820 	rsb	r8, r1, #32
   b92fc:	40cf      	lsrs	r7, r1
   b92fe:	f105 0e04 	add.w	lr, r5, #4
   b9302:	46a1      	mov	r9, r4
   b9304:	4576      	cmp	r6, lr
   b9306:	46f4      	mov	ip, lr
   b9308:	d815      	bhi.n	b9336 <rshift+0x7e>
   b930a:	1a9a      	subs	r2, r3, r2
   b930c:	0092      	lsls	r2, r2, #2
   b930e:	3a04      	subs	r2, #4
   b9310:	3501      	adds	r5, #1
   b9312:	42ae      	cmp	r6, r5
   b9314:	bf38      	it	cc
   b9316:	2200      	movcc	r2, #0
   b9318:	18a3      	adds	r3, r4, r2
   b931a:	50a7      	str	r7, [r4, r2]
   b931c:	b107      	cbz	r7, b9320 <rshift+0x68>
   b931e:	3304      	adds	r3, #4
   b9320:	1b1a      	subs	r2, r3, r4
   b9322:	42a3      	cmp	r3, r4
   b9324:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b9328:	bf08      	it	eq
   b932a:	2300      	moveq	r3, #0
   b932c:	6102      	str	r2, [r0, #16]
   b932e:	bf08      	it	eq
   b9330:	6143      	streq	r3, [r0, #20]
   b9332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b9336:	f8dc c000 	ldr.w	ip, [ip]
   b933a:	fa0c fc08 	lsl.w	ip, ip, r8
   b933e:	ea4c 0707 	orr.w	r7, ip, r7
   b9342:	f849 7b04 	str.w	r7, [r9], #4
   b9346:	f85e 7b04 	ldr.w	r7, [lr], #4
   b934a:	40cf      	lsrs	r7, r1
   b934c:	e7da      	b.n	b9304 <rshift+0x4c>
   b934e:	f851 cb04 	ldr.w	ip, [r1], #4
   b9352:	f847 cf04 	str.w	ip, [r7, #4]!
   b9356:	e7c3      	b.n	b92e0 <rshift+0x28>
   b9358:	4623      	mov	r3, r4
   b935a:	e7e1      	b.n	b9320 <rshift+0x68>

000b935c <__hexdig_fun>:
   b935c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9360:	2b09      	cmp	r3, #9
   b9362:	d802      	bhi.n	b936a <__hexdig_fun+0xe>
   b9364:	3820      	subs	r0, #32
   b9366:	b2c0      	uxtb	r0, r0
   b9368:	4770      	bx	lr
   b936a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b936e:	2b05      	cmp	r3, #5
   b9370:	d801      	bhi.n	b9376 <__hexdig_fun+0x1a>
   b9372:	3847      	subs	r0, #71	; 0x47
   b9374:	e7f7      	b.n	b9366 <__hexdig_fun+0xa>
   b9376:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b937a:	2b05      	cmp	r3, #5
   b937c:	d801      	bhi.n	b9382 <__hexdig_fun+0x26>
   b937e:	3827      	subs	r0, #39	; 0x27
   b9380:	e7f1      	b.n	b9366 <__hexdig_fun+0xa>
   b9382:	2000      	movs	r0, #0
   b9384:	4770      	bx	lr
	...

000b9388 <__gethex>:
   b9388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b938c:	ed2d 8b02 	vpush	{d8}
   b9390:	b089      	sub	sp, #36	; 0x24
   b9392:	ee08 0a10 	vmov	s16, r0
   b9396:	9304      	str	r3, [sp, #16]
   b9398:	4bb4      	ldr	r3, [pc, #720]	; (b966c <__gethex+0x2e4>)
   b939a:	681b      	ldr	r3, [r3, #0]
   b939c:	9301      	str	r3, [sp, #4]
   b939e:	4618      	mov	r0, r3
   b93a0:	468b      	mov	fp, r1
   b93a2:	4690      	mov	r8, r2
   b93a4:	f7ff f8dc 	bl	b8560 <strlen>
   b93a8:	9b01      	ldr	r3, [sp, #4]
   b93aa:	f8db 2000 	ldr.w	r2, [fp]
   b93ae:	4403      	add	r3, r0
   b93b0:	4682      	mov	sl, r0
   b93b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b93b6:	9305      	str	r3, [sp, #20]
   b93b8:	1c93      	adds	r3, r2, #2
   b93ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b93be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b93c2:	32fe      	adds	r2, #254	; 0xfe
   b93c4:	18d1      	adds	r1, r2, r3
   b93c6:	461f      	mov	r7, r3
   b93c8:	f813 0b01 	ldrb.w	r0, [r3], #1
   b93cc:	9100      	str	r1, [sp, #0]
   b93ce:	2830      	cmp	r0, #48	; 0x30
   b93d0:	d0f8      	beq.n	b93c4 <__gethex+0x3c>
   b93d2:	f7ff ffc3 	bl	b935c <__hexdig_fun>
   b93d6:	4604      	mov	r4, r0
   b93d8:	2800      	cmp	r0, #0
   b93da:	d13a      	bne.n	b9452 <__gethex+0xca>
   b93dc:	9901      	ldr	r1, [sp, #4]
   b93de:	4652      	mov	r2, sl
   b93e0:	4638      	mov	r0, r7
   b93e2:	f7ff f8c5 	bl	b8570 <strncmp>
   b93e6:	4605      	mov	r5, r0
   b93e8:	2800      	cmp	r0, #0
   b93ea:	d168      	bne.n	b94be <__gethex+0x136>
   b93ec:	f817 000a 	ldrb.w	r0, [r7, sl]
   b93f0:	eb07 060a 	add.w	r6, r7, sl
   b93f4:	f7ff ffb2 	bl	b935c <__hexdig_fun>
   b93f8:	2800      	cmp	r0, #0
   b93fa:	d062      	beq.n	b94c2 <__gethex+0x13a>
   b93fc:	4633      	mov	r3, r6
   b93fe:	7818      	ldrb	r0, [r3, #0]
   b9400:	2830      	cmp	r0, #48	; 0x30
   b9402:	461f      	mov	r7, r3
   b9404:	f103 0301 	add.w	r3, r3, #1
   b9408:	d0f9      	beq.n	b93fe <__gethex+0x76>
   b940a:	f7ff ffa7 	bl	b935c <__hexdig_fun>
   b940e:	2301      	movs	r3, #1
   b9410:	fab0 f480 	clz	r4, r0
   b9414:	0964      	lsrs	r4, r4, #5
   b9416:	4635      	mov	r5, r6
   b9418:	9300      	str	r3, [sp, #0]
   b941a:	463a      	mov	r2, r7
   b941c:	4616      	mov	r6, r2
   b941e:	3201      	adds	r2, #1
   b9420:	7830      	ldrb	r0, [r6, #0]
   b9422:	f7ff ff9b 	bl	b935c <__hexdig_fun>
   b9426:	2800      	cmp	r0, #0
   b9428:	d1f8      	bne.n	b941c <__gethex+0x94>
   b942a:	9901      	ldr	r1, [sp, #4]
   b942c:	4652      	mov	r2, sl
   b942e:	4630      	mov	r0, r6
   b9430:	f7ff f89e 	bl	b8570 <strncmp>
   b9434:	b980      	cbnz	r0, b9458 <__gethex+0xd0>
   b9436:	b94d      	cbnz	r5, b944c <__gethex+0xc4>
   b9438:	eb06 050a 	add.w	r5, r6, sl
   b943c:	462a      	mov	r2, r5
   b943e:	4616      	mov	r6, r2
   b9440:	3201      	adds	r2, #1
   b9442:	7830      	ldrb	r0, [r6, #0]
   b9444:	f7ff ff8a 	bl	b935c <__hexdig_fun>
   b9448:	2800      	cmp	r0, #0
   b944a:	d1f8      	bne.n	b943e <__gethex+0xb6>
   b944c:	1bad      	subs	r5, r5, r6
   b944e:	00ad      	lsls	r5, r5, #2
   b9450:	e004      	b.n	b945c <__gethex+0xd4>
   b9452:	2400      	movs	r4, #0
   b9454:	4625      	mov	r5, r4
   b9456:	e7e0      	b.n	b941a <__gethex+0x92>
   b9458:	2d00      	cmp	r5, #0
   b945a:	d1f7      	bne.n	b944c <__gethex+0xc4>
   b945c:	7833      	ldrb	r3, [r6, #0]
   b945e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b9462:	2b50      	cmp	r3, #80	; 0x50
   b9464:	d13b      	bne.n	b94de <__gethex+0x156>
   b9466:	7873      	ldrb	r3, [r6, #1]
   b9468:	2b2b      	cmp	r3, #43	; 0x2b
   b946a:	d02c      	beq.n	b94c6 <__gethex+0x13e>
   b946c:	2b2d      	cmp	r3, #45	; 0x2d
   b946e:	d02e      	beq.n	b94ce <__gethex+0x146>
   b9470:	1c71      	adds	r1, r6, #1
   b9472:	f04f 0900 	mov.w	r9, #0
   b9476:	7808      	ldrb	r0, [r1, #0]
   b9478:	f7ff ff70 	bl	b935c <__hexdig_fun>
   b947c:	1e43      	subs	r3, r0, #1
   b947e:	b2db      	uxtb	r3, r3
   b9480:	2b18      	cmp	r3, #24
   b9482:	d82c      	bhi.n	b94de <__gethex+0x156>
   b9484:	f1a0 0210 	sub.w	r2, r0, #16
   b9488:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b948c:	f7ff ff66 	bl	b935c <__hexdig_fun>
   b9490:	1e43      	subs	r3, r0, #1
   b9492:	b2db      	uxtb	r3, r3
   b9494:	2b18      	cmp	r3, #24
   b9496:	d91d      	bls.n	b94d4 <__gethex+0x14c>
   b9498:	f1b9 0f00 	cmp.w	r9, #0
   b949c:	d000      	beq.n	b94a0 <__gethex+0x118>
   b949e:	4252      	negs	r2, r2
   b94a0:	4415      	add	r5, r2
   b94a2:	f8cb 1000 	str.w	r1, [fp]
   b94a6:	b1e4      	cbz	r4, b94e2 <__gethex+0x15a>
   b94a8:	9b00      	ldr	r3, [sp, #0]
   b94aa:	2b00      	cmp	r3, #0
   b94ac:	bf14      	ite	ne
   b94ae:	2700      	movne	r7, #0
   b94b0:	2706      	moveq	r7, #6
   b94b2:	4638      	mov	r0, r7
   b94b4:	b009      	add	sp, #36	; 0x24
   b94b6:	ecbd 8b02 	vpop	{d8}
   b94ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b94be:	463e      	mov	r6, r7
   b94c0:	4625      	mov	r5, r4
   b94c2:	2401      	movs	r4, #1
   b94c4:	e7ca      	b.n	b945c <__gethex+0xd4>
   b94c6:	f04f 0900 	mov.w	r9, #0
   b94ca:	1cb1      	adds	r1, r6, #2
   b94cc:	e7d3      	b.n	b9476 <__gethex+0xee>
   b94ce:	f04f 0901 	mov.w	r9, #1
   b94d2:	e7fa      	b.n	b94ca <__gethex+0x142>
   b94d4:	230a      	movs	r3, #10
   b94d6:	fb03 0202 	mla	r2, r3, r2, r0
   b94da:	3a10      	subs	r2, #16
   b94dc:	e7d4      	b.n	b9488 <__gethex+0x100>
   b94de:	4631      	mov	r1, r6
   b94e0:	e7df      	b.n	b94a2 <__gethex+0x11a>
   b94e2:	1bf3      	subs	r3, r6, r7
   b94e4:	3b01      	subs	r3, #1
   b94e6:	4621      	mov	r1, r4
   b94e8:	2b07      	cmp	r3, #7
   b94ea:	dc0b      	bgt.n	b9504 <__gethex+0x17c>
   b94ec:	ee18 0a10 	vmov	r0, s16
   b94f0:	f000 fa68 	bl	b99c4 <_Balloc>
   b94f4:	4604      	mov	r4, r0
   b94f6:	b940      	cbnz	r0, b950a <__gethex+0x182>
   b94f8:	4b5d      	ldr	r3, [pc, #372]	; (b9670 <__gethex+0x2e8>)
   b94fa:	4602      	mov	r2, r0
   b94fc:	21de      	movs	r1, #222	; 0xde
   b94fe:	485d      	ldr	r0, [pc, #372]	; (b9674 <__gethex+0x2ec>)
   b9500:	f7fc ff38 	bl	b6374 <__assert_func>
   b9504:	3101      	adds	r1, #1
   b9506:	105b      	asrs	r3, r3, #1
   b9508:	e7ee      	b.n	b94e8 <__gethex+0x160>
   b950a:	f100 0914 	add.w	r9, r0, #20
   b950e:	f04f 0b00 	mov.w	fp, #0
   b9512:	f1ca 0301 	rsb	r3, sl, #1
   b9516:	f8cd 9008 	str.w	r9, [sp, #8]
   b951a:	f8cd b000 	str.w	fp, [sp]
   b951e:	9306      	str	r3, [sp, #24]
   b9520:	42b7      	cmp	r7, r6
   b9522:	d340      	bcc.n	b95a6 <__gethex+0x21e>
   b9524:	9802      	ldr	r0, [sp, #8]
   b9526:	9b00      	ldr	r3, [sp, #0]
   b9528:	f840 3b04 	str.w	r3, [r0], #4
   b952c:	eba0 0009 	sub.w	r0, r0, r9
   b9530:	1080      	asrs	r0, r0, #2
   b9532:	0146      	lsls	r6, r0, #5
   b9534:	6120      	str	r0, [r4, #16]
   b9536:	4618      	mov	r0, r3
   b9538:	f000 fb36 	bl	b9ba8 <__hi0bits>
   b953c:	1a30      	subs	r0, r6, r0
   b953e:	f8d8 6000 	ldr.w	r6, [r8]
   b9542:	42b0      	cmp	r0, r6
   b9544:	dd63      	ble.n	b960e <__gethex+0x286>
   b9546:	1b87      	subs	r7, r0, r6
   b9548:	4639      	mov	r1, r7
   b954a:	4620      	mov	r0, r4
   b954c:	f000 feda 	bl	ba304 <__any_on>
   b9550:	4682      	mov	sl, r0
   b9552:	b1a8      	cbz	r0, b9580 <__gethex+0x1f8>
   b9554:	1e7b      	subs	r3, r7, #1
   b9556:	1159      	asrs	r1, r3, #5
   b9558:	f003 021f 	and.w	r2, r3, #31
   b955c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b9560:	f04f 0a01 	mov.w	sl, #1
   b9564:	fa0a f202 	lsl.w	r2, sl, r2
   b9568:	420a      	tst	r2, r1
   b956a:	d009      	beq.n	b9580 <__gethex+0x1f8>
   b956c:	4553      	cmp	r3, sl
   b956e:	dd05      	ble.n	b957c <__gethex+0x1f4>
   b9570:	1eb9      	subs	r1, r7, #2
   b9572:	4620      	mov	r0, r4
   b9574:	f000 fec6 	bl	ba304 <__any_on>
   b9578:	2800      	cmp	r0, #0
   b957a:	d145      	bne.n	b9608 <__gethex+0x280>
   b957c:	f04f 0a02 	mov.w	sl, #2
   b9580:	4639      	mov	r1, r7
   b9582:	4620      	mov	r0, r4
   b9584:	f7ff fe98 	bl	b92b8 <rshift>
   b9588:	443d      	add	r5, r7
   b958a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b958e:	42ab      	cmp	r3, r5
   b9590:	da4c      	bge.n	b962c <__gethex+0x2a4>
   b9592:	ee18 0a10 	vmov	r0, s16
   b9596:	4621      	mov	r1, r4
   b9598:	f000 fa54 	bl	b9a44 <_Bfree>
   b959c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b959e:	2300      	movs	r3, #0
   b95a0:	6013      	str	r3, [r2, #0]
   b95a2:	27a3      	movs	r7, #163	; 0xa3
   b95a4:	e785      	b.n	b94b2 <__gethex+0x12a>
   b95a6:	1e73      	subs	r3, r6, #1
   b95a8:	9a05      	ldr	r2, [sp, #20]
   b95aa:	9303      	str	r3, [sp, #12]
   b95ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b95b0:	4293      	cmp	r3, r2
   b95b2:	d019      	beq.n	b95e8 <__gethex+0x260>
   b95b4:	f1bb 0f20 	cmp.w	fp, #32
   b95b8:	d107      	bne.n	b95ca <__gethex+0x242>
   b95ba:	9b02      	ldr	r3, [sp, #8]
   b95bc:	9a00      	ldr	r2, [sp, #0]
   b95be:	f843 2b04 	str.w	r2, [r3], #4
   b95c2:	9302      	str	r3, [sp, #8]
   b95c4:	2300      	movs	r3, #0
   b95c6:	9300      	str	r3, [sp, #0]
   b95c8:	469b      	mov	fp, r3
   b95ca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b95ce:	f7ff fec5 	bl	b935c <__hexdig_fun>
   b95d2:	9b00      	ldr	r3, [sp, #0]
   b95d4:	f000 000f 	and.w	r0, r0, #15
   b95d8:	fa00 f00b 	lsl.w	r0, r0, fp
   b95dc:	4303      	orrs	r3, r0
   b95de:	9300      	str	r3, [sp, #0]
   b95e0:	f10b 0b04 	add.w	fp, fp, #4
   b95e4:	9b03      	ldr	r3, [sp, #12]
   b95e6:	e00d      	b.n	b9604 <__gethex+0x27c>
   b95e8:	9b03      	ldr	r3, [sp, #12]
   b95ea:	9a06      	ldr	r2, [sp, #24]
   b95ec:	4413      	add	r3, r2
   b95ee:	42bb      	cmp	r3, r7
   b95f0:	d3e0      	bcc.n	b95b4 <__gethex+0x22c>
   b95f2:	4618      	mov	r0, r3
   b95f4:	9901      	ldr	r1, [sp, #4]
   b95f6:	9307      	str	r3, [sp, #28]
   b95f8:	4652      	mov	r2, sl
   b95fa:	f7fe ffb9 	bl	b8570 <strncmp>
   b95fe:	9b07      	ldr	r3, [sp, #28]
   b9600:	2800      	cmp	r0, #0
   b9602:	d1d7      	bne.n	b95b4 <__gethex+0x22c>
   b9604:	461e      	mov	r6, r3
   b9606:	e78b      	b.n	b9520 <__gethex+0x198>
   b9608:	f04f 0a03 	mov.w	sl, #3
   b960c:	e7b8      	b.n	b9580 <__gethex+0x1f8>
   b960e:	da0a      	bge.n	b9626 <__gethex+0x29e>
   b9610:	1a37      	subs	r7, r6, r0
   b9612:	4621      	mov	r1, r4
   b9614:	ee18 0a10 	vmov	r0, s16
   b9618:	463a      	mov	r2, r7
   b961a:	f000 fc2f 	bl	b9e7c <__lshift>
   b961e:	1bed      	subs	r5, r5, r7
   b9620:	4604      	mov	r4, r0
   b9622:	f100 0914 	add.w	r9, r0, #20
   b9626:	f04f 0a00 	mov.w	sl, #0
   b962a:	e7ae      	b.n	b958a <__gethex+0x202>
   b962c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b9630:	42a8      	cmp	r0, r5
   b9632:	dd72      	ble.n	b971a <__gethex+0x392>
   b9634:	1b45      	subs	r5, r0, r5
   b9636:	42ae      	cmp	r6, r5
   b9638:	dc36      	bgt.n	b96a8 <__gethex+0x320>
   b963a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b963e:	2b02      	cmp	r3, #2
   b9640:	d02a      	beq.n	b9698 <__gethex+0x310>
   b9642:	2b03      	cmp	r3, #3
   b9644:	d02c      	beq.n	b96a0 <__gethex+0x318>
   b9646:	2b01      	cmp	r3, #1
   b9648:	d11c      	bne.n	b9684 <__gethex+0x2fc>
   b964a:	42ae      	cmp	r6, r5
   b964c:	d11a      	bne.n	b9684 <__gethex+0x2fc>
   b964e:	2e01      	cmp	r6, #1
   b9650:	d112      	bne.n	b9678 <__gethex+0x2f0>
   b9652:	9a04      	ldr	r2, [sp, #16]
   b9654:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b9658:	6013      	str	r3, [r2, #0]
   b965a:	2301      	movs	r3, #1
   b965c:	6123      	str	r3, [r4, #16]
   b965e:	f8c9 3000 	str.w	r3, [r9]
   b9662:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9664:	2762      	movs	r7, #98	; 0x62
   b9666:	601c      	str	r4, [r3, #0]
   b9668:	e723      	b.n	b94b2 <__gethex+0x12a>
   b966a:	bf00      	nop
   b966c:	000bb528 	.word	0x000bb528
   b9670:	000bb491 	.word	0x000bb491
   b9674:	000bb4a2 	.word	0x000bb4a2
   b9678:	1e71      	subs	r1, r6, #1
   b967a:	4620      	mov	r0, r4
   b967c:	f000 fe42 	bl	ba304 <__any_on>
   b9680:	2800      	cmp	r0, #0
   b9682:	d1e6      	bne.n	b9652 <__gethex+0x2ca>
   b9684:	ee18 0a10 	vmov	r0, s16
   b9688:	4621      	mov	r1, r4
   b968a:	f000 f9db 	bl	b9a44 <_Bfree>
   b968e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b9690:	2300      	movs	r3, #0
   b9692:	6013      	str	r3, [r2, #0]
   b9694:	2750      	movs	r7, #80	; 0x50
   b9696:	e70c      	b.n	b94b2 <__gethex+0x12a>
   b9698:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b969a:	2b00      	cmp	r3, #0
   b969c:	d1f2      	bne.n	b9684 <__gethex+0x2fc>
   b969e:	e7d8      	b.n	b9652 <__gethex+0x2ca>
   b96a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b96a2:	2b00      	cmp	r3, #0
   b96a4:	d1d5      	bne.n	b9652 <__gethex+0x2ca>
   b96a6:	e7ed      	b.n	b9684 <__gethex+0x2fc>
   b96a8:	1e6f      	subs	r7, r5, #1
   b96aa:	f1ba 0f00 	cmp.w	sl, #0
   b96ae:	d131      	bne.n	b9714 <__gethex+0x38c>
   b96b0:	b127      	cbz	r7, b96bc <__gethex+0x334>
   b96b2:	4639      	mov	r1, r7
   b96b4:	4620      	mov	r0, r4
   b96b6:	f000 fe25 	bl	ba304 <__any_on>
   b96ba:	4682      	mov	sl, r0
   b96bc:	117b      	asrs	r3, r7, #5
   b96be:	2101      	movs	r1, #1
   b96c0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b96c4:	f007 071f 	and.w	r7, r7, #31
   b96c8:	fa01 f707 	lsl.w	r7, r1, r7
   b96cc:	421f      	tst	r7, r3
   b96ce:	4629      	mov	r1, r5
   b96d0:	4620      	mov	r0, r4
   b96d2:	bf18      	it	ne
   b96d4:	f04a 0a02 	orrne.w	sl, sl, #2
   b96d8:	1b76      	subs	r6, r6, r5
   b96da:	f7ff fded 	bl	b92b8 <rshift>
   b96de:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b96e2:	2702      	movs	r7, #2
   b96e4:	f1ba 0f00 	cmp.w	sl, #0
   b96e8:	d048      	beq.n	b977c <__gethex+0x3f4>
   b96ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b96ee:	2b02      	cmp	r3, #2
   b96f0:	d015      	beq.n	b971e <__gethex+0x396>
   b96f2:	2b03      	cmp	r3, #3
   b96f4:	d017      	beq.n	b9726 <__gethex+0x39e>
   b96f6:	2b01      	cmp	r3, #1
   b96f8:	d109      	bne.n	b970e <__gethex+0x386>
   b96fa:	f01a 0f02 	tst.w	sl, #2
   b96fe:	d006      	beq.n	b970e <__gethex+0x386>
   b9700:	f8d9 0000 	ldr.w	r0, [r9]
   b9704:	ea4a 0a00 	orr.w	sl, sl, r0
   b9708:	f01a 0f01 	tst.w	sl, #1
   b970c:	d10e      	bne.n	b972c <__gethex+0x3a4>
   b970e:	f047 0710 	orr.w	r7, r7, #16
   b9712:	e033      	b.n	b977c <__gethex+0x3f4>
   b9714:	f04f 0a01 	mov.w	sl, #1
   b9718:	e7d0      	b.n	b96bc <__gethex+0x334>
   b971a:	2701      	movs	r7, #1
   b971c:	e7e2      	b.n	b96e4 <__gethex+0x35c>
   b971e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9720:	f1c3 0301 	rsb	r3, r3, #1
   b9724:	9315      	str	r3, [sp, #84]	; 0x54
   b9726:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9728:	2b00      	cmp	r3, #0
   b972a:	d0f0      	beq.n	b970e <__gethex+0x386>
   b972c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b9730:	f104 0314 	add.w	r3, r4, #20
   b9734:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b9738:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b973c:	f04f 0c00 	mov.w	ip, #0
   b9740:	4618      	mov	r0, r3
   b9742:	f853 2b04 	ldr.w	r2, [r3], #4
   b9746:	f1b2 3fff 	cmp.w	r2, #4294967295
   b974a:	d01c      	beq.n	b9786 <__gethex+0x3fe>
   b974c:	3201      	adds	r2, #1
   b974e:	6002      	str	r2, [r0, #0]
   b9750:	2f02      	cmp	r7, #2
   b9752:	f104 0314 	add.w	r3, r4, #20
   b9756:	d13f      	bne.n	b97d8 <__gethex+0x450>
   b9758:	f8d8 2000 	ldr.w	r2, [r8]
   b975c:	3a01      	subs	r2, #1
   b975e:	42b2      	cmp	r2, r6
   b9760:	d10a      	bne.n	b9778 <__gethex+0x3f0>
   b9762:	1171      	asrs	r1, r6, #5
   b9764:	2201      	movs	r2, #1
   b9766:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b976a:	f006 061f 	and.w	r6, r6, #31
   b976e:	fa02 f606 	lsl.w	r6, r2, r6
   b9772:	421e      	tst	r6, r3
   b9774:	bf18      	it	ne
   b9776:	4617      	movne	r7, r2
   b9778:	f047 0720 	orr.w	r7, r7, #32
   b977c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b977e:	601c      	str	r4, [r3, #0]
   b9780:	9b04      	ldr	r3, [sp, #16]
   b9782:	601d      	str	r5, [r3, #0]
   b9784:	e695      	b.n	b94b2 <__gethex+0x12a>
   b9786:	4299      	cmp	r1, r3
   b9788:	f843 cc04 	str.w	ip, [r3, #-4]
   b978c:	d8d8      	bhi.n	b9740 <__gethex+0x3b8>
   b978e:	68a3      	ldr	r3, [r4, #8]
   b9790:	459b      	cmp	fp, r3
   b9792:	db19      	blt.n	b97c8 <__gethex+0x440>
   b9794:	6861      	ldr	r1, [r4, #4]
   b9796:	ee18 0a10 	vmov	r0, s16
   b979a:	3101      	adds	r1, #1
   b979c:	f000 f912 	bl	b99c4 <_Balloc>
   b97a0:	4681      	mov	r9, r0
   b97a2:	b918      	cbnz	r0, b97ac <__gethex+0x424>
   b97a4:	4b1a      	ldr	r3, [pc, #104]	; (b9810 <__gethex+0x488>)
   b97a6:	4602      	mov	r2, r0
   b97a8:	2184      	movs	r1, #132	; 0x84
   b97aa:	e6a8      	b.n	b94fe <__gethex+0x176>
   b97ac:	6922      	ldr	r2, [r4, #16]
   b97ae:	3202      	adds	r2, #2
   b97b0:	f104 010c 	add.w	r1, r4, #12
   b97b4:	0092      	lsls	r2, r2, #2
   b97b6:	300c      	adds	r0, #12
   b97b8:	f7fe fe83 	bl	b84c2 <memcpy>
   b97bc:	4621      	mov	r1, r4
   b97be:	ee18 0a10 	vmov	r0, s16
   b97c2:	f000 f93f 	bl	b9a44 <_Bfree>
   b97c6:	464c      	mov	r4, r9
   b97c8:	6923      	ldr	r3, [r4, #16]
   b97ca:	1c5a      	adds	r2, r3, #1
   b97cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b97d0:	6122      	str	r2, [r4, #16]
   b97d2:	2201      	movs	r2, #1
   b97d4:	615a      	str	r2, [r3, #20]
   b97d6:	e7bb      	b.n	b9750 <__gethex+0x3c8>
   b97d8:	6922      	ldr	r2, [r4, #16]
   b97da:	455a      	cmp	r2, fp
   b97dc:	dd0b      	ble.n	b97f6 <__gethex+0x46e>
   b97de:	2101      	movs	r1, #1
   b97e0:	4620      	mov	r0, r4
   b97e2:	f7ff fd69 	bl	b92b8 <rshift>
   b97e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b97ea:	3501      	adds	r5, #1
   b97ec:	42ab      	cmp	r3, r5
   b97ee:	f6ff aed0 	blt.w	b9592 <__gethex+0x20a>
   b97f2:	2701      	movs	r7, #1
   b97f4:	e7c0      	b.n	b9778 <__gethex+0x3f0>
   b97f6:	f016 061f 	ands.w	r6, r6, #31
   b97fa:	d0fa      	beq.n	b97f2 <__gethex+0x46a>
   b97fc:	4453      	add	r3, sl
   b97fe:	f1c6 0620 	rsb	r6, r6, #32
   b9802:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b9806:	f000 f9cf 	bl	b9ba8 <__hi0bits>
   b980a:	42b0      	cmp	r0, r6
   b980c:	dbe7      	blt.n	b97de <__gethex+0x456>
   b980e:	e7f0      	b.n	b97f2 <__gethex+0x46a>
   b9810:	000bb491 	.word	0x000bb491

000b9814 <L_shift>:
   b9814:	f1c2 0208 	rsb	r2, r2, #8
   b9818:	0092      	lsls	r2, r2, #2
   b981a:	b570      	push	{r4, r5, r6, lr}
   b981c:	f1c2 0620 	rsb	r6, r2, #32
   b9820:	6843      	ldr	r3, [r0, #4]
   b9822:	6804      	ldr	r4, [r0, #0]
   b9824:	fa03 f506 	lsl.w	r5, r3, r6
   b9828:	432c      	orrs	r4, r5
   b982a:	40d3      	lsrs	r3, r2
   b982c:	6004      	str	r4, [r0, #0]
   b982e:	f840 3f04 	str.w	r3, [r0, #4]!
   b9832:	4288      	cmp	r0, r1
   b9834:	d3f4      	bcc.n	b9820 <L_shift+0xc>
   b9836:	bd70      	pop	{r4, r5, r6, pc}

000b9838 <__match>:
   b9838:	b530      	push	{r4, r5, lr}
   b983a:	6803      	ldr	r3, [r0, #0]
   b983c:	3301      	adds	r3, #1
   b983e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9842:	b914      	cbnz	r4, b984a <__match+0x12>
   b9844:	6003      	str	r3, [r0, #0]
   b9846:	2001      	movs	r0, #1
   b9848:	bd30      	pop	{r4, r5, pc}
   b984a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b984e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b9852:	2d19      	cmp	r5, #25
   b9854:	bf98      	it	ls
   b9856:	3220      	addls	r2, #32
   b9858:	42a2      	cmp	r2, r4
   b985a:	d0f0      	beq.n	b983e <__match+0x6>
   b985c:	2000      	movs	r0, #0
   b985e:	e7f3      	b.n	b9848 <__match+0x10>

000b9860 <__hexnan>:
   b9860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9864:	680b      	ldr	r3, [r1, #0]
   b9866:	115e      	asrs	r6, r3, #5
   b9868:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b986c:	f013 031f 	ands.w	r3, r3, #31
   b9870:	b087      	sub	sp, #28
   b9872:	bf18      	it	ne
   b9874:	3604      	addne	r6, #4
   b9876:	2500      	movs	r5, #0
   b9878:	1f37      	subs	r7, r6, #4
   b987a:	4690      	mov	r8, r2
   b987c:	6802      	ldr	r2, [r0, #0]
   b987e:	9301      	str	r3, [sp, #4]
   b9880:	4682      	mov	sl, r0
   b9882:	f846 5c04 	str.w	r5, [r6, #-4]
   b9886:	46b9      	mov	r9, r7
   b9888:	463c      	mov	r4, r7
   b988a:	9502      	str	r5, [sp, #8]
   b988c:	46ab      	mov	fp, r5
   b988e:	7851      	ldrb	r1, [r2, #1]
   b9890:	1c53      	adds	r3, r2, #1
   b9892:	9303      	str	r3, [sp, #12]
   b9894:	b341      	cbz	r1, b98e8 <__hexnan+0x88>
   b9896:	4608      	mov	r0, r1
   b9898:	9205      	str	r2, [sp, #20]
   b989a:	9104      	str	r1, [sp, #16]
   b989c:	f7ff fd5e 	bl	b935c <__hexdig_fun>
   b98a0:	2800      	cmp	r0, #0
   b98a2:	d14f      	bne.n	b9944 <__hexnan+0xe4>
   b98a4:	9904      	ldr	r1, [sp, #16]
   b98a6:	9a05      	ldr	r2, [sp, #20]
   b98a8:	2920      	cmp	r1, #32
   b98aa:	d818      	bhi.n	b98de <__hexnan+0x7e>
   b98ac:	9b02      	ldr	r3, [sp, #8]
   b98ae:	459b      	cmp	fp, r3
   b98b0:	dd13      	ble.n	b98da <__hexnan+0x7a>
   b98b2:	454c      	cmp	r4, r9
   b98b4:	d206      	bcs.n	b98c4 <__hexnan+0x64>
   b98b6:	2d07      	cmp	r5, #7
   b98b8:	dc04      	bgt.n	b98c4 <__hexnan+0x64>
   b98ba:	462a      	mov	r2, r5
   b98bc:	4649      	mov	r1, r9
   b98be:	4620      	mov	r0, r4
   b98c0:	f7ff ffa8 	bl	b9814 <L_shift>
   b98c4:	4544      	cmp	r4, r8
   b98c6:	d950      	bls.n	b996a <__hexnan+0x10a>
   b98c8:	2300      	movs	r3, #0
   b98ca:	f1a4 0904 	sub.w	r9, r4, #4
   b98ce:	f844 3c04 	str.w	r3, [r4, #-4]
   b98d2:	f8cd b008 	str.w	fp, [sp, #8]
   b98d6:	464c      	mov	r4, r9
   b98d8:	461d      	mov	r5, r3
   b98da:	9a03      	ldr	r2, [sp, #12]
   b98dc:	e7d7      	b.n	b988e <__hexnan+0x2e>
   b98de:	2929      	cmp	r1, #41	; 0x29
   b98e0:	d156      	bne.n	b9990 <__hexnan+0x130>
   b98e2:	3202      	adds	r2, #2
   b98e4:	f8ca 2000 	str.w	r2, [sl]
   b98e8:	f1bb 0f00 	cmp.w	fp, #0
   b98ec:	d050      	beq.n	b9990 <__hexnan+0x130>
   b98ee:	454c      	cmp	r4, r9
   b98f0:	d206      	bcs.n	b9900 <__hexnan+0xa0>
   b98f2:	2d07      	cmp	r5, #7
   b98f4:	dc04      	bgt.n	b9900 <__hexnan+0xa0>
   b98f6:	462a      	mov	r2, r5
   b98f8:	4649      	mov	r1, r9
   b98fa:	4620      	mov	r0, r4
   b98fc:	f7ff ff8a 	bl	b9814 <L_shift>
   b9900:	4544      	cmp	r4, r8
   b9902:	d934      	bls.n	b996e <__hexnan+0x10e>
   b9904:	f1a8 0204 	sub.w	r2, r8, #4
   b9908:	4623      	mov	r3, r4
   b990a:	f853 1b04 	ldr.w	r1, [r3], #4
   b990e:	f842 1f04 	str.w	r1, [r2, #4]!
   b9912:	429f      	cmp	r7, r3
   b9914:	d2f9      	bcs.n	b990a <__hexnan+0xaa>
   b9916:	1b3b      	subs	r3, r7, r4
   b9918:	f023 0303 	bic.w	r3, r3, #3
   b991c:	3304      	adds	r3, #4
   b991e:	3401      	adds	r4, #1
   b9920:	3e03      	subs	r6, #3
   b9922:	42b4      	cmp	r4, r6
   b9924:	bf88      	it	hi
   b9926:	2304      	movhi	r3, #4
   b9928:	4443      	add	r3, r8
   b992a:	2200      	movs	r2, #0
   b992c:	f843 2b04 	str.w	r2, [r3], #4
   b9930:	429f      	cmp	r7, r3
   b9932:	d2fb      	bcs.n	b992c <__hexnan+0xcc>
   b9934:	683b      	ldr	r3, [r7, #0]
   b9936:	b91b      	cbnz	r3, b9940 <__hexnan+0xe0>
   b9938:	4547      	cmp	r7, r8
   b993a:	d127      	bne.n	b998c <__hexnan+0x12c>
   b993c:	2301      	movs	r3, #1
   b993e:	603b      	str	r3, [r7, #0]
   b9940:	2005      	movs	r0, #5
   b9942:	e026      	b.n	b9992 <__hexnan+0x132>
   b9944:	3501      	adds	r5, #1
   b9946:	2d08      	cmp	r5, #8
   b9948:	f10b 0b01 	add.w	fp, fp, #1
   b994c:	dd06      	ble.n	b995c <__hexnan+0xfc>
   b994e:	4544      	cmp	r4, r8
   b9950:	d9c3      	bls.n	b98da <__hexnan+0x7a>
   b9952:	2300      	movs	r3, #0
   b9954:	f844 3c04 	str.w	r3, [r4, #-4]
   b9958:	2501      	movs	r5, #1
   b995a:	3c04      	subs	r4, #4
   b995c:	6822      	ldr	r2, [r4, #0]
   b995e:	f000 000f 	and.w	r0, r0, #15
   b9962:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b9966:	6022      	str	r2, [r4, #0]
   b9968:	e7b7      	b.n	b98da <__hexnan+0x7a>
   b996a:	2508      	movs	r5, #8
   b996c:	e7b5      	b.n	b98da <__hexnan+0x7a>
   b996e:	9b01      	ldr	r3, [sp, #4]
   b9970:	2b00      	cmp	r3, #0
   b9972:	d0df      	beq.n	b9934 <__hexnan+0xd4>
   b9974:	f04f 32ff 	mov.w	r2, #4294967295
   b9978:	f1c3 0320 	rsb	r3, r3, #32
   b997c:	fa22 f303 	lsr.w	r3, r2, r3
   b9980:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b9984:	401a      	ands	r2, r3
   b9986:	f846 2c04 	str.w	r2, [r6, #-4]
   b998a:	e7d3      	b.n	b9934 <__hexnan+0xd4>
   b998c:	3f04      	subs	r7, #4
   b998e:	e7d1      	b.n	b9934 <__hexnan+0xd4>
   b9990:	2004      	movs	r0, #4
   b9992:	b007      	add	sp, #28
   b9994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9998 <__retarget_lock_acquire_recursive>:
   b9998:	4770      	bx	lr

000b999a <__retarget_lock_release>:
   b999a:	4770      	bx	lr

000b999c <__retarget_lock_release_recursive>:
   b999c:	4770      	bx	lr

000b999e <__ascii_mbtowc>:
   b999e:	b082      	sub	sp, #8
   b99a0:	b901      	cbnz	r1, b99a4 <__ascii_mbtowc+0x6>
   b99a2:	a901      	add	r1, sp, #4
   b99a4:	b142      	cbz	r2, b99b8 <__ascii_mbtowc+0x1a>
   b99a6:	b14b      	cbz	r3, b99bc <__ascii_mbtowc+0x1e>
   b99a8:	7813      	ldrb	r3, [r2, #0]
   b99aa:	600b      	str	r3, [r1, #0]
   b99ac:	7812      	ldrb	r2, [r2, #0]
   b99ae:	1e10      	subs	r0, r2, #0
   b99b0:	bf18      	it	ne
   b99b2:	2001      	movne	r0, #1
   b99b4:	b002      	add	sp, #8
   b99b6:	4770      	bx	lr
   b99b8:	4610      	mov	r0, r2
   b99ba:	e7fb      	b.n	b99b4 <__ascii_mbtowc+0x16>
   b99bc:	f06f 0001 	mvn.w	r0, #1
   b99c0:	e7f8      	b.n	b99b4 <__ascii_mbtowc+0x16>
	...

000b99c4 <_Balloc>:
   b99c4:	b570      	push	{r4, r5, r6, lr}
   b99c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b99c8:	4604      	mov	r4, r0
   b99ca:	460d      	mov	r5, r1
   b99cc:	b976      	cbnz	r6, b99ec <_Balloc+0x28>
   b99ce:	2010      	movs	r0, #16
   b99d0:	f7fc fca0 	bl	b6314 <malloc>
   b99d4:	4602      	mov	r2, r0
   b99d6:	6260      	str	r0, [r4, #36]	; 0x24
   b99d8:	b920      	cbnz	r0, b99e4 <_Balloc+0x20>
   b99da:	4b18      	ldr	r3, [pc, #96]	; (b9a3c <_Balloc+0x78>)
   b99dc:	4818      	ldr	r0, [pc, #96]	; (b9a40 <_Balloc+0x7c>)
   b99de:	2166      	movs	r1, #102	; 0x66
   b99e0:	f7fc fcc8 	bl	b6374 <__assert_func>
   b99e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b99e8:	6006      	str	r6, [r0, #0]
   b99ea:	60c6      	str	r6, [r0, #12]
   b99ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b99ee:	68f3      	ldr	r3, [r6, #12]
   b99f0:	b183      	cbz	r3, b9a14 <_Balloc+0x50>
   b99f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b99f4:	68db      	ldr	r3, [r3, #12]
   b99f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b99fa:	b9b8      	cbnz	r0, b9a2c <_Balloc+0x68>
   b99fc:	2101      	movs	r1, #1
   b99fe:	fa01 f605 	lsl.w	r6, r1, r5
   b9a02:	1d72      	adds	r2, r6, #5
   b9a04:	0092      	lsls	r2, r2, #2
   b9a06:	4620      	mov	r0, r4
   b9a08:	f000 fc9d 	bl	ba346 <_calloc_r>
   b9a0c:	b160      	cbz	r0, b9a28 <_Balloc+0x64>
   b9a0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b9a12:	e00e      	b.n	b9a32 <_Balloc+0x6e>
   b9a14:	2221      	movs	r2, #33	; 0x21
   b9a16:	2104      	movs	r1, #4
   b9a18:	4620      	mov	r0, r4
   b9a1a:	f000 fc94 	bl	ba346 <_calloc_r>
   b9a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9a20:	60f0      	str	r0, [r6, #12]
   b9a22:	68db      	ldr	r3, [r3, #12]
   b9a24:	2b00      	cmp	r3, #0
   b9a26:	d1e4      	bne.n	b99f2 <_Balloc+0x2e>
   b9a28:	2000      	movs	r0, #0
   b9a2a:	bd70      	pop	{r4, r5, r6, pc}
   b9a2c:	6802      	ldr	r2, [r0, #0]
   b9a2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b9a32:	2300      	movs	r3, #0
   b9a34:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b9a38:	e7f7      	b.n	b9a2a <_Balloc+0x66>
   b9a3a:	bf00      	nop
   b9a3c:	000bb2a5 	.word	0x000bb2a5
   b9a40:	000bb53c 	.word	0x000bb53c

000b9a44 <_Bfree>:
   b9a44:	b570      	push	{r4, r5, r6, lr}
   b9a46:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9a48:	4605      	mov	r5, r0
   b9a4a:	460c      	mov	r4, r1
   b9a4c:	b976      	cbnz	r6, b9a6c <_Bfree+0x28>
   b9a4e:	2010      	movs	r0, #16
   b9a50:	f7fc fc60 	bl	b6314 <malloc>
   b9a54:	4602      	mov	r2, r0
   b9a56:	6268      	str	r0, [r5, #36]	; 0x24
   b9a58:	b920      	cbnz	r0, b9a64 <_Bfree+0x20>
   b9a5a:	4b09      	ldr	r3, [pc, #36]	; (b9a80 <_Bfree+0x3c>)
   b9a5c:	4809      	ldr	r0, [pc, #36]	; (b9a84 <_Bfree+0x40>)
   b9a5e:	218a      	movs	r1, #138	; 0x8a
   b9a60:	f7fc fc88 	bl	b6374 <__assert_func>
   b9a64:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9a68:	6006      	str	r6, [r0, #0]
   b9a6a:	60c6      	str	r6, [r0, #12]
   b9a6c:	b13c      	cbz	r4, b9a7e <_Bfree+0x3a>
   b9a6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b9a70:	6862      	ldr	r2, [r4, #4]
   b9a72:	68db      	ldr	r3, [r3, #12]
   b9a74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b9a78:	6021      	str	r1, [r4, #0]
   b9a7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b9a7e:	bd70      	pop	{r4, r5, r6, pc}
   b9a80:	000bb2a5 	.word	0x000bb2a5
   b9a84:	000bb53c 	.word	0x000bb53c

000b9a88 <__multadd>:
   b9a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9a8c:	690d      	ldr	r5, [r1, #16]
   b9a8e:	4607      	mov	r7, r0
   b9a90:	460c      	mov	r4, r1
   b9a92:	461e      	mov	r6, r3
   b9a94:	f101 0c14 	add.w	ip, r1, #20
   b9a98:	2000      	movs	r0, #0
   b9a9a:	f8dc 3000 	ldr.w	r3, [ip]
   b9a9e:	b299      	uxth	r1, r3
   b9aa0:	fb02 6101 	mla	r1, r2, r1, r6
   b9aa4:	0c1e      	lsrs	r6, r3, #16
   b9aa6:	0c0b      	lsrs	r3, r1, #16
   b9aa8:	fb02 3306 	mla	r3, r2, r6, r3
   b9aac:	b289      	uxth	r1, r1
   b9aae:	3001      	adds	r0, #1
   b9ab0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b9ab4:	4285      	cmp	r5, r0
   b9ab6:	f84c 1b04 	str.w	r1, [ip], #4
   b9aba:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b9abe:	dcec      	bgt.n	b9a9a <__multadd+0x12>
   b9ac0:	b30e      	cbz	r6, b9b06 <__multadd+0x7e>
   b9ac2:	68a3      	ldr	r3, [r4, #8]
   b9ac4:	42ab      	cmp	r3, r5
   b9ac6:	dc19      	bgt.n	b9afc <__multadd+0x74>
   b9ac8:	6861      	ldr	r1, [r4, #4]
   b9aca:	4638      	mov	r0, r7
   b9acc:	3101      	adds	r1, #1
   b9ace:	f7ff ff79 	bl	b99c4 <_Balloc>
   b9ad2:	4680      	mov	r8, r0
   b9ad4:	b928      	cbnz	r0, b9ae2 <__multadd+0x5a>
   b9ad6:	4602      	mov	r2, r0
   b9ad8:	4b0c      	ldr	r3, [pc, #48]	; (b9b0c <__multadd+0x84>)
   b9ada:	480d      	ldr	r0, [pc, #52]	; (b9b10 <__multadd+0x88>)
   b9adc:	21b5      	movs	r1, #181	; 0xb5
   b9ade:	f7fc fc49 	bl	b6374 <__assert_func>
   b9ae2:	6922      	ldr	r2, [r4, #16]
   b9ae4:	3202      	adds	r2, #2
   b9ae6:	f104 010c 	add.w	r1, r4, #12
   b9aea:	0092      	lsls	r2, r2, #2
   b9aec:	300c      	adds	r0, #12
   b9aee:	f7fe fce8 	bl	b84c2 <memcpy>
   b9af2:	4621      	mov	r1, r4
   b9af4:	4638      	mov	r0, r7
   b9af6:	f7ff ffa5 	bl	b9a44 <_Bfree>
   b9afa:	4644      	mov	r4, r8
   b9afc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b9b00:	3501      	adds	r5, #1
   b9b02:	615e      	str	r6, [r3, #20]
   b9b04:	6125      	str	r5, [r4, #16]
   b9b06:	4620      	mov	r0, r4
   b9b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9b0c:	000bb491 	.word	0x000bb491
   b9b10:	000bb53c 	.word	0x000bb53c

000b9b14 <__s2b>:
   b9b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9b18:	460c      	mov	r4, r1
   b9b1a:	4615      	mov	r5, r2
   b9b1c:	461f      	mov	r7, r3
   b9b1e:	2209      	movs	r2, #9
   b9b20:	3308      	adds	r3, #8
   b9b22:	4606      	mov	r6, r0
   b9b24:	fb93 f3f2 	sdiv	r3, r3, r2
   b9b28:	2100      	movs	r1, #0
   b9b2a:	2201      	movs	r2, #1
   b9b2c:	429a      	cmp	r2, r3
   b9b2e:	db09      	blt.n	b9b44 <__s2b+0x30>
   b9b30:	4630      	mov	r0, r6
   b9b32:	f7ff ff47 	bl	b99c4 <_Balloc>
   b9b36:	b940      	cbnz	r0, b9b4a <__s2b+0x36>
   b9b38:	4602      	mov	r2, r0
   b9b3a:	4b19      	ldr	r3, [pc, #100]	; (b9ba0 <__s2b+0x8c>)
   b9b3c:	4819      	ldr	r0, [pc, #100]	; (b9ba4 <__s2b+0x90>)
   b9b3e:	21ce      	movs	r1, #206	; 0xce
   b9b40:	f7fc fc18 	bl	b6374 <__assert_func>
   b9b44:	0052      	lsls	r2, r2, #1
   b9b46:	3101      	adds	r1, #1
   b9b48:	e7f0      	b.n	b9b2c <__s2b+0x18>
   b9b4a:	9b08      	ldr	r3, [sp, #32]
   b9b4c:	6143      	str	r3, [r0, #20]
   b9b4e:	2d09      	cmp	r5, #9
   b9b50:	f04f 0301 	mov.w	r3, #1
   b9b54:	6103      	str	r3, [r0, #16]
   b9b56:	dd16      	ble.n	b9b86 <__s2b+0x72>
   b9b58:	f104 0909 	add.w	r9, r4, #9
   b9b5c:	46c8      	mov	r8, r9
   b9b5e:	442c      	add	r4, r5
   b9b60:	f818 3b01 	ldrb.w	r3, [r8], #1
   b9b64:	4601      	mov	r1, r0
   b9b66:	3b30      	subs	r3, #48	; 0x30
   b9b68:	220a      	movs	r2, #10
   b9b6a:	4630      	mov	r0, r6
   b9b6c:	f7ff ff8c 	bl	b9a88 <__multadd>
   b9b70:	45a0      	cmp	r8, r4
   b9b72:	d1f5      	bne.n	b9b60 <__s2b+0x4c>
   b9b74:	f1a5 0408 	sub.w	r4, r5, #8
   b9b78:	444c      	add	r4, r9
   b9b7a:	1b2d      	subs	r5, r5, r4
   b9b7c:	1963      	adds	r3, r4, r5
   b9b7e:	42bb      	cmp	r3, r7
   b9b80:	db04      	blt.n	b9b8c <__s2b+0x78>
   b9b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9b86:	340a      	adds	r4, #10
   b9b88:	2509      	movs	r5, #9
   b9b8a:	e7f6      	b.n	b9b7a <__s2b+0x66>
   b9b8c:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9b90:	4601      	mov	r1, r0
   b9b92:	3b30      	subs	r3, #48	; 0x30
   b9b94:	220a      	movs	r2, #10
   b9b96:	4630      	mov	r0, r6
   b9b98:	f7ff ff76 	bl	b9a88 <__multadd>
   b9b9c:	e7ee      	b.n	b9b7c <__s2b+0x68>
   b9b9e:	bf00      	nop
   b9ba0:	000bb491 	.word	0x000bb491
   b9ba4:	000bb53c 	.word	0x000bb53c

000b9ba8 <__hi0bits>:
   b9ba8:	0c03      	lsrs	r3, r0, #16
   b9baa:	041b      	lsls	r3, r3, #16
   b9bac:	b9d3      	cbnz	r3, b9be4 <__hi0bits+0x3c>
   b9bae:	0400      	lsls	r0, r0, #16
   b9bb0:	2310      	movs	r3, #16
   b9bb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b9bb6:	bf04      	itt	eq
   b9bb8:	0200      	lsleq	r0, r0, #8
   b9bba:	3308      	addeq	r3, #8
   b9bbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b9bc0:	bf04      	itt	eq
   b9bc2:	0100      	lsleq	r0, r0, #4
   b9bc4:	3304      	addeq	r3, #4
   b9bc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b9bca:	bf04      	itt	eq
   b9bcc:	0080      	lsleq	r0, r0, #2
   b9bce:	3302      	addeq	r3, #2
   b9bd0:	2800      	cmp	r0, #0
   b9bd2:	db05      	blt.n	b9be0 <__hi0bits+0x38>
   b9bd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b9bd8:	f103 0301 	add.w	r3, r3, #1
   b9bdc:	bf08      	it	eq
   b9bde:	2320      	moveq	r3, #32
   b9be0:	4618      	mov	r0, r3
   b9be2:	4770      	bx	lr
   b9be4:	2300      	movs	r3, #0
   b9be6:	e7e4      	b.n	b9bb2 <__hi0bits+0xa>

000b9be8 <__lo0bits>:
   b9be8:	6803      	ldr	r3, [r0, #0]
   b9bea:	f013 0207 	ands.w	r2, r3, #7
   b9bee:	4601      	mov	r1, r0
   b9bf0:	d00b      	beq.n	b9c0a <__lo0bits+0x22>
   b9bf2:	07da      	lsls	r2, r3, #31
   b9bf4:	d423      	bmi.n	b9c3e <__lo0bits+0x56>
   b9bf6:	0798      	lsls	r0, r3, #30
   b9bf8:	bf49      	itett	mi
   b9bfa:	085b      	lsrmi	r3, r3, #1
   b9bfc:	089b      	lsrpl	r3, r3, #2
   b9bfe:	2001      	movmi	r0, #1
   b9c00:	600b      	strmi	r3, [r1, #0]
   b9c02:	bf5c      	itt	pl
   b9c04:	600b      	strpl	r3, [r1, #0]
   b9c06:	2002      	movpl	r0, #2
   b9c08:	4770      	bx	lr
   b9c0a:	b298      	uxth	r0, r3
   b9c0c:	b9a8      	cbnz	r0, b9c3a <__lo0bits+0x52>
   b9c0e:	0c1b      	lsrs	r3, r3, #16
   b9c10:	2010      	movs	r0, #16
   b9c12:	b2da      	uxtb	r2, r3
   b9c14:	b90a      	cbnz	r2, b9c1a <__lo0bits+0x32>
   b9c16:	3008      	adds	r0, #8
   b9c18:	0a1b      	lsrs	r3, r3, #8
   b9c1a:	071a      	lsls	r2, r3, #28
   b9c1c:	bf04      	itt	eq
   b9c1e:	091b      	lsreq	r3, r3, #4
   b9c20:	3004      	addeq	r0, #4
   b9c22:	079a      	lsls	r2, r3, #30
   b9c24:	bf04      	itt	eq
   b9c26:	089b      	lsreq	r3, r3, #2
   b9c28:	3002      	addeq	r0, #2
   b9c2a:	07da      	lsls	r2, r3, #31
   b9c2c:	d403      	bmi.n	b9c36 <__lo0bits+0x4e>
   b9c2e:	085b      	lsrs	r3, r3, #1
   b9c30:	f100 0001 	add.w	r0, r0, #1
   b9c34:	d005      	beq.n	b9c42 <__lo0bits+0x5a>
   b9c36:	600b      	str	r3, [r1, #0]
   b9c38:	4770      	bx	lr
   b9c3a:	4610      	mov	r0, r2
   b9c3c:	e7e9      	b.n	b9c12 <__lo0bits+0x2a>
   b9c3e:	2000      	movs	r0, #0
   b9c40:	4770      	bx	lr
   b9c42:	2020      	movs	r0, #32
   b9c44:	4770      	bx	lr
	...

000b9c48 <__i2b>:
   b9c48:	b510      	push	{r4, lr}
   b9c4a:	460c      	mov	r4, r1
   b9c4c:	2101      	movs	r1, #1
   b9c4e:	f7ff feb9 	bl	b99c4 <_Balloc>
   b9c52:	4602      	mov	r2, r0
   b9c54:	b928      	cbnz	r0, b9c62 <__i2b+0x1a>
   b9c56:	4b05      	ldr	r3, [pc, #20]	; (b9c6c <__i2b+0x24>)
   b9c58:	4805      	ldr	r0, [pc, #20]	; (b9c70 <__i2b+0x28>)
   b9c5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b9c5e:	f7fc fb89 	bl	b6374 <__assert_func>
   b9c62:	2301      	movs	r3, #1
   b9c64:	6144      	str	r4, [r0, #20]
   b9c66:	6103      	str	r3, [r0, #16]
   b9c68:	bd10      	pop	{r4, pc}
   b9c6a:	bf00      	nop
   b9c6c:	000bb491 	.word	0x000bb491
   b9c70:	000bb53c 	.word	0x000bb53c

000b9c74 <__multiply>:
   b9c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9c78:	4691      	mov	r9, r2
   b9c7a:	690a      	ldr	r2, [r1, #16]
   b9c7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b9c80:	429a      	cmp	r2, r3
   b9c82:	bfb8      	it	lt
   b9c84:	460b      	movlt	r3, r1
   b9c86:	460c      	mov	r4, r1
   b9c88:	bfbc      	itt	lt
   b9c8a:	464c      	movlt	r4, r9
   b9c8c:	4699      	movlt	r9, r3
   b9c8e:	6927      	ldr	r7, [r4, #16]
   b9c90:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b9c94:	68a3      	ldr	r3, [r4, #8]
   b9c96:	6861      	ldr	r1, [r4, #4]
   b9c98:	eb07 060a 	add.w	r6, r7, sl
   b9c9c:	42b3      	cmp	r3, r6
   b9c9e:	b085      	sub	sp, #20
   b9ca0:	bfb8      	it	lt
   b9ca2:	3101      	addlt	r1, #1
   b9ca4:	f7ff fe8e 	bl	b99c4 <_Balloc>
   b9ca8:	b930      	cbnz	r0, b9cb8 <__multiply+0x44>
   b9caa:	4602      	mov	r2, r0
   b9cac:	4b44      	ldr	r3, [pc, #272]	; (b9dc0 <__multiply+0x14c>)
   b9cae:	4845      	ldr	r0, [pc, #276]	; (b9dc4 <__multiply+0x150>)
   b9cb0:	f240 115d 	movw	r1, #349	; 0x15d
   b9cb4:	f7fc fb5e 	bl	b6374 <__assert_func>
   b9cb8:	f100 0514 	add.w	r5, r0, #20
   b9cbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b9cc0:	462b      	mov	r3, r5
   b9cc2:	2200      	movs	r2, #0
   b9cc4:	4543      	cmp	r3, r8
   b9cc6:	d321      	bcc.n	b9d0c <__multiply+0x98>
   b9cc8:	f104 0314 	add.w	r3, r4, #20
   b9ccc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b9cd0:	f109 0314 	add.w	r3, r9, #20
   b9cd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b9cd8:	9202      	str	r2, [sp, #8]
   b9cda:	1b3a      	subs	r2, r7, r4
   b9cdc:	3a15      	subs	r2, #21
   b9cde:	f022 0203 	bic.w	r2, r2, #3
   b9ce2:	3204      	adds	r2, #4
   b9ce4:	f104 0115 	add.w	r1, r4, #21
   b9ce8:	428f      	cmp	r7, r1
   b9cea:	bf38      	it	cc
   b9cec:	2204      	movcc	r2, #4
   b9cee:	9201      	str	r2, [sp, #4]
   b9cf0:	9a02      	ldr	r2, [sp, #8]
   b9cf2:	9303      	str	r3, [sp, #12]
   b9cf4:	429a      	cmp	r2, r3
   b9cf6:	d80c      	bhi.n	b9d12 <__multiply+0x9e>
   b9cf8:	2e00      	cmp	r6, #0
   b9cfa:	dd03      	ble.n	b9d04 <__multiply+0x90>
   b9cfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b9d00:	2b00      	cmp	r3, #0
   b9d02:	d05a      	beq.n	b9dba <__multiply+0x146>
   b9d04:	6106      	str	r6, [r0, #16]
   b9d06:	b005      	add	sp, #20
   b9d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9d0c:	f843 2b04 	str.w	r2, [r3], #4
   b9d10:	e7d8      	b.n	b9cc4 <__multiply+0x50>
   b9d12:	f8b3 a000 	ldrh.w	sl, [r3]
   b9d16:	f1ba 0f00 	cmp.w	sl, #0
   b9d1a:	d024      	beq.n	b9d66 <__multiply+0xf2>
   b9d1c:	f104 0e14 	add.w	lr, r4, #20
   b9d20:	46a9      	mov	r9, r5
   b9d22:	f04f 0c00 	mov.w	ip, #0
   b9d26:	f85e 2b04 	ldr.w	r2, [lr], #4
   b9d2a:	f8d9 1000 	ldr.w	r1, [r9]
   b9d2e:	fa1f fb82 	uxth.w	fp, r2
   b9d32:	b289      	uxth	r1, r1
   b9d34:	fb0a 110b 	mla	r1, sl, fp, r1
   b9d38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b9d3c:	f8d9 2000 	ldr.w	r2, [r9]
   b9d40:	4461      	add	r1, ip
   b9d42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b9d46:	fb0a c20b 	mla	r2, sl, fp, ip
   b9d4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b9d4e:	b289      	uxth	r1, r1
   b9d50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b9d54:	4577      	cmp	r7, lr
   b9d56:	f849 1b04 	str.w	r1, [r9], #4
   b9d5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b9d5e:	d8e2      	bhi.n	b9d26 <__multiply+0xb2>
   b9d60:	9a01      	ldr	r2, [sp, #4]
   b9d62:	f845 c002 	str.w	ip, [r5, r2]
   b9d66:	9a03      	ldr	r2, [sp, #12]
   b9d68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b9d6c:	3304      	adds	r3, #4
   b9d6e:	f1b9 0f00 	cmp.w	r9, #0
   b9d72:	d020      	beq.n	b9db6 <__multiply+0x142>
   b9d74:	6829      	ldr	r1, [r5, #0]
   b9d76:	f104 0c14 	add.w	ip, r4, #20
   b9d7a:	46ae      	mov	lr, r5
   b9d7c:	f04f 0a00 	mov.w	sl, #0
   b9d80:	f8bc b000 	ldrh.w	fp, [ip]
   b9d84:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b9d88:	fb09 220b 	mla	r2, r9, fp, r2
   b9d8c:	4492      	add	sl, r2
   b9d8e:	b289      	uxth	r1, r1
   b9d90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b9d94:	f84e 1b04 	str.w	r1, [lr], #4
   b9d98:	f85c 2b04 	ldr.w	r2, [ip], #4
   b9d9c:	f8be 1000 	ldrh.w	r1, [lr]
   b9da0:	0c12      	lsrs	r2, r2, #16
   b9da2:	fb09 1102 	mla	r1, r9, r2, r1
   b9da6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b9daa:	4567      	cmp	r7, ip
   b9dac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b9db0:	d8e6      	bhi.n	b9d80 <__multiply+0x10c>
   b9db2:	9a01      	ldr	r2, [sp, #4]
   b9db4:	50a9      	str	r1, [r5, r2]
   b9db6:	3504      	adds	r5, #4
   b9db8:	e79a      	b.n	b9cf0 <__multiply+0x7c>
   b9dba:	3e01      	subs	r6, #1
   b9dbc:	e79c      	b.n	b9cf8 <__multiply+0x84>
   b9dbe:	bf00      	nop
   b9dc0:	000bb491 	.word	0x000bb491
   b9dc4:	000bb53c 	.word	0x000bb53c

000b9dc8 <__pow5mult>:
   b9dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9dcc:	4615      	mov	r5, r2
   b9dce:	f012 0203 	ands.w	r2, r2, #3
   b9dd2:	4606      	mov	r6, r0
   b9dd4:	460f      	mov	r7, r1
   b9dd6:	d007      	beq.n	b9de8 <__pow5mult+0x20>
   b9dd8:	4c25      	ldr	r4, [pc, #148]	; (b9e70 <__pow5mult+0xa8>)
   b9dda:	3a01      	subs	r2, #1
   b9ddc:	2300      	movs	r3, #0
   b9dde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b9de2:	f7ff fe51 	bl	b9a88 <__multadd>
   b9de6:	4607      	mov	r7, r0
   b9de8:	10ad      	asrs	r5, r5, #2
   b9dea:	d03d      	beq.n	b9e68 <__pow5mult+0xa0>
   b9dec:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b9dee:	b97c      	cbnz	r4, b9e10 <__pow5mult+0x48>
   b9df0:	2010      	movs	r0, #16
   b9df2:	f7fc fa8f 	bl	b6314 <malloc>
   b9df6:	4602      	mov	r2, r0
   b9df8:	6270      	str	r0, [r6, #36]	; 0x24
   b9dfa:	b928      	cbnz	r0, b9e08 <__pow5mult+0x40>
   b9dfc:	4b1d      	ldr	r3, [pc, #116]	; (b9e74 <__pow5mult+0xac>)
   b9dfe:	481e      	ldr	r0, [pc, #120]	; (b9e78 <__pow5mult+0xb0>)
   b9e00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b9e04:	f7fc fab6 	bl	b6374 <__assert_func>
   b9e08:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b9e0c:	6004      	str	r4, [r0, #0]
   b9e0e:	60c4      	str	r4, [r0, #12]
   b9e10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b9e14:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b9e18:	b94c      	cbnz	r4, b9e2e <__pow5mult+0x66>
   b9e1a:	f240 2171 	movw	r1, #625	; 0x271
   b9e1e:	4630      	mov	r0, r6
   b9e20:	f7ff ff12 	bl	b9c48 <__i2b>
   b9e24:	2300      	movs	r3, #0
   b9e26:	f8c8 0008 	str.w	r0, [r8, #8]
   b9e2a:	4604      	mov	r4, r0
   b9e2c:	6003      	str	r3, [r0, #0]
   b9e2e:	f04f 0900 	mov.w	r9, #0
   b9e32:	07eb      	lsls	r3, r5, #31
   b9e34:	d50a      	bpl.n	b9e4c <__pow5mult+0x84>
   b9e36:	4639      	mov	r1, r7
   b9e38:	4622      	mov	r2, r4
   b9e3a:	4630      	mov	r0, r6
   b9e3c:	f7ff ff1a 	bl	b9c74 <__multiply>
   b9e40:	4639      	mov	r1, r7
   b9e42:	4680      	mov	r8, r0
   b9e44:	4630      	mov	r0, r6
   b9e46:	f7ff fdfd 	bl	b9a44 <_Bfree>
   b9e4a:	4647      	mov	r7, r8
   b9e4c:	106d      	asrs	r5, r5, #1
   b9e4e:	d00b      	beq.n	b9e68 <__pow5mult+0xa0>
   b9e50:	6820      	ldr	r0, [r4, #0]
   b9e52:	b938      	cbnz	r0, b9e64 <__pow5mult+0x9c>
   b9e54:	4622      	mov	r2, r4
   b9e56:	4621      	mov	r1, r4
   b9e58:	4630      	mov	r0, r6
   b9e5a:	f7ff ff0b 	bl	b9c74 <__multiply>
   b9e5e:	6020      	str	r0, [r4, #0]
   b9e60:	f8c0 9000 	str.w	r9, [r0]
   b9e64:	4604      	mov	r4, r0
   b9e66:	e7e4      	b.n	b9e32 <__pow5mult+0x6a>
   b9e68:	4638      	mov	r0, r7
   b9e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9e6e:	bf00      	nop
   b9e70:	000bb6b0 	.word	0x000bb6b0
   b9e74:	000bb2a5 	.word	0x000bb2a5
   b9e78:	000bb53c 	.word	0x000bb53c

000b9e7c <__lshift>:
   b9e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9e80:	460c      	mov	r4, r1
   b9e82:	6849      	ldr	r1, [r1, #4]
   b9e84:	6923      	ldr	r3, [r4, #16]
   b9e86:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b9e8a:	68a3      	ldr	r3, [r4, #8]
   b9e8c:	4607      	mov	r7, r0
   b9e8e:	4691      	mov	r9, r2
   b9e90:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b9e94:	f108 0601 	add.w	r6, r8, #1
   b9e98:	42b3      	cmp	r3, r6
   b9e9a:	db0b      	blt.n	b9eb4 <__lshift+0x38>
   b9e9c:	4638      	mov	r0, r7
   b9e9e:	f7ff fd91 	bl	b99c4 <_Balloc>
   b9ea2:	4605      	mov	r5, r0
   b9ea4:	b948      	cbnz	r0, b9eba <__lshift+0x3e>
   b9ea6:	4602      	mov	r2, r0
   b9ea8:	4b2a      	ldr	r3, [pc, #168]	; (b9f54 <__lshift+0xd8>)
   b9eaa:	482b      	ldr	r0, [pc, #172]	; (b9f58 <__lshift+0xdc>)
   b9eac:	f240 11d9 	movw	r1, #473	; 0x1d9
   b9eb0:	f7fc fa60 	bl	b6374 <__assert_func>
   b9eb4:	3101      	adds	r1, #1
   b9eb6:	005b      	lsls	r3, r3, #1
   b9eb8:	e7ee      	b.n	b9e98 <__lshift+0x1c>
   b9eba:	2300      	movs	r3, #0
   b9ebc:	f100 0114 	add.w	r1, r0, #20
   b9ec0:	f100 0210 	add.w	r2, r0, #16
   b9ec4:	4618      	mov	r0, r3
   b9ec6:	4553      	cmp	r3, sl
   b9ec8:	db37      	blt.n	b9f3a <__lshift+0xbe>
   b9eca:	6920      	ldr	r0, [r4, #16]
   b9ecc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b9ed0:	f104 0314 	add.w	r3, r4, #20
   b9ed4:	f019 091f 	ands.w	r9, r9, #31
   b9ed8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b9edc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b9ee0:	d02f      	beq.n	b9f42 <__lshift+0xc6>
   b9ee2:	f1c9 0e20 	rsb	lr, r9, #32
   b9ee6:	468a      	mov	sl, r1
   b9ee8:	f04f 0c00 	mov.w	ip, #0
   b9eec:	681a      	ldr	r2, [r3, #0]
   b9eee:	fa02 f209 	lsl.w	r2, r2, r9
   b9ef2:	ea42 020c 	orr.w	r2, r2, ip
   b9ef6:	f84a 2b04 	str.w	r2, [sl], #4
   b9efa:	f853 2b04 	ldr.w	r2, [r3], #4
   b9efe:	4298      	cmp	r0, r3
   b9f00:	fa22 fc0e 	lsr.w	ip, r2, lr
   b9f04:	d8f2      	bhi.n	b9eec <__lshift+0x70>
   b9f06:	1b03      	subs	r3, r0, r4
   b9f08:	3b15      	subs	r3, #21
   b9f0a:	f023 0303 	bic.w	r3, r3, #3
   b9f0e:	3304      	adds	r3, #4
   b9f10:	f104 0215 	add.w	r2, r4, #21
   b9f14:	4290      	cmp	r0, r2
   b9f16:	bf38      	it	cc
   b9f18:	2304      	movcc	r3, #4
   b9f1a:	f841 c003 	str.w	ip, [r1, r3]
   b9f1e:	f1bc 0f00 	cmp.w	ip, #0
   b9f22:	d001      	beq.n	b9f28 <__lshift+0xac>
   b9f24:	f108 0602 	add.w	r6, r8, #2
   b9f28:	3e01      	subs	r6, #1
   b9f2a:	4638      	mov	r0, r7
   b9f2c:	612e      	str	r6, [r5, #16]
   b9f2e:	4621      	mov	r1, r4
   b9f30:	f7ff fd88 	bl	b9a44 <_Bfree>
   b9f34:	4628      	mov	r0, r5
   b9f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9f3a:	f842 0f04 	str.w	r0, [r2, #4]!
   b9f3e:	3301      	adds	r3, #1
   b9f40:	e7c1      	b.n	b9ec6 <__lshift+0x4a>
   b9f42:	3904      	subs	r1, #4
   b9f44:	f853 2b04 	ldr.w	r2, [r3], #4
   b9f48:	f841 2f04 	str.w	r2, [r1, #4]!
   b9f4c:	4298      	cmp	r0, r3
   b9f4e:	d8f9      	bhi.n	b9f44 <__lshift+0xc8>
   b9f50:	e7ea      	b.n	b9f28 <__lshift+0xac>
   b9f52:	bf00      	nop
   b9f54:	000bb491 	.word	0x000bb491
   b9f58:	000bb53c 	.word	0x000bb53c

000b9f5c <__mcmp>:
   b9f5c:	b530      	push	{r4, r5, lr}
   b9f5e:	6902      	ldr	r2, [r0, #16]
   b9f60:	690c      	ldr	r4, [r1, #16]
   b9f62:	1b12      	subs	r2, r2, r4
   b9f64:	d10e      	bne.n	b9f84 <__mcmp+0x28>
   b9f66:	f100 0314 	add.w	r3, r0, #20
   b9f6a:	3114      	adds	r1, #20
   b9f6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b9f70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b9f74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b9f78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b9f7c:	42a5      	cmp	r5, r4
   b9f7e:	d003      	beq.n	b9f88 <__mcmp+0x2c>
   b9f80:	d305      	bcc.n	b9f8e <__mcmp+0x32>
   b9f82:	2201      	movs	r2, #1
   b9f84:	4610      	mov	r0, r2
   b9f86:	bd30      	pop	{r4, r5, pc}
   b9f88:	4283      	cmp	r3, r0
   b9f8a:	d3f3      	bcc.n	b9f74 <__mcmp+0x18>
   b9f8c:	e7fa      	b.n	b9f84 <__mcmp+0x28>
   b9f8e:	f04f 32ff 	mov.w	r2, #4294967295
   b9f92:	e7f7      	b.n	b9f84 <__mcmp+0x28>

000b9f94 <__mdiff>:
   b9f94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9f98:	460c      	mov	r4, r1
   b9f9a:	4606      	mov	r6, r0
   b9f9c:	4611      	mov	r1, r2
   b9f9e:	4620      	mov	r0, r4
   b9fa0:	4690      	mov	r8, r2
   b9fa2:	f7ff ffdb 	bl	b9f5c <__mcmp>
   b9fa6:	1e05      	subs	r5, r0, #0
   b9fa8:	d110      	bne.n	b9fcc <__mdiff+0x38>
   b9faa:	4629      	mov	r1, r5
   b9fac:	4630      	mov	r0, r6
   b9fae:	f7ff fd09 	bl	b99c4 <_Balloc>
   b9fb2:	b930      	cbnz	r0, b9fc2 <__mdiff+0x2e>
   b9fb4:	4b3a      	ldr	r3, [pc, #232]	; (ba0a0 <__mdiff+0x10c>)
   b9fb6:	4602      	mov	r2, r0
   b9fb8:	f240 2132 	movw	r1, #562	; 0x232
   b9fbc:	4839      	ldr	r0, [pc, #228]	; (ba0a4 <__mdiff+0x110>)
   b9fbe:	f7fc f9d9 	bl	b6374 <__assert_func>
   b9fc2:	2301      	movs	r3, #1
   b9fc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b9fc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9fcc:	bfa4      	itt	ge
   b9fce:	4643      	movge	r3, r8
   b9fd0:	46a0      	movge	r8, r4
   b9fd2:	4630      	mov	r0, r6
   b9fd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b9fd8:	bfa6      	itte	ge
   b9fda:	461c      	movge	r4, r3
   b9fdc:	2500      	movge	r5, #0
   b9fde:	2501      	movlt	r5, #1
   b9fe0:	f7ff fcf0 	bl	b99c4 <_Balloc>
   b9fe4:	b920      	cbnz	r0, b9ff0 <__mdiff+0x5c>
   b9fe6:	4b2e      	ldr	r3, [pc, #184]	; (ba0a0 <__mdiff+0x10c>)
   b9fe8:	4602      	mov	r2, r0
   b9fea:	f44f 7110 	mov.w	r1, #576	; 0x240
   b9fee:	e7e5      	b.n	b9fbc <__mdiff+0x28>
   b9ff0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b9ff4:	6926      	ldr	r6, [r4, #16]
   b9ff6:	60c5      	str	r5, [r0, #12]
   b9ff8:	f104 0914 	add.w	r9, r4, #20
   b9ffc:	f108 0514 	add.w	r5, r8, #20
   ba000:	f100 0e14 	add.w	lr, r0, #20
   ba004:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   ba008:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   ba00c:	f108 0210 	add.w	r2, r8, #16
   ba010:	46f2      	mov	sl, lr
   ba012:	2100      	movs	r1, #0
   ba014:	f859 3b04 	ldr.w	r3, [r9], #4
   ba018:	f852 bf04 	ldr.w	fp, [r2, #4]!
   ba01c:	fa1f f883 	uxth.w	r8, r3
   ba020:	fa11 f18b 	uxtah	r1, r1, fp
   ba024:	0c1b      	lsrs	r3, r3, #16
   ba026:	eba1 0808 	sub.w	r8, r1, r8
   ba02a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   ba02e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   ba032:	fa1f f888 	uxth.w	r8, r8
   ba036:	1419      	asrs	r1, r3, #16
   ba038:	454e      	cmp	r6, r9
   ba03a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   ba03e:	f84a 3b04 	str.w	r3, [sl], #4
   ba042:	d8e7      	bhi.n	ba014 <__mdiff+0x80>
   ba044:	1b33      	subs	r3, r6, r4
   ba046:	3b15      	subs	r3, #21
   ba048:	f023 0303 	bic.w	r3, r3, #3
   ba04c:	3304      	adds	r3, #4
   ba04e:	3415      	adds	r4, #21
   ba050:	42a6      	cmp	r6, r4
   ba052:	bf38      	it	cc
   ba054:	2304      	movcc	r3, #4
   ba056:	441d      	add	r5, r3
   ba058:	4473      	add	r3, lr
   ba05a:	469e      	mov	lr, r3
   ba05c:	462e      	mov	r6, r5
   ba05e:	4566      	cmp	r6, ip
   ba060:	d30e      	bcc.n	ba080 <__mdiff+0xec>
   ba062:	f10c 0203 	add.w	r2, ip, #3
   ba066:	1b52      	subs	r2, r2, r5
   ba068:	f022 0203 	bic.w	r2, r2, #3
   ba06c:	3d03      	subs	r5, #3
   ba06e:	45ac      	cmp	ip, r5
   ba070:	bf38      	it	cc
   ba072:	2200      	movcc	r2, #0
   ba074:	441a      	add	r2, r3
   ba076:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   ba07a:	b17b      	cbz	r3, ba09c <__mdiff+0x108>
   ba07c:	6107      	str	r7, [r0, #16]
   ba07e:	e7a3      	b.n	b9fc8 <__mdiff+0x34>
   ba080:	f856 8b04 	ldr.w	r8, [r6], #4
   ba084:	fa11 f288 	uxtah	r2, r1, r8
   ba088:	1414      	asrs	r4, r2, #16
   ba08a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   ba08e:	b292      	uxth	r2, r2
   ba090:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   ba094:	f84e 2b04 	str.w	r2, [lr], #4
   ba098:	1421      	asrs	r1, r4, #16
   ba09a:	e7e0      	b.n	ba05e <__mdiff+0xca>
   ba09c:	3f01      	subs	r7, #1
   ba09e:	e7ea      	b.n	ba076 <__mdiff+0xe2>
   ba0a0:	000bb491 	.word	0x000bb491
   ba0a4:	000bb53c 	.word	0x000bb53c

000ba0a8 <__ulp>:
   ba0a8:	b082      	sub	sp, #8
   ba0aa:	ed8d 0b00 	vstr	d0, [sp]
   ba0ae:	9b01      	ldr	r3, [sp, #4]
   ba0b0:	4912      	ldr	r1, [pc, #72]	; (ba0fc <__ulp+0x54>)
   ba0b2:	4019      	ands	r1, r3
   ba0b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   ba0b8:	2900      	cmp	r1, #0
   ba0ba:	dd05      	ble.n	ba0c8 <__ulp+0x20>
   ba0bc:	2200      	movs	r2, #0
   ba0be:	460b      	mov	r3, r1
   ba0c0:	ec43 2b10 	vmov	d0, r2, r3
   ba0c4:	b002      	add	sp, #8
   ba0c6:	4770      	bx	lr
   ba0c8:	4249      	negs	r1, r1
   ba0ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   ba0ce:	ea4f 5021 	mov.w	r0, r1, asr #20
   ba0d2:	f04f 0200 	mov.w	r2, #0
   ba0d6:	f04f 0300 	mov.w	r3, #0
   ba0da:	da04      	bge.n	ba0e6 <__ulp+0x3e>
   ba0dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   ba0e0:	fa41 f300 	asr.w	r3, r1, r0
   ba0e4:	e7ec      	b.n	ba0c0 <__ulp+0x18>
   ba0e6:	f1a0 0114 	sub.w	r1, r0, #20
   ba0ea:	291e      	cmp	r1, #30
   ba0ec:	bfda      	itte	le
   ba0ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   ba0f2:	fa20 f101 	lsrle.w	r1, r0, r1
   ba0f6:	2101      	movgt	r1, #1
   ba0f8:	460a      	mov	r2, r1
   ba0fa:	e7e1      	b.n	ba0c0 <__ulp+0x18>
   ba0fc:	7ff00000 	.word	0x7ff00000

000ba100 <__b2d>:
   ba100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba102:	6905      	ldr	r5, [r0, #16]
   ba104:	f100 0714 	add.w	r7, r0, #20
   ba108:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   ba10c:	1f2e      	subs	r6, r5, #4
   ba10e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   ba112:	4620      	mov	r0, r4
   ba114:	f7ff fd48 	bl	b9ba8 <__hi0bits>
   ba118:	f1c0 0320 	rsb	r3, r0, #32
   ba11c:	280a      	cmp	r0, #10
   ba11e:	f8df c07c 	ldr.w	ip, [pc, #124]	; ba19c <__b2d+0x9c>
   ba122:	600b      	str	r3, [r1, #0]
   ba124:	dc14      	bgt.n	ba150 <__b2d+0x50>
   ba126:	f1c0 0e0b 	rsb	lr, r0, #11
   ba12a:	fa24 f10e 	lsr.w	r1, r4, lr
   ba12e:	42b7      	cmp	r7, r6
   ba130:	ea41 030c 	orr.w	r3, r1, ip
   ba134:	bf34      	ite	cc
   ba136:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ba13a:	2100      	movcs	r1, #0
   ba13c:	3015      	adds	r0, #21
   ba13e:	fa04 f000 	lsl.w	r0, r4, r0
   ba142:	fa21 f10e 	lsr.w	r1, r1, lr
   ba146:	ea40 0201 	orr.w	r2, r0, r1
   ba14a:	ec43 2b10 	vmov	d0, r2, r3
   ba14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba150:	42b7      	cmp	r7, r6
   ba152:	bf3a      	itte	cc
   ba154:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ba158:	f1a5 0608 	subcc.w	r6, r5, #8
   ba15c:	2100      	movcs	r1, #0
   ba15e:	380b      	subs	r0, #11
   ba160:	d017      	beq.n	ba192 <__b2d+0x92>
   ba162:	f1c0 0c20 	rsb	ip, r0, #32
   ba166:	fa04 f500 	lsl.w	r5, r4, r0
   ba16a:	42be      	cmp	r6, r7
   ba16c:	fa21 f40c 	lsr.w	r4, r1, ip
   ba170:	ea45 0504 	orr.w	r5, r5, r4
   ba174:	bf8c      	ite	hi
   ba176:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   ba17a:	2400      	movls	r4, #0
   ba17c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   ba180:	fa01 f000 	lsl.w	r0, r1, r0
   ba184:	fa24 f40c 	lsr.w	r4, r4, ip
   ba188:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   ba18c:	ea40 0204 	orr.w	r2, r0, r4
   ba190:	e7db      	b.n	ba14a <__b2d+0x4a>
   ba192:	ea44 030c 	orr.w	r3, r4, ip
   ba196:	460a      	mov	r2, r1
   ba198:	e7d7      	b.n	ba14a <__b2d+0x4a>
   ba19a:	bf00      	nop
   ba19c:	3ff00000 	.word	0x3ff00000

000ba1a0 <__d2b>:
   ba1a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ba1a4:	4689      	mov	r9, r1
   ba1a6:	2101      	movs	r1, #1
   ba1a8:	ec57 6b10 	vmov	r6, r7, d0
   ba1ac:	4690      	mov	r8, r2
   ba1ae:	f7ff fc09 	bl	b99c4 <_Balloc>
   ba1b2:	4604      	mov	r4, r0
   ba1b4:	b930      	cbnz	r0, ba1c4 <__d2b+0x24>
   ba1b6:	4602      	mov	r2, r0
   ba1b8:	4b25      	ldr	r3, [pc, #148]	; (ba250 <__d2b+0xb0>)
   ba1ba:	4826      	ldr	r0, [pc, #152]	; (ba254 <__d2b+0xb4>)
   ba1bc:	f240 310a 	movw	r1, #778	; 0x30a
   ba1c0:	f7fc f8d8 	bl	b6374 <__assert_func>
   ba1c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   ba1c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   ba1cc:	bb35      	cbnz	r5, ba21c <__d2b+0x7c>
   ba1ce:	2e00      	cmp	r6, #0
   ba1d0:	9301      	str	r3, [sp, #4]
   ba1d2:	d028      	beq.n	ba226 <__d2b+0x86>
   ba1d4:	4668      	mov	r0, sp
   ba1d6:	9600      	str	r6, [sp, #0]
   ba1d8:	f7ff fd06 	bl	b9be8 <__lo0bits>
   ba1dc:	9900      	ldr	r1, [sp, #0]
   ba1de:	b300      	cbz	r0, ba222 <__d2b+0x82>
   ba1e0:	9a01      	ldr	r2, [sp, #4]
   ba1e2:	f1c0 0320 	rsb	r3, r0, #32
   ba1e6:	fa02 f303 	lsl.w	r3, r2, r3
   ba1ea:	430b      	orrs	r3, r1
   ba1ec:	40c2      	lsrs	r2, r0
   ba1ee:	6163      	str	r3, [r4, #20]
   ba1f0:	9201      	str	r2, [sp, #4]
   ba1f2:	9b01      	ldr	r3, [sp, #4]
   ba1f4:	61a3      	str	r3, [r4, #24]
   ba1f6:	2b00      	cmp	r3, #0
   ba1f8:	bf14      	ite	ne
   ba1fa:	2202      	movne	r2, #2
   ba1fc:	2201      	moveq	r2, #1
   ba1fe:	6122      	str	r2, [r4, #16]
   ba200:	b1d5      	cbz	r5, ba238 <__d2b+0x98>
   ba202:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   ba206:	4405      	add	r5, r0
   ba208:	f8c9 5000 	str.w	r5, [r9]
   ba20c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   ba210:	f8c8 0000 	str.w	r0, [r8]
   ba214:	4620      	mov	r0, r4
   ba216:	b003      	add	sp, #12
   ba218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba21c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba220:	e7d5      	b.n	ba1ce <__d2b+0x2e>
   ba222:	6161      	str	r1, [r4, #20]
   ba224:	e7e5      	b.n	ba1f2 <__d2b+0x52>
   ba226:	a801      	add	r0, sp, #4
   ba228:	f7ff fcde 	bl	b9be8 <__lo0bits>
   ba22c:	9b01      	ldr	r3, [sp, #4]
   ba22e:	6163      	str	r3, [r4, #20]
   ba230:	2201      	movs	r2, #1
   ba232:	6122      	str	r2, [r4, #16]
   ba234:	3020      	adds	r0, #32
   ba236:	e7e3      	b.n	ba200 <__d2b+0x60>
   ba238:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   ba23c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   ba240:	f8c9 0000 	str.w	r0, [r9]
   ba244:	6918      	ldr	r0, [r3, #16]
   ba246:	f7ff fcaf 	bl	b9ba8 <__hi0bits>
   ba24a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   ba24e:	e7df      	b.n	ba210 <__d2b+0x70>
   ba250:	000bb491 	.word	0x000bb491
   ba254:	000bb53c 	.word	0x000bb53c

000ba258 <__ratio>:
   ba258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba25c:	4688      	mov	r8, r1
   ba25e:	4669      	mov	r1, sp
   ba260:	4681      	mov	r9, r0
   ba262:	f7ff ff4d 	bl	ba100 <__b2d>
   ba266:	a901      	add	r1, sp, #4
   ba268:	4640      	mov	r0, r8
   ba26a:	ec55 4b10 	vmov	r4, r5, d0
   ba26e:	f7ff ff47 	bl	ba100 <__b2d>
   ba272:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ba276:	f8d8 2010 	ldr.w	r2, [r8, #16]
   ba27a:	eba3 0c02 	sub.w	ip, r3, r2
   ba27e:	e9dd 3200 	ldrd	r3, r2, [sp]
   ba282:	1a9b      	subs	r3, r3, r2
   ba284:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   ba288:	ec51 0b10 	vmov	r0, r1, d0
   ba28c:	2b00      	cmp	r3, #0
   ba28e:	bfd6      	itet	le
   ba290:	460a      	movle	r2, r1
   ba292:	462a      	movgt	r2, r5
   ba294:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   ba298:	468b      	mov	fp, r1
   ba29a:	462f      	mov	r7, r5
   ba29c:	bfd4      	ite	le
   ba29e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   ba2a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   ba2a6:	4620      	mov	r0, r4
   ba2a8:	ee10 2a10 	vmov	r2, s0
   ba2ac:	465b      	mov	r3, fp
   ba2ae:	4639      	mov	r1, r7
   ba2b0:	f7fd fec2 	bl	b8038 <__aeabi_ddiv>
   ba2b4:	ec41 0b10 	vmov	d0, r0, r1
   ba2b8:	b003      	add	sp, #12
   ba2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba2be <__copybits>:
   ba2be:	3901      	subs	r1, #1
   ba2c0:	b570      	push	{r4, r5, r6, lr}
   ba2c2:	1149      	asrs	r1, r1, #5
   ba2c4:	6914      	ldr	r4, [r2, #16]
   ba2c6:	3101      	adds	r1, #1
   ba2c8:	f102 0314 	add.w	r3, r2, #20
   ba2cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   ba2d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   ba2d4:	1f05      	subs	r5, r0, #4
   ba2d6:	42a3      	cmp	r3, r4
   ba2d8:	d30c      	bcc.n	ba2f4 <__copybits+0x36>
   ba2da:	1aa3      	subs	r3, r4, r2
   ba2dc:	3b11      	subs	r3, #17
   ba2de:	f023 0303 	bic.w	r3, r3, #3
   ba2e2:	3211      	adds	r2, #17
   ba2e4:	42a2      	cmp	r2, r4
   ba2e6:	bf88      	it	hi
   ba2e8:	2300      	movhi	r3, #0
   ba2ea:	4418      	add	r0, r3
   ba2ec:	2300      	movs	r3, #0
   ba2ee:	4288      	cmp	r0, r1
   ba2f0:	d305      	bcc.n	ba2fe <__copybits+0x40>
   ba2f2:	bd70      	pop	{r4, r5, r6, pc}
   ba2f4:	f853 6b04 	ldr.w	r6, [r3], #4
   ba2f8:	f845 6f04 	str.w	r6, [r5, #4]!
   ba2fc:	e7eb      	b.n	ba2d6 <__copybits+0x18>
   ba2fe:	f840 3b04 	str.w	r3, [r0], #4
   ba302:	e7f4      	b.n	ba2ee <__copybits+0x30>

000ba304 <__any_on>:
   ba304:	f100 0214 	add.w	r2, r0, #20
   ba308:	6900      	ldr	r0, [r0, #16]
   ba30a:	114b      	asrs	r3, r1, #5
   ba30c:	4298      	cmp	r0, r3
   ba30e:	b510      	push	{r4, lr}
   ba310:	db11      	blt.n	ba336 <__any_on+0x32>
   ba312:	dd0a      	ble.n	ba32a <__any_on+0x26>
   ba314:	f011 011f 	ands.w	r1, r1, #31
   ba318:	d007      	beq.n	ba32a <__any_on+0x26>
   ba31a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   ba31e:	fa24 f001 	lsr.w	r0, r4, r1
   ba322:	fa00 f101 	lsl.w	r1, r0, r1
   ba326:	428c      	cmp	r4, r1
   ba328:	d10b      	bne.n	ba342 <__any_on+0x3e>
   ba32a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   ba32e:	4293      	cmp	r3, r2
   ba330:	d803      	bhi.n	ba33a <__any_on+0x36>
   ba332:	2000      	movs	r0, #0
   ba334:	bd10      	pop	{r4, pc}
   ba336:	4603      	mov	r3, r0
   ba338:	e7f7      	b.n	ba32a <__any_on+0x26>
   ba33a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   ba33e:	2900      	cmp	r1, #0
   ba340:	d0f5      	beq.n	ba32e <__any_on+0x2a>
   ba342:	2001      	movs	r0, #1
   ba344:	e7f6      	b.n	ba334 <__any_on+0x30>

000ba346 <_calloc_r>:
   ba346:	b513      	push	{r0, r1, r4, lr}
   ba348:	434a      	muls	r2, r1
   ba34a:	4611      	mov	r1, r2
   ba34c:	9201      	str	r2, [sp, #4]
   ba34e:	f7fc f801 	bl	b6354 <_malloc_r>
   ba352:	4604      	mov	r4, r0
   ba354:	b118      	cbz	r0, ba35e <_calloc_r+0x18>
   ba356:	9a01      	ldr	r2, [sp, #4]
   ba358:	2100      	movs	r1, #0
   ba35a:	f7fe f8c0 	bl	b84de <memset>
   ba35e:	4620      	mov	r0, r4
   ba360:	b002      	add	sp, #8
   ba362:	bd10      	pop	{r4, pc}
   ba364:	0000      	movs	r0, r0
	...

000ba368 <nan>:
   ba368:	ed9f 0b01 	vldr	d0, [pc, #4]	; ba370 <nan+0x8>
   ba36c:	4770      	bx	lr
   ba36e:	bf00      	nop
   ba370:	00000000 	.word	0x00000000
   ba374:	7ff80000 	.word	0x7ff80000

000ba378 <__ascii_wctomb>:
   ba378:	b149      	cbz	r1, ba38e <__ascii_wctomb+0x16>
   ba37a:	2aff      	cmp	r2, #255	; 0xff
   ba37c:	bf85      	ittet	hi
   ba37e:	238a      	movhi	r3, #138	; 0x8a
   ba380:	6003      	strhi	r3, [r0, #0]
   ba382:	700a      	strbls	r2, [r1, #0]
   ba384:	f04f 30ff 	movhi.w	r0, #4294967295
   ba388:	bf98      	it	ls
   ba38a:	2001      	movls	r0, #1
   ba38c:	4770      	bx	lr
   ba38e:	4608      	mov	r0, r1
   ba390:	4770      	bx	lr
	...

000ba394 <__aeabi_d2lz>:
   ba394:	b538      	push	{r3, r4, r5, lr}
   ba396:	2200      	movs	r2, #0
   ba398:	2300      	movs	r3, #0
   ba39a:	4604      	mov	r4, r0
   ba39c:	460d      	mov	r5, r1
   ba39e:	f7fd ff93 	bl	b82c8 <__aeabi_dcmplt>
   ba3a2:	b928      	cbnz	r0, ba3b0 <__aeabi_d2lz+0x1c>
   ba3a4:	4620      	mov	r0, r4
   ba3a6:	4629      	mov	r1, r5
   ba3a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ba3ac:	f7fe b862 	b.w	b8474 <__aeabi_d2ulz>
   ba3b0:	4620      	mov	r0, r4
   ba3b2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   ba3b6:	f7fe f85d 	bl	b8474 <__aeabi_d2ulz>
   ba3ba:	4240      	negs	r0, r0
   ba3bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba3c0:	bd38      	pop	{r3, r4, r5, pc}
   ba3c2:	bf00      	nop

000ba3c4 <dynalib_user>:
   ba3c4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   ba3d4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   ba3e4:	7620 7269 7574 6c61 6300 7268 7369 6974      virtual.christi
   ba3f4:	6e61 7469 2f79 616c 0074 6863 6972 7473     anity/lat.christ
   ba404:	6169 696e 7974 6c2f 6e6f 6967 4700 5649     ianity/longi.GIV
   ba414:	2045 454d 5420 4548 5020 534f 5449 4f49     E ME THE POSITIO
   ba424:	214e 6300 7268 7369 6974 6e61 7469 0079     N!.christianity.
   ba434:	614c 6974 7574 6564 203a 4c00 6e6f 6967     Latitude: .Longi
   ba444:	7574 6564 203a 6c00 6261 742e 6568 6377     tude: .lab.thewc
   ba454:	2e6c 6f63 006d 6564 6166 6c75 2074 4d00     l.com.default .M
   ba464:	4253 4c00 4253 3c00 5053 5349 7465 6974     SB.LSB.<SPISetti
   ba474:	676e 2073 6564 6166 6c75 3e74 3c00 5053     ngs default>.<SP
   ba484:	5349 7465 6974 676e 2073 7325 7525 2520     ISettings %s%u %
   ba494:	2073 4f4d 4544 7525 003e                    s MODE%u>.

000ba49e <_ZL4font>:
   ba49e:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   ba4ae:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   ba4be:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   ba4ce:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   ba4de:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   ba4ee:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   ba4fe:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   ba50e:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   ba51e:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   ba52e:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   ba53e:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   ba54e:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   ba55e:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   ba56e:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   ba57e:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   ba58e:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   ba59e:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   ba5ae:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   ba5be:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   ba5ce:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   ba5de:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   ba5ee:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   ba5fe:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   ba60e:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   ba61e:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   ba62e:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   ba63e:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   ba64e:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   ba65e:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   ba66e:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   ba67e:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   ba68e:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   ba69e:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   ba6ae:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   ba6be:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   ba6ce:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   ba6de:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   ba6ee:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   ba6fe:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   ba70e:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   ba71e:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   ba72e:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   ba73e:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   ba74e:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   ba75e:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   ba76e:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   ba77e:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   ba78e:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   ba79e:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   ba7ae:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   ba7be:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   ba7ce:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   ba7de:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   ba7ee:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   ba7fe:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   ba80e:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   ba81e:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   ba82e:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   ba83e:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   ba84e:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   ba85e:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   ba86e:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   ba87e:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   ba88e:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   ba89e:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   ba8ae:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   ba8be:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   ba8ce:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   ba8de:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   ba8ee:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   ba8fe:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   ba90e:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   ba91e:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   ba92e:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   ba93e:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   ba94e:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   ba95e:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   ba96e:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   ba97e:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   ba98e:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000ba9a0 <_ZTV12Adafruit_GFX>:
	...
   ba9b0:	49ed 000b 66fd 000b 40a9 000b 43f3 000b     .I...f...@...C..
   ba9c0:	43f5 000b 4427 000b 4403 000b 4415 000b     .C..'D...D...D..
   ba9d0:	4335 000b 43f3 000b 461f 000b 461d 000b     5C...C...F...F..
   ba9e0:	443f 000b 447d 000b 44b7 000b 44fd 000b     ?D..}D...D...D..
   ba9f0:	4519 000b 459d 000b                         .E...E..

000ba9f8 <_ZTV16OledWingAdafruit>:
	...
   baa00:	4afd 000b 4b1d 000b 49ed 000b 66fd 000b     .J...K...I...f..
   baa10:	5565 000b 43f3 000b 43f5 000b 4427 000b     eU...C...C..'D..
   baa20:	4403 000b 4415 000b 4335 000b 43f3 000b     .D...D..5C...C..
   baa30:	461f 000b 5703 000b 5cab 000b 5c5d 000b     .F...W...\..]\..
   baa40:	44b7 000b 44fd 000b 4519 000b 459d 000b     .D...D...E...E..
   baa50:	0400 514d 5454 0004 4d06 4951 6473 0370     ..MQTT...MQIsdp.

000baa60 <_ZTVN8particle11SPISettingsE>:
	...
   baa68:	42e1 000b 42b5 000b 42b7 000b               .B...B...B..

000baa74 <_ZL12splash1_data>:
   baa74:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   baa84:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   baa94:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   baaa4:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   baab4:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   baac4:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   baadc:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   baaec:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   baafc:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   bab0c:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   bab1c:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   bab2c:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   bab3c:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   bab4c:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   bab5c:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   bab6c:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   bab7c:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   bab8c:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   bab9c:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   babac:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   babbc:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   babcc:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   babdc:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   babec:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   bac04:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   bac1c:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   bac2c:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   bac3c:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   bac4c:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   bac5c:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   bac6c:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   bac7c:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   bac8c:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   bac9c:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   bacac:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   bacbc:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   baccc:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   bacdc:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   bacec:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   bacfc:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   bad0c:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   bad1c:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   bad2c:	fdff 5b6b 6adb c0fd                         ..k[.j..

000bad34 <_ZL12splash2_data>:
   bad34:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   bad44:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   bad54:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   bad70:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   bad80:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   bad90:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   bada0:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   badb0:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   badc0:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   badd0:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   bade0:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   badf0:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   bae00:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   bae10:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   bae20:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   bae30:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   bae40:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   bae50:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   bae60:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   bae70:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   bae80:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   bae90:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   baea0:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   baeb0:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   baec8:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   baed8:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   baee8:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   baef8:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   baf08:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000baf14 <_ZTV16Adafruit_SSD1306>:
	...
   baf1c:	5539 000b 5551 000b 49ed 000b 66fd 000b     9U..QU...I...f..
   baf2c:	5565 000b 43f3 000b 43f5 000b 4427 000b     eU...C...C..'D..
   baf3c:	4403 000b 4415 000b 4335 000b 43f3 000b     .D...D..5C...C..
   baf4c:	461f 000b 5703 000b 5cab 000b 5c5d 000b     .F...W...\..]\..
   baf5c:	44b7 000b 44fd 000b 4519 000b 459d 000b     .D...D...E...E..

000baf6c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   baf6c:	8000 e0c0 f8f0 fefc                         ........

000baf74 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   baf74:	0100 0703 1f0f 7f3f                         ......?.

000baf7c <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   baf7c:	d5ae a880                                   ....

000baf80 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   baf80:	00d3 8d40                                   ..@.

000baf84 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   baf84:	0020 c8a1                                    ...

000baf88 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   baf88:	40db a6a4 af2e                              .@....

000baf8e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   baf8e:	02da 8f81                                   ....

000baf92 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   baf92:	12da                                         ...

000baf95 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   baf95:	02da                                         ...

000baf98 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   baf98:	0022 21ff 0000 0000                         "..!....

000bafa0 <_ZTVN5spark13EthernetClassE>:
	...
   bafa8:	63f3 000b 63e9 000b 63df 000b 63d5 000b     .c...c...c...c..
   bafb8:	63c9 000b 63bd 000b 7535 000b 753d 000b     .c...c..5u..=u..
   bafc8:	63b1 000b 63a9 000b 639f 000b 6395 000b     .c...c...c...c..
   bafd8:	756d 000b                                   mu..

000bafdc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bafdc:	0800 1810 2820 3830                         .... (08

000bafe4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bafec:	616e 006e 6e69 0066 766f 0066 002e 7061     nan.inf.ovf...ap
   baffc:	0070 5925 252d 2d6d 6425 2554 3a48 4d25     p.%Y-%m-%dT%H:%M
   bb00c:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000bb01c <_ZTV9IPAddress>:
	...
   bb024:	6b85 000b 6b75 000b 6b77 000b               .k..uk..wk..

000bb030 <_ZTV9USBSerial>:
	...
   bb038:	6c97 000b 6cff 000b 6cd5 000b 66fd 000b     .l...l...l...f..
   bb048:	6cc7 000b 6c99 000b 6ca9 000b 6cf9 000b     .l...l...l...l..
   bb058:	6cb9 000b 6c91 000b                         .l...l..

000bb060 <_ZTV11USARTSerial>:
	...
   bb068:	6d91 000b 6dfd 000b 6dd5 000b 66fd 000b     .m...m...m...f..
   bb078:	6da5 000b 6dc1 000b 6db3 000b 6dcf 000b     .m...m...m...m..
   bb088:	6d93 000b 6d97 000b                         .m...m..

000bb090 <_ZTV7TwoWire>:
	...
   bb098:	6e35 000b 6e7f 000b 6e57 000b 6e37 000b     5n...n..Wn..7n..
   bb0a8:	6e5f 000b 6e67 000b 6e6f 000b 6e77 000b     _n..gn..on..wn..
   bb0b8:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   bb0c8:	2072 203d 6425 0000                         r = %d..

000bb0d0 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb0d8:	6f65 000b 6f89 000b 7473 000b 6f97 000b     eo...o..st...o..
   bb0e8:	6f69 000b                                   io..

000bb0ec <_ZTV9TCPClient>:
	...
   bb0f4:	6a05 000b 6a1d 000b 6ee1 000b 6efb 000b     .j...j...n...n..
   bb104:	7309 000b 6f25 000b 717f 000b 6f59 000b     .s..%o...q..Yo..
   bb114:	7211 000b 7051 000b 71ad 000b 73bd 000b     .r..Qp...q...s..
   bb124:	714d 000b 6f5b 000b 6f0d 000b 6f9d 000b     Mq..[o...o...o..
   bb134:	7031 000b                                   1p..

000bb138 <_ZTVN5spark9WiFiClassE>:
	...
   bb140:	74d7 000b 74cd 000b 74c3 000b 7479 000b     .t...t...t..yt..
   bb150:	74b7 000b 74ab 000b 7535 000b 753d 000b     .t...t..5u..=u..
   bb160:	749f 000b 7497 000b 748d 000b 7483 000b     .t...t...t...t..
   bb170:	756d 000b                                   mu..

000bb174 <_ZTVN5spark12NetworkClassE>:
	...
   bb17c:	74f5 000b 74ff 000b 7509 000b 7513 000b     .t...t...u...u..
   bb18c:	751d 000b 7529 000b 7535 000b 753d 000b     .u..)u..5u..=u..
   bb19c:	7545 000b 7551 000b 7559 000b 7563 000b     Eu..Qu..Yu..cu..
   bb1ac:	756d 000b                                   mu..

000bb1b0 <_ZSt7nothrow>:
	...

000bb1b1 <_ZTSSt19_Sp_make_shared_tag>:
   bb1b1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bb1c1:	6572 5f64 6174 0067 0000                     red_tag....

000bb1cc <_ZTISt19_Sp_make_shared_tag>:
   bb1cc:	b20c 000b b1b1 000b                         ........

000bb1d4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bb1d4:	b26c 000b b1e0 000b b290 000b               l...........

000bb1e0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bb1e0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bb1f0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bb200:	0045 0000                                   E...

000bb204 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bb204:	0000 0000 b1d4 000b 7895 000b 78a9 000b     .........x...x..
   bb214:	7a3d 000b 7a3d 000b 7913 000b 7855 000b     =z..=z...y..Ux..
   bb224:	78fb 000b 78bd 000b 7887 000b               .x...x...x..

000bb230 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bb230:	b26c 000b b23c 000b b1d4 000b               l...<.......

000bb23c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bb23c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bb24c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bb25c:	666e 456f 0000 0000                         nfoE....

000bb264 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bb264:	0000 0000 b230 000b 793d 000b 7951 000b     ....0...=y..Qy..
   bb274:	7a3d 000b 7a3d 000b 7913 000b 7855 000b     =z..=z...y..Ux..
   bb284:	7a11 000b 799d 000b 7965 000b               .z...y..ey..

000bb290 <_ZTISt9type_info>:
   bb290:	b20c 000b b298 000b                         ........

000bb298 <_ZTSSt9type_info>:
   bb298:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bb2a8:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bb2b8:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bb2c8:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bb2d8:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bb2e8:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bb2f8:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bb308:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bb318:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bb328:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   bb338:	6900 696e 7974 0000                         .inity..

000bb340 <fpi.1>:
   bb340:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bb350:	0000 0000                                   ....

000bb354 <fpinan.0>:
   bb354:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bb364:	0000 0000                                   ....

000bb368 <tinytens>:
   bb368:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bb378:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bb388:	6f43 64ac 0628 1168                         Co.d(.h.

000bb390 <_ctype_>:
   bb390:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bb3a0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bb3b0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bb3c0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bb3d0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bb3e0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bb3f0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bb400:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bb410:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bb490:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bb4a0:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   bb4b0:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   bb4c0:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   bb4d0:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   bb4e0:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   bb4f0:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   bb500:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   bb510:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   bb520:	6874 7865 632e 0000                         thex.c..

000bb528 <_C_numeric_locale>:
   bb528:	aff8 000b a44a 000b e46c 2003 0043 4f50     ....J...l.. C.PO
   bb538:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   bb548:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bb558:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bb568:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bb578:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bb588:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bb598:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bb5a8:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   bb5b8:	0063 0000 0000 0000                         c.......

000bb5c0 <__mprec_bigtens>:
   bb5c0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bb5d0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bb5e0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bb5e8 <__mprec_tens>:
   bb5e8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bb5f8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bb608:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bb618:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bb628:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bb638:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bb648:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bb658:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bb668:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bb678:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bb688:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bb698:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bb6a8:	9db4 79d9 7843 44ea                         ...yCx.D

000bb6b0 <p05.0>:
   bb6b0:	0005 0000 0019 0000 007d 0000               ........}...

000bb6bc <link_const_variable_data_end>:
   bb6bc:	000b426d 	.word	0x000b426d
   bb6c0:	000b63fd 	.word	0x000b63fd
   bb6c4:	000b6575 	.word	0x000b6575
   bb6c8:	000b66ed 	.word	0x000b66ed
   bb6cc:	000b69d9 	.word	0x000b69d9
   bb6d0:	000b69e9 	.word	0x000b69e9
   bb6d4:	000b6a31 	.word	0x000b6a31
   bb6d8:	000b74e1 	.word	0x000b74e1
   bb6dc:	000b7645 	.word	0x000b7645
